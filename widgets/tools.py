from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *

import sys

from data import ComboData as CD



class Tools(QDockWidget):

    def __init__(self):
        super().__init__()

        self.setUI()

    def SetData(self, data):
        self.data = data
        self.data.setData(self.type)
        self.screen.SetData(self.data)
        self.code.SetData(self.data)

    def SetObject(self, object_type, object_name):
        self.type = object_type
        self.name = object_name

        self.setUI()
        self.screen.setUI(self.type)

    def SetScreen(self, screen):
        self.screen = screen

    def SetCodes(self, codes):
        self.code = codes

    def setUI(self):
        self.widget = QMainWindow()

        scroll = QScrollArea()
        scroll.setWidget(self.widget)
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        scroll.setObjectName("scroll")

        self.setWidget(scroll)

        w = QWidget()
        self.cb = QComboBox()
        self.cb.clear()
        self.cb2 = QComboBox()
        self.cb2.clear()

        self.form = QFormLayout()
        self.cb.clear()
        self.setWindowTitle("Araçlar")
        try:
            self.set_combo_box()
            self.set_default()
            self.cb.currentIndexChanged.connect(self.combo_1_func)
        except Exception as ex:
            print(ex)


        w.setLayout(self.form)
        self.widget.setCentralWidget(w)

    def set_combo_box(self):
        if self.type == "QLabel":
            self.cb.addItems(CD.label)
            self.form.addRow(self.cb)

        elif self.type == "QPushButton":
            self.cb.addItems(CD.pushbutton)
            self.form.addRow(self.cb)

        elif self.type == "QLineEdit":
            self.cb.addItems(CD.lineedit)
            self.form.addRow(self.cb)

        elif self.type == "QTextEdit":
            self.cb.addItems(CD.textedit)
            self.form.addRow(self.cb)

        elif self.type == "QRadioButton":
            self.cb.addItems(CD.radiobutton)
            self.form.addRow(self.cb)

        elif self.type == "QCheckBox":
            self.cb.addItems(CD.checkbox)
            self.form.addRow(self.cb)

        elif self.type == "QComboBox":
            self.cb.addItems(CD.combobox)
            self.form.addRow(self.cb)

        elif self.type == "QSpinBox":
            self.cb.addItems(CD.spinbox)
            self.form.addRow(self.cb)

        elif self.type == "QSlider":
            self.cb2 = QComboBox()
            self.cb2.addItems(["","vertical","horizontal"])
            self.cb.addItems(CD.slider_self)
            self.form.addRow(self.cb2)
            self.form.addRow(self.cb)

        elif self.type == "QListWidget":
            self.cb.addItems(CD.listwidget)
            self.form.addRow(self.cb)

        elif self.type == "QProgressBar":
            self.cb.addItems(CD.progressbar)
            self.form.addRow(self.cb)

        elif self.type == "QGroupBox":
            self.cb.addItems(CD.groupbox)
            self.form.addRow(self.cb)

        elif self.type == "QTabWidget":
            self.cb2 = QComboBox()
            self.cb2.addItems(["QTabWidget","QTabBar"])
            self.cb.addItems(CD.tabwidget)
            self.form.addRow(self.cb2)
            self.form.addRow(self.cb)

        elif self.type == "QDockWidget":
            self.cb.addItems(CD.dockwidget)
            self.form.addRow(self.cb)

        elif self.type == "QMenu":
            self.cb2 = QComboBox()
            self.cb2.addItems(["QMenuBar","QMenu"])
            self.cb.addItems(CD.menubar)
            self.form.addRow(self.cb2)
            self.form.addRow(self.cb)

        elif self.type == "QScrollBar":
            self.cb2 = QComboBox()
            self.cb2.addItems(["","vertical","horizontal"])
            self.cb.addItems(CD.scrollbar_self)
            self.form.addRow(self.cb2)
            self.form.addRow(self.cb)

        try:
            self.cb2.currentIndexChanged.connect(self.change_combo_box_2)
        except Exception as ex:
            print(ex)


    def set_default(self):
        frm = QFrame()
        frm.setFrameShape(QFrame.HLine)
        self.form.addRow(frm)


        self.color = QLineEdit()
        self.color.setObjectName("color_line")
        self.color.textChanged.connect(self.set_color)
        self.form.addRow(QLabel("color: "),self.color)


        frm = QFrame()
        frm.setFrameShape(QFrame.HLine)
        self.form.addRow(frm)


        self.image = QLineEdit()
        self.image.setObjectName("image_line")
        self.image.textChanged.connect(self.set_image)
        self.form.addRow(QLabel("image: "),self.image)

        self.outline = QLineEdit()
        self.outline.setObjectName("outline_line")
        self.image.textChanged.connect(self.set_outline)
        self.form.addRow(QLabel("outline: "),self.outline)


        frm = QFrame()
        frm.setFrameShape(QFrame.HLine)
        self.form.addRow(frm)




        width_hbox = QHBoxLayout()
        self.width_spin = QSpinBox()
        self.width_spin.setMaximum(5000)
        self.width_spin.valueChanged.connect(self.set_width_v)
        self.width_cb = QComboBox()
        self.width_cb.addItems(["px","cm","mm","in","pt","pc"])
        self.width_cb.currentIndexChanged.connect(self.set_width_t)
        width_hbox.addWidget(self.width_spin)
        width_hbox.addWidget(self.width_cb)
        self.form.addRow(QLabel("width: "),width_hbox)

        height_hbox = QHBoxLayout()
        self.height_spin = QSpinBox()
        self.height_spin.setMaximum(5000)
        self.height_spin.valueChanged.connect(self.set_height_v)
        self.height_cb = QComboBox()
        self.height_cb.addItems(["px","cm","mm","in","pt","pc"])
        self.height_cb.currentIndexChanged.connect(self.set_height_t)
        height_hbox.addWidget(self.height_spin)
        height_hbox.addWidget(self.height_cb)
        self.form.addRow(QLabel("height: "),height_hbox)




        frm = QFrame()
        frm.setFrameShape(QFrame.HLine)
        self.form.addRow(frm)




        f_family_lbl = QLabel("font-family: ")
        f_family_lbl.setObjectName("lbl")
        self.f_family_edit = QLineEdit()
        self.f_family_edit.textChanged.connect(self.set_font_family)
        self.form.addRow(f_family_lbl,self.f_family_edit)

        f_size_lbl = QLabel("font-size: ")
        f_size_lbl.setObjectName("lbl")
        self.f_size_spin = QLineEdit()
        self.f_size_spin.textChanged.connect(self.set_font_size)
        self.form.addRow(f_size_lbl,self.f_size_spin)

        f_weight_lbl = QLabel("font-weight")
        f_weight_lbl.setObjectName("lbl")
        self.f_weight_cb = QComboBox()
        self.f_weight_cb.addItems(["normal","bold","lighter","bolder","inherit","initial","unset"])
        self.f_weight_cb.currentIndexChanged.connect(self.set_font_weight)
        self.form.addRow(f_weight_lbl,self.f_weight_cb)

        f_style_lbl = QLabel("font-style: ")
        f_style_lbl.setObjectName("lbl")
        self.f_style_cb = QComboBox()
        self.f_style_cb.addItems(["normal","italic","oblique"])
        self.f_style_cb.currentIndexChanged.connect(self.set_font_style)
        self.form.addRow(f_style_lbl,self.f_style_cb)



        frm = QFrame()
        frm.setFrameShape(QFrame.HLine)
        self.form.addRow(frm)



        line_height_lbl = QLabel("line-height: ")
        self.line_height_edit = QLineEdit()
        self.line_height_edit.textChanged.connect(self.set_line_height)
        self.form.addRow(line_height_lbl,self.line_height_edit)



        ltr_spacing_hbox = QHBoxLayout()
        self.letter_spacing_spb = QSpinBox()
        self.letter_spacing_spb.valueChanged.connect(self.set_letter_spacing_v)
        self.letter_spacing_cb = QComboBox()
        self.letter_spacing_cb.addItems(["px","cm","mm","in","pt","pc"])
        self.letter_spacing_cb.currentIndexChanged.connect(self.set_letter_spacing_t)
        ltr_spacing_hbox.addWidget(self.letter_spacing_spb)
        ltr_spacing_hbox.addWidget(self.letter_spacing_cb)
        #self.form.addRow(QLabel("letter-spacing: "),ltr_spacing_hbox)


        self.text_align = QComboBox()
        self.text_align.addItems(["left","right","center","justify"])
        self.text_align.currentIndexChanged.connect(self.set_text_align)
        self.form.addRow(QLabel("text-align: "),self.text_align)


        self.text_decoration = QComboBox()
        self.text_decoration.addItems(["","underline","overline","line-through"])
        self.text_decoration.currentIndexChanged.connect(self.set_text_decoration)
        self.form.addRow(QLabel("text-decoration: "),self.text_decoration)


        self.text_transform = QComboBox()
        self.text_transform.addItems(["","capitalize","uppercase","lowercase"])
        self.text_transform.currentIndexChanged.connect(self.set_text_transform)
        self.form.addRow(QLabel("text-transform: "),self.text_transform)



        frm = QFrame()
        frm.setFrameShape(QFrame.HLine)
        self.form.addRow(frm)





        background_hbox = QHBoxLayout()
        self.background_normal_radio = QRadioButton("Normal")
        self.background_normal_radio.click()
        self.background_normal_radio.clicked.connect(self.bg_normal_radio_act)
        self.background_image_radio = QRadioButton("İmage")
        self.background_image_radio.clicked.connect(self.bg_image_radio_act)
        self.background_color_radio = QRadioButton("Color")
        self.background_color_radio.clicked.connect(self.bg_color_radio_act)
        background_hbox.addWidget(self.background_normal_radio)
        background_hbox.addWidget(self.background_image_radio)
        background_hbox.addWidget(self.background_color_radio)
        self.form.addRow(QLabel("Background: "),background_hbox)

        self.bg_lbl = QLabel("background: ")
        self.bg_lbl.setObjectName("lbl")
        self.bg_line = QLineEdit()
        self.bg_line.textChanged.connect(self.set_background)
        self.form.addRow(self.bg_lbl,self.bg_line)




        frm = QFrame()
        frm.setFrameShape(QFrame.HLine)
        self.form.addRow(frm)




        self.border = QLineEdit()
        self.border.textChanged.connect(self.set_border)
        self.form.addRow(QLabel("border: "),self.border)

        h_box_border = QHBoxLayout()
        self.border_width = QSpinBox()
        self.border_width.setMaximum(500)
        self.border_width.valueChanged.connect(self.set_border_width_v)
        self.border_width_cb = QComboBox()
        self.border_width_cb.addItems(["px","cm","mm","in","pt","pc"])
        self.border_width_cb.currentIndexChanged.connect(self.set_border_width_t)
        h_box_border.addWidget(self.border_width)
        h_box_border.addWidget(self.border_width_cb)
        brwh_lbl = QLabel("border-width:")
        brwh_lbl.setObjectName("lbl")
        self.form.addRow(brwh_lbl, h_box_border)

        self.border_style = QComboBox()
        self.border_style.addItems(["","none","solid","dashed","dotted","double","groove","ridge","inset","outset","hidden"])
        self.border_style.currentIndexChanged.connect(self.set_border_style)
        brse_lbl = QLabel("border-style:")
        brse_lbl.setObjectName("lbl")
        self.form.addRow(brse_lbl, self.border_style)

        self.border_color = QLineEdit()
        self.border_color.textChanged.connect(self.set_border_color)
        brcr_lbl = QLabel("border-color: ")
        brcr_lbl.setObjectName("lbl")
        self.form.addRow(brcr_lbl,self.border_color)


        frm = QFrame()
        frm.setFrameShape(QFrame.HLine)
        self.form.addRow(frm)


        self.border_top = QLineEdit()
        self.border_top.textChanged.connect(self.set_border_top)
        self.form.addRow(QLabel("border-top: "),self.border_top)

        self.border_right = QLineEdit()
        self.border_right.textChanged.connect(self.set_border_right)
        self.form.addRow(QLabel("border-right: "),self.border_right)

        self.border_bottom = QLineEdit()
        self.border_bottom.textChanged.connect(self.set_border_bottom)
        self.form.addRow(QLabel("border-bottom: "),self.border_bottom)

        self.border_left = QLineEdit()
        self.border_left.textChanged.connect(self.set_border_left)
        self.form.addRow(QLabel("border-left: "),self.border_left)



        frm = QFrame()
        frm.setFrameShape(QFrame.HLine)
        self.form.addRow(frm)

        self.border_radius = QLineEdit()
        self.border_radius.textChanged.connect(self.set_border_radius)
        self.form.addRow(QLabel("border-radius: "),self.border_radius)



        frm = QFrame()
        frm.setFrameShape(QFrame.HLine)
        self.form.addRow(frm)



        p_top_hbox = QHBoxLayout()
        padding_top_lbl = QLabel("padding-top: ")
        padding_top_lbl.setObjectName("lbl")
        self.padding_top_spb = QSpinBox()
        self.padding_top_cb = QComboBox()
        self.padding_top_cb.addItems(["px","cm","mm","in","pt","pc"])
        self.padding_top_spb.valueChanged.connect(self.set_padding_top_v)
        self.padding_top_cb.currentIndexChanged.connect(self.set_padding_top_t)
        p_top_hbox.addWidget(self.padding_top_spb)
        p_top_hbox.addWidget(self.padding_top_cb)
        self.form.addRow(padding_top_lbl,p_top_hbox)


        p_right_hbox = QHBoxLayout()
        padding_right_lbl = QLabel("padding-right: ")
        padding_right_lbl.setObjectName("lbl")
        self.padding_right_spb = QSpinBox()
        self.padding_right_cb = QComboBox()
        self.padding_right_cb.addItems(["px","cm","mm","in","pt","pc"])
        self.padding_right_spb.valueChanged.connect(self.set_padding_right_v)
        self.padding_right_cb.currentIndexChanged.connect(self.set_padding_right_t)
        p_right_hbox.addWidget(self.padding_right_spb)
        p_right_hbox.addWidget(self.padding_right_cb)
        self.form.addRow(padding_right_lbl,p_right_hbox)


        p_bottom_hbox = QHBoxLayout()
        padding_bottom_lbl = QLabel("padding-bottom: ")
        padding_bottom_lbl.setObjectName("lbl")
        self.padding_bottom_spb = QSpinBox()
        self.padding_bottom_cb = QComboBox()
        self.padding_bottom_cb.addItems(["px","cm","mm","in","pt","pc"])
        self.padding_bottom_spb.valueChanged.connect(self.set_padding_bottom_v)
        self.padding_bottom_cb.currentIndexChanged.connect(self.set_padding_bottom_t)
        p_bottom_hbox.addWidget(self.padding_bottom_spb)
        p_bottom_hbox.addWidget(self.padding_bottom_cb)
        self.form.addRow(padding_bottom_lbl,p_bottom_hbox)


        p_left_hbox = QHBoxLayout()
        padding_left_lbl = QLabel("padding-left: ")
        padding_left_lbl.setObjectName("lbl")
        self.padding_left_spb = QSpinBox()
        self.padding_left_cb = QComboBox()
        self.padding_left_cb.addItems(["px","cm","mm","in","pt","pc"])
        self.padding_left_spb.valueChanged.connect(self.set_padding_left_v)
        self.padding_left_cb.currentIndexChanged.connect(self.set_padding_left_t)
        p_left_hbox.addWidget(self.padding_left_spb)
        p_left_hbox.addWidget(self.padding_left_cb)
        self.form.addRow(padding_left_lbl,p_left_hbox)







        frm = QFrame()
        frm.setFrameShape(QFrame.HLine)
        self.form.addRow(frm)



        m_top_hbox = QHBoxLayout()
        margin_top_lbl = QLabel("margin-top: ")
        margin_top_lbl.setObjectName("lbl")
        self.margin_top_spb = QSpinBox()
        self.margin_top_cb = QComboBox()
        self.margin_top_cb.addItems(["px","cm","mm","in","pt","pc"])
        self.margin_top_spb.valueChanged.connect(self.set_margin_top_v)
        self.margin_top_cb.currentIndexChanged.connect(self.set_margin_top_t)
        m_top_hbox.addWidget(self.margin_top_spb)
        m_top_hbox.addWidget(self.margin_top_cb)
        self.form.addRow(margin_top_lbl,m_top_hbox)


        m_right_hbox = QHBoxLayout()
        margin_right_lbl = QLabel("margin-right: ")
        margin_right_lbl.setObjectName("lbl")
        self.margin_right_spb = QSpinBox()
        self.margin_right_cb = QComboBox()
        self.margin_right_cb.addItems(["px","cm","mm","in","pt","pc"])
        self.margin_right_spb.valueChanged.connect(self.set_margin_right_v)
        self.margin_right_cb.currentIndexChanged.connect(self.set_margin_right_t)
        m_right_hbox.addWidget(self.margin_right_spb)
        m_right_hbox.addWidget(self.margin_right_cb)
        self.form.addRow(margin_right_lbl,m_right_hbox)


        m_bottom_hbox = QHBoxLayout()
        margin_bottom_lbl = QLabel("margin-bottom: ")
        margin_bottom_lbl.setObjectName("lbl")
        self.margin_bottom_spb = QSpinBox()
        self.margin_bottom_cb = QComboBox()
        self.margin_bottom_cb.addItems(["px","cm","mm","in","pt","pc"])
        self.margin_bottom_spb.valueChanged.connect(self.set_margin_bottom_v)
        self.margin_bottom_cb.currentIndexChanged.connect(self.set_margin_bottom_t)
        m_bottom_hbox.addWidget(self.margin_bottom_spb)
        m_bottom_hbox.addWidget(self.margin_bottom_cb)
        self.form.addRow(margin_bottom_lbl,m_bottom_hbox)


        m_left_hbox = QHBoxLayout()
        margin_left_lbl = QLabel("margin-left: ")
        margin_left_lbl.setObjectName("lbl")
        self.margin_left_spb = QSpinBox()
        self.margin_left_cb = QComboBox()
        self.margin_left_cb.addItems(["px","cm","mm","in","pt","pc"])
        self.margin_left_spb.valueChanged.connect(self.set_margin_left_v)
        self.margin_left_cb.currentIndexChanged.connect(self.set_margin_left_t)
        m_left_hbox.addWidget(self.margin_left_spb)
        m_left_hbox.addWidget(self.margin_left_cb)
        self.form.addRow(margin_left_lbl,m_left_hbox)



        frm = QFrame()
        frm.setFrameShape(QFrame.HLine)
        self.form.addRow(frm)

    def bg_normal_radio_act(self):
        self.bg_lbl.setText("background: ")
        self.combo_1_func()

    def bg_image_radio_act(self):
        self.bg_lbl.setText("background-image: ")
        self.combo_1_func()

    def bg_color_radio_act(self):
        self.bg_lbl.setText("background-color: ")
        self.combo_1_func()




    def set_color(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["color"] = self.color.text()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["color"] = self.color.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["color"] = self.color.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["color"] = self.color.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["color"] = self.color.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["color"] = self.color.text()

        elif self.cb.currentText() == ":on":
            self.data.on["color"] = self.color.text()

        elif self.cb.currentText() == "::title":
            self.data.title["color"] = self.color.text()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["color"] = self.color.text()

        elif self.cb.currentText() == "::checked":
            self.data.checked["color"] = self.color.text()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["color"] = self.color.text()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["color"] = self.color.text()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["color"] = self.color.text()

        elif self.cb.currentText() == ":editable":
            self.data.editable["color"] = self.color.text()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["color"] = self.color.text()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["color"] = self.color.text()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["color"] = self.color.text()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["color"] = self.color.text()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["color"] = self.color.text()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["color"] = self.color.text()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["color"] = self.color.text()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["color"] = self.color.text()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["color"] = self.color.text()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["color"] = self.color.text()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["color"] = self.color.text()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["color"] = self.color.text()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["color"] = self.color.text()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["color"] = self.color.text()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["color"] = self.color.text()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["color"] = self.color.text()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["color"] = self.color.text()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["color"] = self.color.text()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["color"] = self.color.text()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["color"] = self.color.text()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["color"] = self.color.text()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["color"] = self.color.text()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["color"] = self.color.text()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["color"] = self.color.text()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["color"] = self.color.text()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["color"] = self.color.text()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["color"] = self.color.text()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["color"] = self.color.text()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["color"] = self.color.text()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["color"] = self.color.text()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["color"] = self.color.text()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["color"] = self.color.text()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["color"] = self.color.text()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["color"] = self.color.text()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["color"] = self.color.text()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["color"] = self.color.text()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["color"] = self.color.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["color"] = self.color.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["color"] = self.color.text()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["color"] = self.color.text()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["color"] = self.color.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["color"] = self.color.text()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["color"] = self.color.text()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["color"] = self.color.text()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["color"] = self.color.text()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["color"] = self.color.text()

        elif self.cb.currentText() == "::pane":
            self.data.pane["color"] = self.color.text()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["color"] = self.color.text()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["color"] = self.color.text()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["color"] = self.color.text()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["color"] = self.color.text()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["color"] = self.color.text()

        elif self.cb.currentText() == "::tab":
            self.data.tab["color"] = self.color.text()

        elif self.cb.currentText() == "::tear":
            self.data.tear["color"] = self.color.text()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["color"] = self.color.text()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["color"] = self.color.text()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["color"] = self.color.text()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["color"] = self.color.text()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["color"] = self.color.text()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["color"] = self.color.text()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["color"] = self.color.text()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["color"] = self.color.text()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["color"] = self.color.text()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["color"] = self.color.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["color"] = self.color.text()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["color"] = self.color.text()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["color"] = self.color.text()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["color"] = self.color.text()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["color"] = self.color.text()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["color"] = self.color.text()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["color"] = self.color.text()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["color"] = self.color.text()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["color"] = self.color.text()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["color"] = self.color.text()

        self.code.ReCode()

    def set_image(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["image"] = self.image.text()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["image"] = self.image.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["image"] = self.image.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["image"] = self.image.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["image"] = self.image.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["image"] = self.image.text()

        elif self.cb.currentText() == ":on":
            self.data.on["image"] = self.image.text()

        elif self.cb.currentText() == "::title":
            self.data.title["image"] = self.image.text()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["image"] = self.image.text()

        elif self.cb.currentText() == "::checked":
            self.data.checked["image"] = self.image.text()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["image"] = self.image.text()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["image"] = self.image.text()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["image"] = self.image.text()

        elif self.cb.currentText() == ":editable":
            self.data.editable["image"] = self.image.text()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["image"] = self.image.text()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["image"] = self.image.text()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["image"] = self.image.text()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["image"] = self.image.text()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["image"] = self.image.text()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["image"] = self.image.text()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["image"] = self.image.text()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["image"] = self.image.text()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["image"] = self.image.text()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["image"] = self.image.text()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["image"] = self.image.text()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["image"] = self.image.text()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["image"] = self.image.text()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["image"] = self.image.text()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["image"] = self.image.text()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["image"] = self.image.text()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["image"] = self.image.text()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["image"] = self.image.text()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["image"] = self.image.text()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["image"] = self.image.text()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["image"] = self.image.text()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["image"] = self.image.text()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["image"] = self.image.text()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["image"] = self.image.text()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["image"] = self.image.text()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["image"] = self.image.text()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["image"] = self.image.text()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["image"] = self.image.text()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["image"] = self.image.text()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["image"] = self.image.text()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["image"] = self.image.text()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["image"] = self.image.text()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["image"] = self.image.text()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["image"] = self.image.text()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["image"] = self.image.text()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["image"] = self.image.text()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["image"] = self.image.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["image"] = self.image.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["image"] = self.image.text()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["image"] = self.image.text()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["image"] = self.image.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["image"] = self.image.text()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["image"] = self.image.text()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["image"] = self.image.text()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["image"] = self.image.text()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["image"] = self.image.text()

        elif self.cb.currentText() == "::pane":
            self.data.pane["image"] = self.image.text()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["image"] = self.image.text()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["image"] = self.image.text()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["image"] = self.image.text()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["image"] = self.image.text()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["image"] = self.image.text()

        elif self.cb.currentText() == "::tab":
            self.data.tab["image"] = self.image.text()

        elif self.cb.currentText() == "::tear":
            self.data.tear["image"] = self.image.text()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["image"] = self.image.text()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["image"] = self.image.text()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["image"] = self.image.text()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["image"] = self.image.text()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["image"] = self.image.text()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["image"] = self.image.text()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["image"] = self.image.text()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["image"] = self.image.text()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["image"] = self.image.text()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["image"] = self.image.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["image"] = self.image.text()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["image"] = self.image.text()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["image"] = self.image.text()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["image"] = self.image.text()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["image"] = self.image.text()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["image"] = self.image.text()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["image"] = self.image.text()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["image"] = self.image.text()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["image"] = self.image.text()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["image"] = self.image.text()

        self.code.ReCode()


    def set_outline(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["outline"] = self.outline.text()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["outline"] = self.outline.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["outline"] = self.outline.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["outline"] = self.outline.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["outline"] = self.outline.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["outline"] = self.outline.text()

        elif self.cb.currentText() == ":on":
            self.data.on["outline"] = self.outline.text()

        elif self.cb.currentText() == "::title":
            self.data.title["outline"] = self.outline.text()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["outline"] = self.outline.text()

        elif self.cb.currentText() == "::checked":
            self.data.checked["outline"] = self.outline.text()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["outline"] = self.outline.text()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["outline"] = self.outline.text()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["outline"] = self.outline.text()

        elif self.cb.currentText() == ":editable":
            self.data.editable["outline"] = self.outline.text()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["outline"] = self.outline.text()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["outline"] = self.outline.text()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["outline"] = self.outline.text()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["outline"] = self.outline.text()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["outline"] = self.outline.text()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["outline"] = self.outline.text()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["outline"] = self.outline.text()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["outline"] = self.outline.text()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["outline"] = self.outline.text()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["outline"] = self.outline.text()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["outline"] = self.outline.text()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["outline"] = self.outline.text()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["outline"] = self.outline.text()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["outline"] = self.outline.text()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["outline"] = self.outline.text()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["outline"] = self.outline.text()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["outline"] = self.outline.text()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["outline"] = self.outline.text()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["outline"] = self.outline.text()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["outline"] = self.outline.text()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["outline"] = self.outline.text()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["outline"] = self.outline.text()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["outline"] = self.outline.text()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["outline"] = self.outline.text()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["outline"] = self.outline.text()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["outline"] = self.outline.text()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["outline"] = self.outline.text()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["outline"] = self.outline.text()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["outline"] = self.outline.text()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["outline"] = self.outline.text()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["outline"] = self.outline.text()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["outline"] = self.outline.text()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["outline"] = self.outline.text()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["outline"] = self.outline.text()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["outline"] = self.outline.text()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["outline"] = self.outline.text()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["outline"] = self.outline.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["outline"] = self.outline.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["outline"] = self.outline.text()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["outline"] = self.outline.text()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["outline"] = self.outline.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["outline"] = self.outline.text()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["outline"] = self.outline.text()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["outline"] = self.outline.text()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["outline"] = self.outline.text()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["outline"] = self.outline.text()

        elif self.cb.currentText() == "::pane":
            self.data.pane["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab":
            self.data.tab["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tear":
            self.data.tear["outline"] = self.outline.text()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["outline"] = self.outline.text()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["outline"] = self.outline.text()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["outline"] = self.outline.text()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["outline"] = self.outline.text()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["outline"] = self.outline.text()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["outline"] = self.outline.text()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["outline"] = self.outline.text()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["outline"] = self.outline.text()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["outline"] = self.outline.text()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["outline"] = self.outline.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["outline"] = self.outline.text()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["outline"] = self.outline.text()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["outline"] = self.outline.text()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["outline"] = self.outline.text()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["outline"] = self.outline.text()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["outline"] = self.outline.text()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["outline"] = self.outline.text()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["outline"] = self.outline.text()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["outline"] = self.outline.text()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["outline"] = self.outline.text()

        self.code.ReCode()

    def set_width_v(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["width_value"] = self.width_spin.value()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == ":on":
            self.data.on["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::title":
            self.data.title["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::checked":
            self.data.checked["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == ":editable":
            self.data.editable["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::pane":
            self.data.pane["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab":
            self.data.tab["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tear":
            self.data.tear["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["width_value"] = self.width_spin.value()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["width_value"] = self.width_spin.value()

        self.code.ReCode()

    def set_width_t(self):
            if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
                self.data.wme["width_type"] = self.width_cb.currentText()


            elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
                self.data.bme["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
                self.data.bme["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
                self.data.me["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
                self.data.bhover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
                self.data.hover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == ":on":
                self.data.on["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::title":
                self.data.title["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::pressed":
                self.data.pressed["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::checked":
                self.data.checked["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::unchecked":
                self.data.unchecked["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator":
                self.data.indicator["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator:checked":
                self.data.indicator_checked["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator:checked:hover":
                self.data.indicator_checked_hover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator:checked:pressed":
                self.data.indicator_checked_pressed["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator:unchecked":
                self.data.indicator_unchecked["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator:unchecked:hover":
                self.data.indicator_unchecked_hover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator:unchecked:pressed":
                self.data.indicator_unchecked_pressed["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::checked:hover":
                self.data.checked_hover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::unchecked:hover":
                self.data.unchecked_hover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator:indeterminate:hover":
                self.data.indicator_indeterminate_hover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator:indeterminate:pressed":
                self.data.indicator_indeterminate_pressed["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == ":editable":
                self.data.editable["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == ":!editable":
                self.data.u_editable["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == ":!editable:on":
                self.data.u_editable_on["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::drop-down":
                self.data.drop_down["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::drop-arrow":
                self.data.drop_arrow["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::drop-arrow:on":
                self.data.drop_arrow_on["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::drop-down:editable":
                self.data.drop_down_editable["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::drop-down:editable:on":
                self.data.drop_down_editable_on["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::up-button":
                self.data.up_button["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::up-button:hover":
                self.data.up_button_hover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::up-button:pressed":
                self.data.up_button_pressed["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::up-arrow":
                self.data.up_arrow["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::up-arrow:disabled":
                self.data.up_arrow_disabled["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::up-arrow:off":
                self.data.up_arrow_off["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::down-button":
                self.data.down_button["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::down-button:hover":
                self.data.down_button_hover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::down-button:pressed":
                self.data.down_button_pressed["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::down-arrow":
                self.data.down_arrow["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::down-arrow:disabled":
                self.data.down_arrow_disabled["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::down-arrow:off":
                self.data.down_arrow_off["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == ":vertical":
                self.data.vertical["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::groove:vertical":
                self.data.groove_vertical["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::handle:vertical":
                self.data.handle_vertical["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::handle:vertical:hover":
                self.data.handle_vertical_hover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::handle:vertical:disabled":
                self.data.handle_vertical_disabled["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::add-page:vertical":
                self.data.add_page_vertical["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::add-page:vertical:disabled":
                self.data.add_page_vertical_disabled["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::sub-page:vertical":
                self.data.sub_page_vertical["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::sub-page:vertical:disabled":
                self.data.sub_page_vertical_disabled["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == ":horizontal":
                self.data.horizontal["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::groove:horizontal":
                self.data.groove_horizontal["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::handle:horizontal":
                self.data.handle_horizontal["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::handle:horizontal:hover":
                self.data.handle_horizontal_hover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::handle:horizontal:disabled":
                self.data.handle_horizontal_disabled["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::add-page:horizontal":
                self.data.add_page_horizontal["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::add-page:horizontal:disabled":
                self.data.add_page_horizontal_disabled["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::sub-page:horizontal":
                self.data.sub_page_horizontal["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::sub-page:horizontal:disabled":
                self.data.sub_page_horizontal_disabled["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
                self.data.bitem["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
                self.data.item["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::item:hover":
                self.data.item_hover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::item:alternate":
                self.data.item_alternate["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
                self.data.bitem_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
                self.data.item_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::item:pressed":
                self.data.item_pressed["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::item:selected:active":
                self.data.item_selected_active["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::item:selected:!active":
                self.data.item_selected_u_active["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::chunk":
                self.data.chunk["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::chunk:hover":
                self.data.chunk_hover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::pane":
                self.data.pane["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab-bar":
                self.data.tab_bar["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab-bar:top":
                self.data.tab_bar_top["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab-bar:right":
                self.data.tab_bar_right["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab-bar:bottom":
                self.data.tab_bar_bottom["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab-bar:left":
                self.data.tab_bar_left["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab":
                self.data.tab["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tear":
                self.data.tear["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::scroller":
                self.data.scroller["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:hover":
                self.data.tab_hover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:selected":
                self.data.tab_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:!selected":
                self.data.tab_u_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:!selected:hover":
                self.data.tab_u_selected_hover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:first:selected":
                self.data.tab_first_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:last:selected":
                self.data.tab_last_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:top":
                self.data.tab_top["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:top:selected":
                self.data.tab_top_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:top:!selected":
                self.data.tab_top_u_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:right":
                self.data.tab_right["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:right:selected":
                self.data.tab_right_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:right:!selected":
                self.data.tab_right_u_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:bottom":
                self.data.tab_bottom["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:bottom:selected":
                self.data.tab_bottom_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:bottom:!selected":
                self.data.tab_bottom_u_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:left":
                self.data.tab_left["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:left:selected":
                self.data.tab_left_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:left:!selected":
                self.data.tab_left_u_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::close-button":
                self.data.close_button["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::close-button:hover":
                self.data.close_button_hover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::close-button:pressed":
                self.data.close_button_pressed["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "QToolButton":
                self.data.qtoolbutton["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "QToolButton::right-arrow":
                self.data.qtoolbutton_right_arrow["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "QToolButton::left-arrow":
                self.data.qtoolbutton_left_arrow["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::float-button":
                self.data.float_button["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::float-button:hover":
                self.data.float_button_hover["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::float-button:pressed":
                self.data.float_button_pressed["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::seperator":
                self.data.seperator["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator:exclusive:checked":
                self.data.indicator_exclusive_checked["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
                self.data.indicator_exclusive_checked_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator:exclusive:unchecked":
                self.data.indicator_exclusive_unchecked["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
                self.data.indicator_exclusive_unchecked_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator:non-exclusive:checked":
                self.data.indicator_non_exclusive_checked["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
                self.data.indicator_non_exclusive_checked_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
                self.data.indicator_non_exclusive_unchecked["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
                self.data.indicator_non_exclusive_unchecked_selected["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::add-line:vertical":
                self.data.add_line_vertical["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::sub-line:vertical":
                self.data.sub_line_vertical["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::up-arrow:vertical":
                self.data.up_arrow_vertical["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::down-arrow:vertical":
                self.data.down_arrow_vertical["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::add-line:horizontal":
                self.data.add_line_horizontal["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::sub-line:horizontal":
                self.data.sub_line_horizontal["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::left-arrow:horizontal":
                self.data.left_arrow_horizontal["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::right-arrow:horizontal":
                self.data.right_arrow_horizontal["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:first":
                self.data.tab_first["width_type"] = self.width_cb.currentText()

            elif self.cb.currentText() == "::tab:last":
                self.data.tab_last["width_type"] = self.width_cb.currentText()

            self.code.ReCode()

    def set_height_v(self):

        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["height_value"] = self.height_spin.value()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == ":on":
            self.data.on["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::title":
            self.data.title["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::checked":
            self.data.checked["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == ":editable":
            self.data.editable["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::pane":
            self.data.pane["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab":
            self.data.tab["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tear":
            self.data.tear["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["height_value"] = self.height_spin.value()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["height_value"] = self.height_spin.value()

        self.code.ReCode()

    def set_height_t(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["height_type"] = self.height_cb.currentText()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == ":on":
            self.data.on["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::title":
            self.data.title["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::checked":
            self.data.checked["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == ":editable":
            self.data.editable["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::pane":
            self.data.pane["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab":
            self.data.tab["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tear":
            self.data.tear["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["height_type"] = self.height_cb.currentText()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["height_type"] = self.height_cb.currentText()

        self.code.ReCode()

    def set_font_family(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["font_family"] = self.f_family_edit.text()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == ":on":
            self.data.on["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::title":
            self.data.title["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::checked":
            self.data.checked["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == ":editable":
            self.data.editable["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::pane":
            self.data.pane["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab":
            self.data.tab["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tear":
            self.data.tear["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["font_family"] = self.f_family_edit.text()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["font_family"] = self.f_family_edit.text()

        self.code.ReCode()


    def set_font_size(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == ":on":
            self.data.on["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::title":
            self.data.title["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::checked":
            self.data.checked["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == ":editable":
            self.data.editable["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::pane":
            self.data.pane["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab":
            self.data.tab["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tear":
            self.data.tear["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["font_size"] = self.f_size_spin.text()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["font_size"] = self.f_size_spin.text()

        self.code.ReCode()


    def set_font_weight(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["font_weight"] = self.f_weight_cb.currentText()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == ":on":
            self.data.on["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::title":
            self.data.title["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::checked":
            self.data.checked["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == ":editable":
            self.data.editable["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::pane":
            self.data.pane["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab":
            self.data.tab["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tear":
            self.data.tear["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["font_weight"] = self.f_weight_cb.currentText()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["font_weight"] = self.f_weight_cb.currentText()

        self.code.ReCode()


    def set_font_style(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["font_style"] = self.f_style_cb.currentText()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == ":on":
            self.data.on["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::title":
            self.data.title["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::checked":
            self.data.checked["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == ":editable":
            self.data.editable["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::pane":
            self.data.pane["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab":
            self.data.tab["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tear":
            self.data.tear["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["font_style"] = self.f_style_cb.currentText()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["font_style"] = self.f_style_cb.currentText()

        self.code.ReCode()


    def set_line_height(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["line_height"] = self.line_height_edit.text()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == ":on":
            self.data.on["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::title":
            self.data.title["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::checked":
            self.data.checked["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == ":editable":
            self.data.editable["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::pane":
            self.data.pane["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab":
            self.data.tab["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tear":
            self.data.tear["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["line_height"] = self.line_height_edit.text()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["line_height"] = self.line_height_edit.text()

        self.code.ReCode()


    def set_letter_spacing_v(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["letter_spacing_value"] = self.letter_spacing_spb.value()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == ":on":
            self.data.on["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::title":
            self.data.title["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::checked":
            self.data.checked["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == ":editable":
            self.data.editable["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::pane":
            self.data.pane["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab":
            self.data.tab["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tear":
            self.data.tear["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["letter_spacing_value"] = self.letter_spacing_spb.value()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["letter_spacing_value"] = self.letter_spacing_spb.value()

        self.code.ReCode()

    def set_letter_spacing_t(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["letter_spacing_type"] = self.letter_spacing_cb.currentText()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == ":on":
            self.data.on["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::title":
            self.data.title["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::checked":
            self.data.checked["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == ":editable":
            self.data.editable["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::pane":
            self.data.pane["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab":
            self.data.tab["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tear":
            self.data.tear["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["letter_spacing_type"] = self.letter_spacing_cb.currentText()

        self.code.ReCode()

    def set_text_align(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["text_align"] = self.text_align.currentText()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == ":on":
            self.data.on["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::title":
            self.data.title["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::checked":
            self.data.checked["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == ":editable":
            self.data.editable["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::pane":
            self.data.pane["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab":
            self.data.tab["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tear":
            self.data.tear["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["text_align"] = self.text_align.currentText()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["text_align"] = self.text_align.currentText()

        self.code.ReCode()

    def set_text_decoration(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["text_decoration"] = self.text_decoration.currentText()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == ":on":
            self.data.on["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::title":
            self.data.title["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::checked":
            self.data.checked["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == ":editable":
            self.data.editable["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::pane":
            self.data.pane["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab":
            self.data.tab["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tear":
            self.data.tear["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["text_decoration"] = self.text_decoration.currentText()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["text_decoration"] = self.text_decoration.currentText()

        self.code.ReCode()

    def set_text_transform(self):
            if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
                self.data.wme["text_transform"] = self.text_transform.currentText()


            elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
                self.data.bme["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
                self.data.bme["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
                self.data.me["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
                self.data.bhover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
                self.data.hover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == ":on":
                self.data.on["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::title":
                self.data.title["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::pressed":
                self.data.pressed["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::checked":
                self.data.checked["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::unchecked":
                self.data.unchecked["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator":
                self.data.indicator["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator:checked":
                self.data.indicator_checked["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator:checked:hover":
                self.data.indicator_checked_hover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator:checked:pressed":
                self.data.indicator_checked_pressed["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator:unchecked":
                self.data.indicator_unchecked["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator:unchecked:hover":
                self.data.indicator_unchecked_hover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator:unchecked:pressed":
                self.data.indicator_unchecked_pressed["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::checked:hover":
                self.data.checked_hover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::unchecked:hover":
                self.data.unchecked_hover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator:indeterminate:hover":
                self.data.indicator_indeterminate_hover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator:indeterminate:pressed":
                self.data.indicator_indeterminate_pressed["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == ":editable":
                self.data.editable["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == ":!editable":
                self.data.u_editable["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == ":!editable:on":
                self.data.u_editable_on["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::drop-down":
                self.data.drop_down["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::drop-arrow":
                self.data.drop_arrow["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::drop-arrow:on":
                self.data.drop_arrow_on["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::drop-down:editable":
                self.data.drop_down_editable["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::drop-down:editable:on":
                self.data.drop_down_editable_on["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::up-button":
                self.data.up_button["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::up-button:hover":
                self.data.up_button_hover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::up-button:pressed":
                self.data.up_button_pressed["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::up-arrow":
                self.data.up_arrow["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::up-arrow:disabled":
                self.data.up_arrow_disabled["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::up-arrow:off":
                self.data.up_arrow_off["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::down-button":
                self.data.down_button["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::down-button:hover":
                self.data.down_button_hover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::down-button:pressed":
                self.data.down_button_pressed["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::down-arrow":
                self.data.down_arrow["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::down-arrow:disabled":
                self.data.down_arrow_disabled["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::down-arrow:off":
                self.data.down_arrow_off["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == ":vertical":
                self.data.vertical["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::groove:vertical":
                self.data.groove_vertical["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::handle:vertical":
                self.data.handle_vertical["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::handle:vertical:hover":
                self.data.handle_vertical_hover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::handle:vertical:disabled":
                self.data.handle_vertical_disabled["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::add-page:vertical":
                self.data.add_page_vertical["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::add-page:vertical:disabled":
                self.data.add_page_vertical_disabled["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::sub-page:vertical":
                self.data.sub_page_vertical["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::sub-page:vertical:disabled":
                self.data.sub_page_vertical_disabled["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == ":horizontal":
                self.data.horizontal["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::groove:horizontal":
                self.data.groove_horizontal["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::handle:horizontal":
                self.data.handle_horizontal["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::handle:horizontal:hover":
                self.data.handle_horizontal_hover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::handle:horizontal:disabled":
                self.data.handle_horizontal_disabled["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::add-page:horizontal":
                self.data.add_page_horizontal["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::add-page:horizontal:disabled":
                self.data.add_page_horizontal_disabled["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::sub-page:horizontal":
                self.data.sub_page_horizontal["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::sub-page:horizontal:disabled":
                self.data.sub_page_horizontal_disabled["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
                self.data.bitem["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
                self.data.item["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::item:hover":
                self.data.item_hover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::item:alternate":
                self.data.item_alternate["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
                self.data.bitem_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
                self.data.item_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::item:pressed":
                self.data.item_pressed["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::item:selected:active":
                self.data.item_selected_active["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::item:selected:!active":
                self.data.item_selected_u_active["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::chunk":
                self.data.chunk["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::chunk:hover":
                self.data.chunk_hover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::pane":
                self.data.pane["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab-bar":
                self.data.tab_bar["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab-bar:top":
                self.data.tab_bar_top["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab-bar:right":
                self.data.tab_bar_right["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab-bar:bottom":
                self.data.tab_bar_bottom["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab-bar:left":
                self.data.tab_bar_left["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab":
                self.data.tab["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tear":
                self.data.tear["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::scroller":
                self.data.scroller["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:hover":
                self.data.tab_hover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:selected":
                self.data.tab_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:!selected":
                self.data.tab_u_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:!selected:hover":
                self.data.tab_u_selected_hover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:first:selected":
                self.data.tab_first_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:last:selected":
                self.data.tab_last_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:top":
                self.data.tab_top["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:top:selected":
                self.data.tab_top_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:top:!selected":
                self.data.tab_top_u_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:right":
                self.data.tab_right["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:right:selected":
                self.data.tab_right_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:right:!selected":
                self.data.tab_right_u_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:bottom":
                self.data.tab_bottom["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:bottom:selected":
                self.data.tab_bottom_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:bottom:!selected":
                self.data.tab_bottom_u_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:left":
                self.data.tab_left["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:left:selected":
                self.data.tab_left_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:left:!selected":
                self.data.tab_left_u_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::close-button":
                self.data.close_button["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::close-button:hover":
                self.data.close_button_hover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::close-button:pressed":
                self.data.close_button_pressed["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "QToolButton":
                self.data.qtoolbutton["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "QToolButton::right-arrow":
                self.data.qtoolbutton_right_arrow["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "QToolButton::left-arrow":
                self.data.qtoolbutton_left_arrow["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::float-button":
                self.data.float_button["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::float-button:hover":
                self.data.float_button_hover["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::float-button:pressed":
                self.data.float_button_pressed["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::seperator":
                self.data.seperator["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator:exclusive:checked":
                self.data.indicator_exclusive_checked["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
                self.data.indicator_exclusive_checked_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator:exclusive:unchecked":
                self.data.indicator_exclusive_unchecked["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
                self.data.indicator_exclusive_unchecked_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator:non-exclusive:checked":
                self.data.indicator_non_exclusive_checked["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
                self.data.indicator_non_exclusive_checked_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
                self.data.indicator_non_exclusive_unchecked["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
                self.data.indicator_non_exclusive_unchecked_selected["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::add-line:vertical":
                self.data.add_line_vertical["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::sub-line:vertical":
                self.data.sub_line_vertical["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::up-arrow:vertical":
                self.data.up_arrow_vertical["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::down-arrow:vertical":
                self.data.down_arrow_vertical["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::add-line:horizontal":
                self.data.add_line_horizontal["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::sub-line:horizontal":
                self.data.sub_line_horizontal["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::left-arrow:horizontal":
                self.data.left_arrow_horizontal["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::right-arrow:horizontal":
                self.data.right_arrow_horizontal["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:first":
                self.data.tab_first["text_transform"] = self.text_transform.currentText()

            elif self.cb.currentText() == "::tab:last":
                self.data.tab_last["text_transform"] = self.text_transform.currentText()

            self.code.ReCode()

    def set_background(self):
        if self.bg_lbl.text() == "background: ":
            if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
                self.data.wme["background"] = self.bg_line.text()


            elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
                self.data.bme["background"] = self.bg_line.text()

            elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
                self.data.bme["background"] = self.bg_line.text()

            elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
                self.data.me["background"] = self.bg_line.text()

            elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
                self.data.bhover["background"] = self.bg_line.text()

            elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
                self.data.hover["background"] = self.bg_line.text()

            elif self.cb.currentText() == ":on":
                self.data.on["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::title":
                self.data.title["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::pressed":
                self.data.pressed["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::checked":
                self.data.checked["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::unchecked":
                self.data.unchecked["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator":
                self.data.indicator["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:checked":
                self.data.indicator_checked["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:checked:hover":
                self.data.indicator_checked_hover["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:checked:pressed":
                self.data.indicator_checked_pressed["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:unchecked":
                self.data.indicator_unchecked["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:unchecked:hover":
                self.data.indicator_unchecked_hover["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:unchecked:pressed":
                self.data.indicator_unchecked_pressed["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::checked:hover":
                self.data.checked_hover["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::unchecked:hover":
                self.data.unchecked_hover["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:indeterminate:hover":
                self.data.indicator_indeterminate_hover["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:indeterminate:pressed":
                self.data.indicator_indeterminate_pressed["background"] = self.bg_line.text()

            elif self.cb.currentText() == ":editable":
                self.data.editable["background"] = self.bg_line.text()

            elif self.cb.currentText() == ":!editable":
                self.data.u_editable["background"] = self.bg_line.text()

            elif self.cb.currentText() == ":!editable:on":
                self.data.u_editable_on["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::drop-down":
                self.data.drop_down["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::drop-arrow":
                self.data.drop_arrow["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::drop-arrow:on":
                self.data.drop_arrow_on["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::drop-down:editable":
                self.data.drop_down_editable["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::drop-down:editable:on":
                self.data.drop_down_editable_on["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-button":
                self.data.up_button["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-button:hover":
                self.data.up_button_hover["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-button:pressed":
                self.data.up_button_pressed["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-arrow":
                self.data.up_arrow["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-arrow:disabled":
                self.data.up_arrow_disabled["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-arrow:off":
                self.data.up_arrow_off["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-button":
                self.data.down_button["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-button:hover":
                self.data.down_button_hover["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-button:pressed":
                self.data.down_button_pressed["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-arrow":
                self.data.down_arrow["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-arrow:disabled":
                self.data.down_arrow_disabled["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-arrow:off":
                self.data.down_arrow_off["background"] = self.bg_line.text()

            elif self.cb.currentText() == ":vertical":
                self.data.vertical["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::groove:vertical":
                self.data.groove_vertical["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:vertical":
                self.data.handle_vertical["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:vertical:hover":
                self.data.handle_vertical_hover["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:vertical:disabled":
                self.data.handle_vertical_disabled["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-page:vertical":
                self.data.add_page_vertical["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-page:vertical:disabled":
                self.data.add_page_vertical_disabled["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-page:vertical":
                self.data.sub_page_vertical["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-page:vertical:disabled":
                self.data.sub_page_vertical_disabled["background"] = self.bg_line.text()

            elif self.cb.currentText() == ":horizontal":
                self.data.horizontal["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::groove:horizontal":
                self.data.groove_horizontal["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:horizontal":
                self.data.handle_horizontal["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:horizontal:hover":
                self.data.handle_horizontal_hover["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:horizontal:disabled":
                self.data.handle_horizontal_disabled["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-page:horizontal":
                self.data.add_page_horizontal["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-page:horizontal:disabled":
                self.data.add_page_horizontal_disabled["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-page:horizontal":
                self.data.sub_page_horizontal["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-page:horizontal:disabled":
                self.data.sub_page_horizontal_disabled["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
                self.data.bitem["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
                self.data.item["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:hover":
                self.data.item_hover["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:alternate":
                self.data.item_alternate["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
                self.data.bitem_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
                self.data.item_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:pressed":
                self.data.item_pressed["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:selected:active":
                self.data.item_selected_active["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:selected:!active":
                self.data.item_selected_u_active["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::chunk":
                self.data.chunk["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::chunk:hover":
                self.data.chunk_hover["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::pane":
                self.data.pane["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab-bar":
                self.data.tab_bar["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab-bar:top":
                self.data.tab_bar_top["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab-bar:right":
                self.data.tab_bar_right["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab-bar:bottom":
                self.data.tab_bar_bottom["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab-bar:left":
                self.data.tab_bar_left["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab":
                self.data.tab["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tear":
                self.data.tear["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::scroller":
                self.data.scroller["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:hover":
                self.data.tab_hover["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:selected":
                self.data.tab_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:!selected":
                self.data.tab_u_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:!selected:hover":
                self.data.tab_u_selected_hover["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:first:selected":
                self.data.tab_first_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:last:selected":
                self.data.tab_last_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:top":
                self.data.tab_top["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:top:selected":
                self.data.tab_top_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:top:!selected":
                self.data.tab_top_u_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:right":
                self.data.tab_right["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:right:selected":
                self.data.tab_right_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:right:!selected":
                self.data.tab_right_u_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:bottom":
                self.data.tab_bottom["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:bottom:selected":
                self.data.tab_bottom_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:bottom:!selected":
                self.data.tab_bottom_u_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:left":
                self.data.tab_left["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:left:selected":
                self.data.tab_left_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:left:!selected":
                self.data.tab_left_u_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::close-button":
                self.data.close_button["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::close-button:hover":
                self.data.close_button_hover["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::close-button:pressed":
                self.data.close_button_pressed["background"] = self.bg_line.text()

            elif self.cb.currentText() == "QToolButton":
                self.data.qtoolbutton["background"] = self.bg_line.text()

            elif self.cb.currentText() == "QToolButton::right-arrow":
                self.data.qtoolbutton_right_arrow["background"] = self.bg_line.text()

            elif self.cb.currentText() == "QToolButton::left-arrow":
                self.data.qtoolbutton_left_arrow["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::float-button":
                self.data.float_button["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::float-button:hover":
                self.data.float_button_hover["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::float-button:pressed":
                self.data.float_button_pressed["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::seperator":
                self.data.seperator["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:exclusive:checked":
                self.data.indicator_exclusive_checked["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
                self.data.indicator_exclusive_checked_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:exclusive:unchecked":
                self.data.indicator_exclusive_unchecked["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
                self.data.indicator_exclusive_unchecked_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:non-exclusive:checked":
                self.data.indicator_non_exclusive_checked["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
                self.data.indicator_non_exclusive_checked_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
                self.data.indicator_non_exclusive_unchecked["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
                self.data.indicator_non_exclusive_unchecked_selected["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-line:vertical":
                self.data.add_line_vertical["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-line:vertical":
                self.data.sub_line_vertical["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-arrow:vertical":
                self.data.up_arrow_vertical["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-arrow:vertical":
                self.data.down_arrow_vertical["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-line:horizontal":
                self.data.add_line_horizontal["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-line:horizontal":
                self.data.sub_line_horizontal["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::left-arrow:horizontal":
                self.data.left_arrow_horizontal["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::right-arrow:horizontal":
                self.data.right_arrow_horizontal["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:first":
                self.data.tab_first["background"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:last":
                self.data.tab_last["background"] = self.bg_line.text()



        elif self.bg_lbl.text() == "background-image: ":
            if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
                self.data.wme["background_image"] = self.bg_line.text()


            elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
                self.data.bme["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
                self.data.bme["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
                self.data.me["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
                self.data.bhover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
                self.data.hover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == ":on":
                self.data.on["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::title":
                self.data.title["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::pressed":
                self.data.pressed["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::checked":
                self.data.checked["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::unchecked":
                self.data.unchecked["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator":
                self.data.indicator["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:checked":
                self.data.indicator_checked["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:checked:hover":
                self.data.indicator_checked_hover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:checked:pressed":
                self.data.indicator_checked_pressed["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:unchecked":
                self.data.indicator_unchecked["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:unchecked:hover":
                self.data.indicator_unchecked_hover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:unchecked:pressed":
                self.data.indicator_unchecked_pressed["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::checked:hover":
                self.data.checked_hover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::unchecked:hover":
                self.data.unchecked_hover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:indeterminate:hover":
                self.data.indicator_indeterminate_hover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:indeterminate:pressed":
                self.data.indicator_indeterminate_pressed["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == ":editable":
                self.data.editable["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == ":!editable":
                self.data.u_editable["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == ":!editable:on":
                self.data.u_editable_on["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::drop-down":
                self.data.drop_down["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::drop-arrow":
                self.data.drop_arrow["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::drop-arrow:on":
                self.data.drop_arrow_on["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::drop-down:editable":
                self.data.drop_down_editable["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::drop-down:editable:on":
                self.data.drop_down_editable_on["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-button":
                self.data.up_button["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-button:hover":
                self.data.up_button_hover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-button:pressed":
                self.data.up_button_pressed["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-arrow":
                self.data.up_arrow["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-arrow:disabled":
                self.data.up_arrow_disabled["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-arrow:off":
                self.data.up_arrow_off["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-button":
                self.data.down_button["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-button:hover":
                self.data.down_button_hover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-button:pressed":
                self.data.down_button_pressed["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-arrow":
                self.data.down_arrow["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-arrow:disabled":
                self.data.down_arrow_disabled["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-arrow:off":
                self.data.down_arrow_off["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == ":vertical":
                self.data.vertical["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::groove:vertical":
                self.data.groove_vertical["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:vertical":
                self.data.handle_vertical["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:vertical:hover":
                self.data.handle_vertical_hover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:vertical:disabled":
                self.data.handle_vertical_disabled["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-page:vertical":
                self.data.add_page_vertical["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-page:vertical:disabled":
                self.data.add_page_vertical_disabled["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-page:vertical":
                self.data.sub_page_vertical["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-page:vertical:disabled":
                self.data.sub_page_vertical_disabled["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == ":horizontal":
                self.data.horizontal["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::groove:horizontal":
                self.data.groove_horizontal["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:horizontal":
                self.data.handle_horizontal["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:horizontal:hover":
                self.data.handle_horizontal_hover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:horizontal:disabled":
                self.data.handle_horizontal_disabled["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-page:horizontal":
                self.data.add_page_horizontal["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-page:horizontal:disabled":
                self.data.add_page_horizontal_disabled["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-page:horizontal":
                self.data.sub_page_horizontal["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-page:horizontal:disabled":
                self.data.sub_page_horizontal_disabled["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
                self.data.bitem["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
                self.data.item["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:hover":
                self.data.item_hover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:alternate":
                self.data.item_alternate["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
                self.data.bitem_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
                self.data.item_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:pressed":
                self.data.item_pressed["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:selected:active":
                self.data.item_selected_active["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:selected:!active":
                self.data.item_selected_u_active["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::chunk":
                self.data.chunk["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::chunk:hover":
                self.data.chunk_hover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::pane":
                self.data.pane["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab-bar":
                self.data.tab_bar["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab-bar:top":
                self.data.tab_bar_top["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab-bar:right":
                self.data.tab_bar_right["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab-bar:bottom":
                self.data.tab_bar_bottom["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab-bar:left":
                self.data.tab_bar_left["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab":
                self.data.tab["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tear":
                self.data.tear["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::scroller":
                self.data.scroller["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:hover":
                self.data.tab_hover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:selected":
                self.data.tab_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:!selected":
                self.data.tab_u_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:!selected:hover":
                self.data.tab_u_selected_hover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:first:selected":
                self.data.tab_first_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:last:selected":
                self.data.tab_last_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:top":
                self.data.tab_top["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:top:selected":
                self.data.tab_top_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:top:!selected":
                self.data.tab_top_u_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:right":
                self.data.tab_right["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:right:selected":
                self.data.tab_right_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:right:!selected":
                self.data.tab_right_u_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:bottom":
                self.data.tab_bottom["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:bottom:selected":
                self.data.tab_bottom_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:bottom:!selected":
                self.data.tab_bottom_u_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:left":
                self.data.tab_left["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:left:selected":
                self.data.tab_left_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:left:!selected":
                self.data.tab_left_u_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::close-button":
                self.data.close_button["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::close-button:hover":
                self.data.close_button_hover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::close-button:pressed":
                self.data.close_button_pressed["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "QToolButton":
                self.data.qtoolbutton["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "QToolButton::right-arrow":
                self.data.qtoolbutton_right_arrow["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "QToolButton::left-arrow":
                self.data.qtoolbutton_left_arrow["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::float-button":
                self.data.float_button["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::float-button:hover":
                self.data.float_button_hover["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::float-button:pressed":
                self.data.float_button_pressed["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::seperator":
                self.data.seperator["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:exclusive:checked":
                self.data.indicator_exclusive_checked["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
                self.data.indicator_exclusive_checked_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:exclusive:unchecked":
                self.data.indicator_exclusive_unchecked["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
                self.data.indicator_exclusive_unchecked_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:non-exclusive:checked":
                self.data.indicator_non_exclusive_checked["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
                self.data.indicator_non_exclusive_checked_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
                self.data.indicator_non_exclusive_unchecked["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
                self.data.indicator_non_exclusive_unchecked_selected["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-line:vertical":
                self.data.add_line_vertical["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-line:vertical":
                self.data.sub_line_vertical["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-arrow:vertical":
                self.data.up_arrow_vertical["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-arrow:vertical":
                self.data.down_arrow_vertical["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-line:horizontal":
                self.data.add_line_horizontal["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-line:horizontal":
                self.data.sub_line_horizontal["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::left-arrow:horizontal":
                self.data.left_arrow_horizontal["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::right-arrow:horizontal":
                self.data.right_arrow_horizontal["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:first":
                self.data.tab_first["background_image"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:last":
                self.data.tab_last["background_image"] = self.bg_line.text()

        elif self.bg_lbl.text() == "background-color: ":
            if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
                self.data.wme["background_color"] = self.bg_line.text()


            elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
                self.data.bme["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
                self.data.bme["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
                self.data.me["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
                self.data.bhover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
                self.data.hover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == ":on":
                self.data.on["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::title":
                self.data.title["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::pressed":
                self.data.pressed["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::checked":
                self.data.checked["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::unchecked":
                self.data.unchecked["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator":
                self.data.indicator["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:checked":
                self.data.indicator_checked["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:checked:hover":
                self.data.indicator_checked_hover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:checked:pressed":
                self.data.indicator_checked_pressed["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:unchecked":
                self.data.indicator_unchecked["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:unchecked:hover":
                self.data.indicator_unchecked_hover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:unchecked:pressed":
                self.data.indicator_unchecked_pressed["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::checked:hover":
                self.data.checked_hover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::unchecked:hover":
                self.data.unchecked_hover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:indeterminate:hover":
                self.data.indicator_indeterminate_hover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:indeterminate:pressed":
                self.data.indicator_indeterminate_pressed["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == ":editable":
                self.data.editable["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == ":!editable":
                self.data.u_editable["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == ":!editable:on":
                self.data.u_editable_on["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::drop-down":
                self.data.drop_down["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::drop-arrow":
                self.data.drop_arrow["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::drop-arrow:on":
                self.data.drop_arrow_on["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::drop-down:editable":
                self.data.drop_down_editable["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::drop-down:editable:on":
                self.data.drop_down_editable_on["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-button":
                self.data.up_button["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-button:hover":
                self.data.up_button_hover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-button:pressed":
                self.data.up_button_pressed["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-arrow":
                self.data.up_arrow["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-arrow:disabled":
                self.data.up_arrow_disabled["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-arrow:off":
                self.data.up_arrow_off["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-button":
                self.data.down_button["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-button:hover":
                self.data.down_button_hover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-button:pressed":
                self.data.down_button_pressed["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-arrow":
                self.data.down_arrow["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-arrow:disabled":
                self.data.down_arrow_disabled["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-arrow:off":
                self.data.down_arrow_off["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == ":vertical":
                self.data.vertical["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::groove:vertical":
                self.data.groove_vertical["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:vertical":
                self.data.handle_vertical["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:vertical:hover":
                self.data.handle_vertical_hover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:vertical:disabled":
                self.data.handle_vertical_disabled["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-page:vertical":
                self.data.add_page_vertical["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-page:vertical:disabled":
                self.data.add_page_vertical_disabled["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-page:vertical":
                self.data.sub_page_vertical["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-page:vertical:disabled":
                self.data.sub_page_vertical_disabled["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == ":horizontal":
                self.data.horizontal["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::groove:horizontal":
                self.data.groove_horizontal["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:horizontal":
                self.data.handle_horizontal["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:horizontal:hover":
                self.data.handle_horizontal_hover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::handle:horizontal:disabled":
                self.data.handle_horizontal_disabled["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-page:horizontal":
                self.data.add_page_horizontal["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-page:horizontal:disabled":
                self.data.add_page_horizontal_disabled["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-page:horizontal":
                self.data.sub_page_horizontal["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-page:horizontal:disabled":
                self.data.sub_page_horizontal_disabled["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
                self.data.bitem["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
                self.data.item["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:hover":
                self.data.item_hover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:alternate":
                self.data.item_alternate["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
                self.data.bitem_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
                self.data.item_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:pressed":
                self.data.item_pressed["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:selected:active":
                self.data.item_selected_active["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::item:selected:!active":
                self.data.item_selected_u_active["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::chunk":
                self.data.chunk["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::chunk:hover":
                self.data.chunk_hover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::pane":
                self.data.pane["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab-bar":
                self.data.tab_bar["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab-bar:top":
                self.data.tab_bar_top["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab-bar:right":
                self.data.tab_bar_right["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab-bar:bottom":
                self.data.tab_bar_bottom["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab-bar:left":
                self.data.tab_bar_left["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab":
                self.data.tab["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tear":
                self.data.tear["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::scroller":
                self.data.scroller["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:hover":
                self.data.tab_hover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:selected":
                self.data.tab_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:!selected":
                self.data.tab_u_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:!selected:hover":
                self.data.tab_u_selected_hover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:first:selected":
                self.data.tab_first_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:last:selected":
                self.data.tab_last_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:top":
                self.data.tab_top["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:top:selected":
                self.data.tab_top_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:top:!selected":
                self.data.tab_top_u_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:right":
                self.data.tab_right["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:right:selected":
                self.data.tab_right_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:right:!selected":
                self.data.tab_right_u_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:bottom":
                self.data.tab_bottom["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:bottom:selected":
                self.data.tab_bottom_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:bottom:!selected":
                self.data.tab_bottom_u_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:left":
                self.data.tab_left["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:left:selected":
                self.data.tab_left_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:left:!selected":
                self.data.tab_left_u_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::close-button":
                self.data.close_button["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::close-button:hover":
                self.data.close_button_hover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::close-button:pressed":
                self.data.close_button_pressed["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "QToolButton":
                self.data.qtoolbutton["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "QToolButton::right-arrow":
                self.data.qtoolbutton_right_arrow["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "QToolButton::left-arrow":
                self.data.qtoolbutton_left_arrow["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::float-button":
                self.data.float_button["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::float-button:hover":
                self.data.float_button_hover["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::float-button:pressed":
                self.data.float_button_pressed["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::seperator":
                self.data.seperator["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:exclusive:checked":
                self.data.indicator_exclusive_checked["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
                self.data.indicator_exclusive_checked_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:exclusive:unchecked":
                self.data.indicator_exclusive_unchecked["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
                self.data.indicator_exclusive_unchecked_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:non-exclusive:checked":
                self.data.indicator_non_exclusive_checked["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
                self.data.indicator_non_exclusive_checked_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
                self.data.indicator_non_exclusive_unchecked["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
                self.data.indicator_non_exclusive_unchecked_selected["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-line:vertical":
                self.data.add_line_vertical["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-line:vertical":
                self.data.sub_line_vertical["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::up-arrow:vertical":
                self.data.up_arrow_vertical["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::down-arrow:vertical":
                self.data.down_arrow_vertical["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::add-line:horizontal":
                self.data.add_line_horizontal["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::sub-line:horizontal":
                self.data.sub_line_horizontal["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::left-arrow:horizontal":
                self.data.left_arrow_horizontal["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::right-arrow:horizontal":
                self.data.right_arrow_horizontal["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:first":
                self.data.tab_first["background_color"] = self.bg_line.text()

            elif self.cb.currentText() == "::tab:last":
                self.data.tab_last["background_color"] = self.bg_line.text()

        self.code.ReCode()


    def set_border(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["border"] = self.border.text()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["border"] = self.border.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["border"] = self.border.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["border"] = self.border.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["border"] = self.border.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["border"] = self.border.text()

        elif self.cb.currentText() == ":on":
            self.data.on["border"] = self.border.text()

        elif self.cb.currentText() == "::title":
            self.data.title["border"] = self.border.text()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["border"] = self.border.text()

        elif self.cb.currentText() == "::checked":
            self.data.checked["border"] = self.border.text()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["border"] = self.border.text()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["border"] = self.border.text()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["border"] = self.border.text()

        elif self.cb.currentText() == ":editable":
            self.data.editable["border"] = self.border.text()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["border"] = self.border.text()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["border"] = self.border.text()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["border"] = self.border.text()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["border"] = self.border.text()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["border"] = self.border.text()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["border"] = self.border.text()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["border"] = self.border.text()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["border"] = self.border.text()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["border"] = self.border.text()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["border"] = self.border.text()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["border"] = self.border.text()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["border"] = self.border.text()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["border"] = self.border.text()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["border"] = self.border.text()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["border"] = self.border.text()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["border"] = self.border.text()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["border"] = self.border.text()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["border"] = self.border.text()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["border"] = self.border.text()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["border"] = self.border.text()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["border"] = self.border.text()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["border"] = self.border.text()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["border"] = self.border.text()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["border"] = self.border.text()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["border"] = self.border.text()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["border"] = self.border.text()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["border"] = self.border.text()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["border"] = self.border.text()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["border"] = self.border.text()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["border"] = self.border.text()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["border"] = self.border.text()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["border"] = self.border.text()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["border"] = self.border.text()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["border"] = self.border.text()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["border"] = self.border.text()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["border"] = self.border.text()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["border"] = self.border.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["border"] = self.border.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["border"] = self.border.text()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["border"] = self.border.text()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["border"] = self.border.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["border"] = self.border.text()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["border"] = self.border.text()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["border"] = self.border.text()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["border"] = self.border.text()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["border"] = self.border.text()

        elif self.cb.currentText() == "::pane":
            self.data.pane["border"] = self.border.text()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["border"] = self.border.text()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["border"] = self.border.text()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["border"] = self.border.text()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["border"] = self.border.text()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["border"] = self.border.text()

        elif self.cb.currentText() == "::tab":
            self.data.tab["border"] = self.border.text()

        elif self.cb.currentText() == "::tear":
            self.data.tear["border"] = self.border.text()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["border"] = self.border.text()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["border"] = self.border.text()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["border"] = self.border.text()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["border"] = self.border.text()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["border"] = self.border.text()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["border"] = self.border.text()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["border"] = self.border.text()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["border"] = self.border.text()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["border"] = self.border.text()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["border"] = self.border.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["border"] = self.border.text()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["border"] = self.border.text()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["border"] = self.border.text()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["border"] = self.border.text()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["border"] = self.border.text()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["border"] = self.border.text()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["border"] = self.border.text()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["border"] = self.border.text()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["border"] = self.border.text()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["border"] = self.border.text()

        self.code.ReCode()

    def set_border_width_v(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["border_width_value"] = self.border_width.value()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == ":on":
            self.data.on["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::title":
            self.data.title["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::checked":
            self.data.checked["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == ":editable":
            self.data.editable["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::pane":
            self.data.pane["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab":
            self.data.tab["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tear":
            self.data.tear["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["border_width_value"] = self.border_width.value()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["border_width_value"] = self.border_width.value()

        self.code.ReCode()

    def set_border_width_t(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["border_width_type"] = self.border_width_cb.currentText()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == ":on":
            self.data.on["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::title":
            self.data.title["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::checked":
            self.data.checked["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == ":editable":
            self.data.editable["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::pane":
            self.data.pane["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab":
            self.data.tab["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tear":
            self.data.tear["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["border_width_type"] = self.border_width_cb.currentText()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["border_width_type"] = self.border_width_cb.currentText()

        self.code.ReCode()

    def set_border_style(self):
            if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
                self.data.wme["border_style"] = self.border_style.currentText()


            elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
                self.data.bme["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
                self.data.bme["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
                self.data.me["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
                self.data.bhover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
                self.data.hover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == ":on":
                self.data.on["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::title":
                self.data.title["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::pressed":
                self.data.pressed["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::checked":
                self.data.checked["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::unchecked":
                self.data.unchecked["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator":
                self.data.indicator["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator:checked":
                self.data.indicator_checked["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator:checked:hover":
                self.data.indicator_checked_hover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator:checked:pressed":
                self.data.indicator_checked_pressed["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator:unchecked":
                self.data.indicator_unchecked["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator:unchecked:hover":
                self.data.indicator_unchecked_hover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator:unchecked:pressed":
                self.data.indicator_unchecked_pressed["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::checked:hover":
                self.data.checked_hover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::unchecked:hover":
                self.data.unchecked_hover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator:indeterminate:hover":
                self.data.indicator_indeterminate_hover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator:indeterminate:pressed":
                self.data.indicator_indeterminate_pressed["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == ":editable":
                self.data.editable["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == ":!editable":
                self.data.u_editable["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == ":!editable:on":
                self.data.u_editable_on["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::drop-down":
                self.data.drop_down["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::drop-arrow":
                self.data.drop_arrow["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::drop-arrow:on":
                self.data.drop_arrow_on["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::drop-down:editable":
                self.data.drop_down_editable["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::drop-down:editable:on":
                self.data.drop_down_editable_on["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::up-button":
                self.data.up_button["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::up-button:hover":
                self.data.up_button_hover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::up-button:pressed":
                self.data.up_button_pressed["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::up-arrow":
                self.data.up_arrow["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::up-arrow:disabled":
                self.data.up_arrow_disabled["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::up-arrow:off":
                self.data.up_arrow_off["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::down-button":
                self.data.down_button["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::down-button:hover":
                self.data.down_button_hover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::down-button:pressed":
                self.data.down_button_pressed["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::down-arrow":
                self.data.down_arrow["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::down-arrow:disabled":
                self.data.down_arrow_disabled["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::down-arrow:off":
                self.data.down_arrow_off["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == ":vertical":
                self.data.vertical["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::groove:vertical":
                self.data.groove_vertical["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::handle:vertical":
                self.data.handle_vertical["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::handle:vertical:hover":
                self.data.handle_vertical_hover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::handle:vertical:disabled":
                self.data.handle_vertical_disabled["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::add-page:vertical":
                self.data.add_page_vertical["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::add-page:vertical:disabled":
                self.data.add_page_vertical_disabled["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::sub-page:vertical":
                self.data.sub_page_vertical["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::sub-page:vertical:disabled":
                self.data.sub_page_vertical_disabled["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == ":horizontal":
                self.data.horizontal["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::groove:horizontal":
                self.data.groove_horizontal["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::handle:horizontal":
                self.data.handle_horizontal["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::handle:horizontal:hover":
                self.data.handle_horizontal_hover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::handle:horizontal:disabled":
                self.data.handle_horizontal_disabled["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::add-page:horizontal":
                self.data.add_page_horizontal["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::add-page:horizontal:disabled":
                self.data.add_page_horizontal_disabled["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::sub-page:horizontal":
                self.data.sub_page_horizontal["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::sub-page:horizontal:disabled":
                self.data.sub_page_horizontal_disabled["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
                self.data.bitem["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
                self.data.item["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::item:hover":
                self.data.item_hover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::item:alternate":
                self.data.item_alternate["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
                self.data.bitem_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
                self.data.item_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::item:pressed":
                self.data.item_pressed["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::item:selected:active":
                self.data.item_selected_active["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::item:selected:!active":
                self.data.item_selected_u_active["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::chunk":
                self.data.chunk["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::chunk:hover":
                self.data.chunk_hover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::pane":
                self.data.pane["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab-bar":
                self.data.tab_bar["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab-bar:top":
                self.data.tab_bar_top["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab-bar:right":
                self.data.tab_bar_right["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab-bar:bottom":
                self.data.tab_bar_bottom["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab-bar:left":
                self.data.tab_bar_left["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab":
                self.data.tab["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tear":
                self.data.tear["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::scroller":
                self.data.scroller["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:hover":
                self.data.tab_hover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:selected":
                self.data.tab_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:!selected":
                self.data.tab_u_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:!selected:hover":
                self.data.tab_u_selected_hover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:first:selected":
                self.data.tab_first_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:last:selected":
                self.data.tab_last_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:top":
                self.data.tab_top["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:top:selected":
                self.data.tab_top_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:top:!selected":
                self.data.tab_top_u_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:right":
                self.data.tab_right["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:right:selected":
                self.data.tab_right_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:right:!selected":
                self.data.tab_right_u_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:bottom":
                self.data.tab_bottom["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:bottom:selected":
                self.data.tab_bottom_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:bottom:!selected":
                self.data.tab_bottom_u_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:left":
                self.data.tab_left["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:left:selected":
                self.data.tab_left_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:left:!selected":
                self.data.tab_left_u_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::close-button":
                self.data.close_button["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::close-button:hover":
                self.data.close_button_hover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::close-button:pressed":
                self.data.close_button_pressed["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "QToolButton":
                self.data.qtoolbutton["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "QToolButton::right-arrow":
                self.data.qtoolbutton_right_arrow["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "QToolButton::left-arrow":
                self.data.qtoolbutton_left_arrow["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::float-button":
                self.data.float_button["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::float-button:hover":
                self.data.float_button_hover["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::float-button:pressed":
                self.data.float_button_pressed["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::seperator":
                self.data.seperator["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator:exclusive:checked":
                self.data.indicator_exclusive_checked["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
                self.data.indicator_exclusive_checked_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator:exclusive:unchecked":
                self.data.indicator_exclusive_unchecked["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
                self.data.indicator_exclusive_unchecked_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator:non-exclusive:checked":
                self.data.indicator_non_exclusive_checked["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
                self.data.indicator_non_exclusive_checked_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
                self.data.indicator_non_exclusive_unchecked["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
                self.data.indicator_non_exclusive_unchecked_selected["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::add-line:vertical":
                self.data.add_line_vertical["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::sub-line:vertical":
                self.data.sub_line_vertical["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::up-arrow:vertical":
                self.data.up_arrow_vertical["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::down-arrow:vertical":
                self.data.down_arrow_vertical["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::add-line:horizontal":
                self.data.add_line_horizontal["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::sub-line:horizontal":
                self.data.sub_line_horizontal["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::left-arrow:horizontal":
                self.data.left_arrow_horizontal["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::right-arrow:horizontal":
                self.data.right_arrow_horizontal["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:first":
                self.data.tab_first["border_style"] = self.border_style.currentText()

            elif self.cb.currentText() == "::tab:last":
                self.data.tab_last["border_style"] = self.border_style.currentText()

            self.code.ReCode()

    def set_border_color(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["border_color"] = self.border_color.text()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["border_color"] = self.border_color.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == ":on":
            self.data.on["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::title":
            self.data.title["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::checked":
            self.data.checked["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["border_color"] = self.border_color.text()

        elif self.cb.currentText() == ":editable":
            self.data.editable["border_color"] = self.border_color.text()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["border_color"] = self.border_color.text()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["border_color"] = self.border_color.text()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["border_color"] = self.border_color.text()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::pane":
            self.data.pane["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab":
            self.data.tab["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tear":
            self.data.tear["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["border_color"] = self.border_color.text()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["border_color"] = self.border_color.text()

        self.code.ReCode()


    def set_border_top(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["border_top"] = self.border_top.text()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["border_top"] = self.border_top.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == ":on":
            self.data.on["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::title":
            self.data.title["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::checked":
            self.data.checked["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["border_top"] = self.border_top.text()

        elif self.cb.currentText() == ":editable":
            self.data.editable["border_top"] = self.border_top.text()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["border_top"] = self.border_top.text()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["border_top"] = self.border_top.text()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["border_top"] = self.border_top.text()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::pane":
            self.data.pane["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab":
            self.data.tab["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tear":
            self.data.tear["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["border_top"] = self.border_top.text()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["border_top"] = self.border_top.text()

        self.code.ReCode()

    def set_border_right(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["border_right"] = self.border_right.text()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["border_right"] = self.border_right.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == ":on":
            self.data.on["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::title":
            self.data.title["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::checked":
            self.data.checked["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["border_right"] = self.border_right.text()

        elif self.cb.currentText() == ":editable":
            self.data.editable["border_right"] = self.border_right.text()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["border_right"] = self.border_right.text()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["border_right"] = self.border_right.text()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["border_right"] = self.border_right.text()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::pane":
            self.data.pane["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab":
            self.data.tab["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tear":
            self.data.tear["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["border_right"] = self.border_right.text()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["border_right"] = self.border_right.text()

        self.code.ReCode()


    def set_border_bottom(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["border_bottom"] = self.border_bottom.text()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == ":on":
            self.data.on["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::title":
            self.data.title["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::checked":
            self.data.checked["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == ":editable":
            self.data.editable["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::pane":
            self.data.pane["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab":
            self.data.tab["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tear":
            self.data.tear["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["border_bottom"] = self.border_bottom.text()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["border_bottom"] = self.border_bottom.text()

        self.code.ReCode()

    def set_border_left(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["border_left"] = self.border_left.text()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["border_left"] = self.border_left.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == ":on":
            self.data.on["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::title":
            self.data.title["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::checked":
            self.data.checked["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["border_left"] = self.border_left.text()

        elif self.cb.currentText() == ":editable":
            self.data.editable["border_left"] = self.border_left.text()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["border_left"] = self.border_left.text()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["border_left"] = self.border_left.text()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["border_left"] = self.border_left.text()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::pane":
            self.data.pane["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab":
            self.data.tab["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tear":
            self.data.tear["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["border_left"] = self.border_left.text()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["border_left"] = self.border_left.text()

        self.code.ReCode()

    def set_border_radius(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["border_radius"] = self.border_radius.text()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == ":on":
            self.data.on["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::title":
            self.data.title["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::checked":
            self.data.checked["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == ":editable":
            self.data.editable["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::pane":
            self.data.pane["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab-bar:radius":
            self.data.tab_bar_radius["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab":
            self.data.tab["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tear":
            self.data.tear["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:radius":
            self.data.tab_radius["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:radius:selected":
            self.data.tab_radius_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:radius:!selected":
            self.data.tab_radius_u_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["border_radius"] = self.border_radius.text()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["border_radius"] = self.border_radius.text()

        self.code.ReCode()


    def set_padding_top_v(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["padding_top_value"] = self.padding_top_spb.value()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == ":on":
            self.data.on["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::title":
            self.data.title["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::checked":
            self.data.checked["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == ":editable":
            self.data.editable["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::pane":
            self.data.pane["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab":
            self.data.tab["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tear":
            self.data.tear["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["padding_top_value"] = self.padding_top_spb.value()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["padding_top_value"] = self.padding_top_spb.value()

        self.code.ReCode()

    def set_padding_top_t(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["padding_top_type"] = self.padding_top_cb.currentText()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == ":on":
            self.data.on["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::title":
            self.data.title["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::checked":
            self.data.checked["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == ":editable":
            self.data.editable["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::pane":
            self.data.pane["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab":
            self.data.tab["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tear":
            self.data.tear["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["padding_top_type"] = self.padding_top_cb.currentText()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["padding_top_type"] = self.padding_top_cb.currentText()

        self.code.ReCode()


    def set_padding_right_v(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["padding_right_value"] = self.padding_right_spb.value()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == ":on":
            self.data.on["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::title":
            self.data.title["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::checked":
            self.data.checked["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == ":editable":
            self.data.editable["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::pane":
            self.data.pane["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab":
            self.data.tab["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tear":
            self.data.tear["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_right_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_right_u_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["padding_right_value"] = self.padding_right_spb.value()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["padding_right_value"] = self.padding_right_spb.value()

        self.code.ReCode()

    def set_padding_right_t(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["padding_right_type"] = self.padding_right_cb.currentText()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == ":on":
            self.data.on["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::title":
            self.data.title["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::checked":
            self.data.checked["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == ":editable":
            self.data.editable["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::pane":
            self.data.pane["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab":
            self.data.tab["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tear":
            self.data.tear["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_right_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_right_u_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["padding_right_type"] = self.padding_right_cb.currentText()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["padding_right_type"] = self.padding_right_cb.currentText()

        self.code.ReCode()


    def set_padding_bottom_v(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["padding_bottom_value"] = self.padding_bottom_spb.value()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == ":on":
            self.data.on["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::title":
            self.data.title["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::checked":
            self.data.checked["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == ":editable":
            self.data.editable["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::pane":
            self.data.pane["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab":
            self.data.tab["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tear":
            self.data.tear["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_bottom_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_bottom_u_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_bottom_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_bottom_u_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_bottom_arrow["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["padding_bottom_value"] = self.padding_bottom_spb.value()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["padding_bottom_value"] = self.padding_bottom_spb.value()

        self.code.ReCode()

    def set_padding_bottom_t(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["padding_bottom_type"] = self.padding_bottom_cb.currentText()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == ":on":
            self.data.on["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::title":
            self.data.title["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::checked":
            self.data.checked["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == ":editable":
            self.data.editable["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::pane":
            self.data.pane["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab":
            self.data.tab["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tear":
            self.data.tear["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_bottom_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_bottom_u_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_bottom_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_bottom_u_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_bottom_arrow["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["padding_bottom_type"] = self.padding_bottom_cb.currentText()

        self.code.ReCode()


    def set_padding_left_v(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["padding_left_value"] = self.padding_left_spb.value()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == ":on":
            self.data.on["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::title":
            self.data.title["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::checked":
            self.data.checked["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == ":editable":
            self.data.editable["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::pane":
            self.data.pane["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab":
            self.data.tab["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tear":
            self.data.tear["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_left_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_left_u_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_left_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_left_u_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_left_arrow["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["padding_left_value"] = self.padding_left_spb.value()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["padding_left_value"] = self.padding_left_spb.value()

        self.code.ReCode()

    def set_padding_left_t(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["padding_left_type"] = self.padding_left_cb.currentText()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == ":on":
            self.data.on["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::title":
            self.data.title["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::checked":
            self.data.checked["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == ":editable":
            self.data.editable["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::pane":
            self.data.pane["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab":
            self.data.tab["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tear":
            self.data.tear["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_left_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_left_u_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_left_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_left_u_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_left_arrow["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["padding_left_type"] = self.padding_left_cb.currentText()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["padding_left_type"] = self.padding_left_cb.currentText()

        self.code.ReCode()



    def set_margin_top_v(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["margin_top_value"] = self.margin_top_spb.value()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == ":on":
            self.data.on["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::title":
            self.data.title["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::checked":
            self.data.checked["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == ":editable":
            self.data.editable["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::pane":
            self.data.pane["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab":
            self.data.tab["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tear":
            self.data.tear["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["margin_top_value"] = self.margin_top_spb.value()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["margin_top_value"] = self.margin_top_spb.value()


        self.code.ReCode()

    def set_margin_top_t(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["margin_top_type"] = self.margin_top_cb.currentText()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == ":on":
            self.data.on["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::title":
            self.data.title["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::checked":
            self.data.checked["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == ":editable":
            self.data.editable["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::pane":
            self.data.pane["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab":
            self.data.tab["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tear":
            self.data.tear["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_top_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_top_u_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["margin_top_type"] = self.margin_top_cb.currentText()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["margin_top_type"] = self.margin_top_cb.currentText()

        self.code.ReCode()


    def set_margin_right_v(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["margin_right_value"] = self.margin_right_spb.value()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == ":on":
            self.data.on["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::title":
            self.data.title["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::checked":
            self.data.checked["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == ":editable":
            self.data.editable["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::pane":
            self.data.pane["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab":
            self.data.tab["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tear":
            self.data.tear["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_right_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_right_u_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["margin_right_value"] = self.margin_right_spb.value()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["margin_right_value"] = self.margin_right_spb.value()

        self.code.ReCode()

    def set_margin_right_t(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["margin_right_type"] = self.margin_right_cb.currentText()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == ":on":
            self.data.on["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::title":
            self.data.title["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::checked":
            self.data.checked["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == ":editable":
            self.data.editable["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::pane":
            self.data.pane["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab":
            self.data.tab["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tear":
            self.data.tear["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_right_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_right_u_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_right_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_right_u_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_right_arrow["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["margin_right_type"] = self.margin_right_cb.currentText()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["margin_right_type"] = self.margin_right_cb.currentText()

        self.code.ReCode()


    def set_margin_bottom_v(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["margin_bottom_value"] = self.margin_bottom_spb.value()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == ":on":
            self.data.on["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::title":
            self.data.title["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::checked":
            self.data.checked["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == ":editable":
            self.data.editable["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::pane":
            self.data.pane["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab":
            self.data.tab["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tear":
            self.data.tear["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_bottom_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_bottom_u_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_bottom_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_bottom_u_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_bottom_arrow["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["margin_bottom_value"] = self.margin_bottom_spb.value()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["margin_bottom_value"] = self.margin_bottom_spb.value()

        self.code.ReCode()


    def set_margin_bottom_t(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["margin_bottom_type"] = self.margin_bottom_cb.currentText()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == ":on":
            self.data.on["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::title":
            self.data.title["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::checked":
            self.data.checked["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == ":editable":
            self.data.editable["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::pane":
            self.data.pane["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab":
            self.data.tab["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tear":
            self.data.tear["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_bottom_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_bottom_u_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_bottom_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_bottom_u_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_bottom_arrow["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["margin_bottom_type"] = self.margin_bottom_cb.currentText()

        self.code.ReCode()



    def set_margin_left_v(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["margin_left_value"] = self.margin_left_spb.value()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == ":on":
            self.data.on["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::title":
            self.data.title["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::checked":
            self.data.checked["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == ":editable":
            self.data.editable["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::pane":
            self.data.pane["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab":
            self.data.tab["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tear":
            self.data.tear["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_left_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_left_u_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_left_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_left_u_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_left_arrow["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["margin_left_value"] = self.margin_left_spb.value()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["margin_left_value"] = self.margin_left_spb.value()

        self.code.ReCode()

    def set_margin_left_t(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.data.wme["margin_left_type"] = self.margin_left_cb.currentText()


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.data.bme["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
            self.data.bme["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.data.me["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.data.bhover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"] :
            self.data.hover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == ":on":
            self.data.on["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::title":
            self.data.title["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::pressed":
            self.data.pressed["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::checked":
            self.data.checked["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::unchecked":
            self.data.unchecked["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator":
            self.data.indicator["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked":
            self.data.indicator_checked["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.data.indicator_checked_hover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.data.indicator_checked_pressed["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked":
            self.data.indicator_unchecked["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.data.indicator_unchecked_hover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.data.indicator_unchecked_pressed["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::checked:hover":
            self.data.checked_hover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::unchecked:hover":
            self.data.unchecked_hover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.data.indicator_indeterminate_hover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.data.indicator_indeterminate_pressed["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == ":editable":
            self.data.editable["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == ":!editable":
            self.data.u_editable["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == ":!editable:on":
            self.data.u_editable_on["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::drop-down":
            self.data.drop_down["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow":
            self.data.drop_arrow["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::drop-arrow:on":
            self.data.drop_arrow_on["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable":
            self.data.drop_down_editable["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.data.drop_down_editable_on["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::up-button":
            self.data.up_button["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::up-button:hover":
            self.data.up_button_hover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::up-button:pressed":
            self.data.up_button_pressed["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::up-arrow":
            self.data.up_arrow["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.data.up_arrow_disabled["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:off":
            self.data.up_arrow_off["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::down-button":
            self.data.down_button["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::down-button:hover":
            self.data.down_button_hover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::down-button:pressed":
            self.data.down_button_pressed["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::down-arrow":
            self.data.down_arrow["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.data.down_arrow_disabled["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:off":
            self.data.down_arrow_off["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == ":vertical":
            self.data.vertical["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::groove:vertical":
            self.data.groove_vertical["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical":
            self.data.handle_vertical["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.data.handle_vertical_hover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.data.handle_vertical_disabled["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical":
            self.data.add_page_vertical["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.data.add_page_vertical_disabled["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical":
            self.data.sub_page_vertical["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.data.sub_page_vertical_disabled["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == ":horizontal":
            self.data.horizontal["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::groove:horizontal":
            self.data.groove_horizontal["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal":
            self.data.handle_horizontal["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.data.handle_horizontal_hover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.data.handle_horizontal_disabled["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal":
            self.data.add_page_horizontal["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.data.add_page_horizontal_disabled["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.data.sub_page_horizontal["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.data.sub_page_horizontal_disabled["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::item:hover":
            self.data.item_hover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::item:alternate":
            self.data.item_alternate["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.data.bitem_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.data.item_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::item:pressed":
            self.data.item_pressed["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::item:selected:active":
            self.data.item_selected_active["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::item:selected:!active":
            self.data.item_selected_u_active["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::chunk":
            self.data.chunk["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::chunk:hover":
            self.data.chunk_hover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::pane":
            self.data.pane["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab-bar":
            self.data.tab_bar["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:top":
            self.data.tab_bar_top["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:right":
            self.data.tab_bar_right["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.data.tab_bar_bottom["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab-bar:left":
            self.data.tab_bar_left["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab":
            self.data.tab["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tear":
            self.data.tear["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::scroller":
            self.data.scroller["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:hover":
            self.data.tab_hover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:selected":
            self.data.tab_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected":
            self.data.tab_u_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.data.tab_u_selected_hover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:first:selected":
            self.data.tab_first_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:last:selected":
            self.data.tab_last_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:top":
            self.data.tab_top["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:top:selected":
            self.data.tab_left_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:top:!selected":
            self.data.tab_left_u_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:right":
            self.data.tab_right["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:right:selected":
            self.data.tab_left_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:right:!selected":
            self.data.tab_left_u_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom":
            self.data.tab_bottom["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.data.tab_bottom_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.data.tab_bottom_u_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:left":
            self.data.tab_left["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:left:selected":
            self.data.tab_left_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:left:!selected":
            self.data.tab_left_u_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::close-button":
            self.data.close_button["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::close-button:hover":
            self.data.close_button_hover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::close-button:pressed":
            self.data.close_button_pressed["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "QToolButton":
            self.data.qtoolbutton["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.data.qtoolbutton_left_arrow["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.data.qtoolbutton_left_arrow["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::float-button":
            self.data.float_button["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::float-button:hover":
            self.data.float_button_hover["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::float-button:pressed":
            self.data.float_button_pressed["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::seperator":
            self.data.seperator["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.data.indicator_exclusive_checked["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.data.indicator_exclusive_checked_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.data.indicator_exclusive_unchecked["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.data.indicator_exclusive_unchecked_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.data.indicator_non_exclusive_checked["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.data.indicator_non_exclusive_checked_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.data.indicator_non_exclusive_unchecked["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.data.indicator_non_exclusive_unchecked_selected["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::add-line:vertical":
            self.data.add_line_vertical["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::sub-line:vertical":
            self.data.sub_line_vertical["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.data.up_arrow_vertical["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.data.down_arrow_vertical["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::add-line:horizontal":
            self.data.add_line_horizontal["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.data.sub_line_horizontal["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.data.left_arrow_horizontal["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.data.right_arrow_horizontal["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:first":
            self.data.tab_first["margin_left_type"] = self.margin_left_cb.currentText()

        elif self.cb.currentText() == "::tab:last":
            self.data.tab_last["margin_left_type"] = self.margin_left_cb.currentText()

        self.code.ReCode()







    def change_combo_box_2(self):
        txt = self.cb2.currentText()
        #--------- QSlider ----
        if self.type == "QSlider":
            if txt == "":
                self.cb.clear()
                self.cb.addItems(["",":hover","::pressed"])
            elif txt == "vertical":
                self.cb.clear()
                self.cb.addItems(CD.slider_v)
            elif txt == "horizontal":
                self.cb.clear()
                self.cb.addItems(CD.slider_h)
        #--------- QSlider end ----------

        #------------ QTabWidget --------
        if self.type == "QTabWidget":
            if txt == "QTabWidget":
                self.cb.clear()
                self.cb.addItems(CD.tabwidget)
            elif txt == "QTabBar":
                self.cb.clear()
                self.cb.addItems(CD.tabbar)
        #----------- QTabWidget end ----------

        #----------- QMenu --------------
        if self.type == "QMenu":
            if txt == "QMenuBar":
                self.cb.clear()
                self.cb.addItems(CD.menubar)
            elif txt == "QMenu":
                self.cb.clear()
                self.cb.addItems(CD.menu)
        #--------- QMenu end -----

        #-------- QScrollBar -------
        if self.type == "QScrollBar":
            if txt == "":
                self.cb.clear()
                self.cb.addItems(["",":hover","::pressed"])
            if txt == "vertical":
                self.cb.clear()
                self.cb.addItems(CD.scrollbar_v)
            elif txt == "horizontal":
                self.cb.clear()
                self.cb.addItems(CD.scrollbar_h)
        #------- QScrollBar end --------





    def combo_1_func(self):
        if self.cb.currentText() == "" and self.cb2.currentText() == "QTabWidget":
            self.color.setText(self.data.wme["color"])

            self.image.setText(self.data.wme["image"])
            self.outline.setText(self.data.wme["outline"])

            self.width_spin.setValue(int(self.data.wme["width_value"]))
            self.width_cb.setCurrentText(self.data.wme["width_type"])
            self.height_spin.setValue(int(self.data.wme["height_value"]))
            self.height_cb.setCurrentText(self.data.wme["height_type"])

            self.f_family_edit.setText(self.data.wme["font_family"])
            self.f_size_spin.setText(self.data.wme["font_size"])
            self.f_weight_cb.setCurrentText(self.data.wme["font_weight"])
            self.f_style_cb.setCurrentText(self.data.wme["font_style"])

            self.line_height_edit.setText(self.data.wme["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.wme["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.wme["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.wme["text_align"])
            self.text_decoration.setCurrentText(self.data.wme["text_decoration"])
            self.text_transform.setCurrentText(self.data.wme["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.wme["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.wme["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.wme["background_color"])

            self.border.setText(self.data.wme["border"])
            self.border_width.setValue(int(self.data.wme["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.wme["border_width_type"])

            self.border_style.setCurrentText(self.data.wme["border_style"])
            self.border_color.setText(self.data.wme["border_color"])

            self.border_right.setText(self.data.wme["border_right"])
            self.border_left.setText(self.data.wme["border_left"])
            self.border_bottom.setText(self.data.wme["border_bottom"])
            self.border_top.setText(self.data.wme["border_top"])

            self.border_radius.setText(self.data.wme["border_radius"])

            self.padding_top_spb.setValue(int(self.data.wme["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.wme["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.wme["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.wme["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.wme["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.wme["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.wme["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.wme["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.wme["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.wme["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.wme["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.wme["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.wme["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.wme["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.wme["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.wme["margin_left_type"])


        elif self.cb.currentText() == "" and self.cb2.currentText() == "QTabBar":
            self.color.setText(self.data.bme["color"])

            self.image.setText(self.data.bme["image"])
            self.outline.setText(self.data.bme["outline"])

            self.width_spin.setValue(int(self.data.bme["width_value"]))
            self.width_cb.setCurrentText(self.data.bme["width_type"])
            self.height_spin.setValue(int(self.data.bme["height_value"]))
            self.height_cb.setCurrentText(self.data.bme["height_type"])

            self.f_family_edit.setText(self.data.bme["font_family"])
            self.f_size_spin.setText(self.data.bme["font_size"])
            self.f_weight_cb.setCurrentText(self.data.bme["font_weight"])
            self.f_style_cb.setCurrentText(self.data.bme["font_style"])

            self.line_height_edit.setText(self.data.bme["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.bme["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.bme["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.bme["text_align"])
            self.text_decoration.setCurrentText(self.data.bme["text_decoration"])
            self.text_transform.setCurrentText(self.data.bme["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.bme["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.bme["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.bme["background_color"])

            self.border.setText(self.data.bme["border"])
            self.border_width.setValue(int(self.data.bme["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.bme["border_width_type"])

            self.border_style.setCurrentText(self.data.bme["border_style"])
            self.border_color.setText(self.data.bme["border_color"])

            self.border_right.setText(self.data.bme["border_right"])
            self.border_left.setText(self.data.bme["border_left"])
            self.border_bottom.setText(self.data.bme["border_bottom"])
            self.border_top.setText(self.data.bme["border_top"])

            self.border_radius.setText(self.data.bme["border_radius"])

            self.padding_top_spb.setValue(int(self.data.bme["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.bme["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.bme["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.bme["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.bme["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.bme["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.bme["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.bme["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.bme["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.bme["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.bme["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.bme["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.bme["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.bme["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.bme["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.bme["margin_left_type"])

        elif self.cb.currentText() == "" and self.cb2.currentText() == "QMenuBar":
              self.color.setText(self.data.bme["color"])

              self.image.setText(self.data.bme["image"])
              self.outline.setText(self.data.bme["outline"])

              self.width_spin.setValue(int(self.data.bme["width_value"]))
              self.width_cb.setCurrentText(self.data.bme["width_type"])
              self.height_spin.setValue(int(self.data.bme["height_value"]))
              self.height_cb.setCurrentText(self.data.bme["height_type"])

              self.f_family_edit.setText(self.data.bme["font_family"])
              self.f_size_spin.setText(self.data.bme["font_size"])
              self.f_weight_cb.setCurrentText(self.data.bme["font_weight"])
              self.f_style_cb.setCurrentText(self.data.bme["font_style"])

              self.line_height_edit.setText(self.data.bme["line_height"])
              self.letter_spacing_spb.setValue(int(self.data.bme["letter_spacing_value"]))
              self.letter_spacing_cb.setCurrentText(self.data.bme["letter_spacing_type"])
              self.text_align.setCurrentText(self.data.bme["text_align"])
              self.text_decoration.setCurrentText(self.data.bme["text_decoration"])
              self.text_transform.setCurrentText(self.data.bme["text_transform"])

              if self.bg_lbl.text() == "background: ":
                  self.bg_line.setText(self.data.bme["background"])
              elif self.bg_lbl.text() == "background-image: ":
                  self.bg_line.setText(self.data.bme["background_image"])
              elif self.bg_lbl.text() == "background-color: ":
                  self.bg_line.setText(self.data.bme["background_color"])

              self.border.setText(self.data.bme["border"])
              self.border_width.setValue(int(self.data.bme["border_width_value"]))
              self.border_width_cb.setCurrentText(self.data.bme["border_width_type"])

              self.border_style.setCurrentText(self.data.bme["border_style"])
              self.border_color.setText(self.data.bme["border_color"])

              self.border_right.setText(self.data.bme["border_right"])
              self.border_left.setText(self.data.bme["border_left"])
              self.border_bottom.setText(self.data.bme["border_bottom"])
              self.border_top.setText(self.data.bme["border_top"])

              self.border_radius.setText(self.data.bme["border_radius"])

              self.padding_top_spb.setValue(int(self.data.bme["padding_top_value"]))
              self.padding_top_cb.setCurrentText(self.data.bme["padding_top_type"])
              self.padding_right_spb.setValue(int(self.data.bme["padding_right_value"]))
              self.padding_right_cb.setCurrentText(self.data.bme["padding_right_type"])
              self.padding_bottom_spb.setValue(int(self.data.bme["padding_bottom_value"]))
              self.padding_bottom_cb.setCurrentText(self.data.bme["padding_bottom_type"])
              self.padding_left_spb.setValue(int(self.data.bme["padding_left_value"]))
              self.padding_left_cb.setCurrentText(self.data.bme["padding_left_type"])

              self.margin_top_spb.setValue(int(self.data.bme["margin_top_value"]))
              self.margin_top_cb.setCurrentText(self.data.bme["margin_top_type"])
              self.margin_right_spb.setValue(int(self.data.bme["margin_right_value"]))
              self.margin_right_cb.setCurrentText(self.data.bme["margin_right_type"])
              self.margin_bottom_spb.setValue(int(self.data.bme["margin_bottom_value"]))
              self.margin_bottom_cb.setCurrentText(self.data.bme["margin_bottom_type"])
              self.margin_left_spb.setValue(int(self.data.bme["margin_left_value"]))
              self.margin_left_cb.setCurrentText(self.data.bme["margin_left_type"])

        elif self.cb.currentText() == "" and self.cb2.currentText() not in ["QTabWidget", "QTabBar", "QMenuBar"]:
            self.color.setText(self.data.me["color"])

            self.image.setText(self.data.me["image"])
            self.outline.setText(self.data.me["outline"])

            self.width_spin.setValue(int(self.data.me["width_value"]))
            self.width_cb.setCurrentText(self.data.me["width_type"])
            self.height_spin.setValue(int(self.data.me["height_value"]))
            self.height_cb.setCurrentText(self.data.me["height_type"])

            self.f_family_edit.setText(self.data.me["font_family"])
            self.f_size_spin.setText(self.data.me["font_size"])
            self.f_weight_cb.setCurrentText(self.data.me["font_weight"])
            self.f_style_cb.setCurrentText(self.data.me["font_style"])

            self.line_height_edit.setText(self.data.me["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.me["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.me["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.me["text_align"])
            self.text_decoration.setCurrentText(self.data.me["text_decoration"])
            self.text_transform.setCurrentText(self.data.me["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.me["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.me["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.me["background_color"])

            self.border.setText(self.data.me["border"])
            self.border_width.setValue(int(self.data.me["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.me["border_width_type"])

            self.border_style.setCurrentText(self.data.me["border_style"])
            self.border_color.setText(self.data.me["border_color"])

            self.border_right.setText(self.data.me["border_right"])
            self.border_left.setText(self.data.me["border_left"])
            self.border_bottom.setText(self.data.me["border_bottom"])
            self.border_top.setText(self.data.me["border_top"])

            self.border_radius.setText(self.data.me["border_radius"])

            self.padding_top_spb.setValue(int(self.data.me["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.me["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.me["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.me["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.me["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.me["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.me["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.me["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.me["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.me["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.me["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.me["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.me["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.me["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.me["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.me["margin_left_type"])

        elif self.cb.currentText() == ":on":
            self.color.setText(self.data.on["color"])

            self.image.setText(self.data.on["image"])
            self.outline.setText(self.data.on["outline"])

            self.width_spin.setValue(int(self.data.on["width_value"]))
            self.width_cb.setCurrentText(self.data.on["width_type"])
            self.height_spin.setValue(int(self.data.on["height_value"]))
            self.height_cb.setCurrentText(self.data.on["height_type"])

            self.f_family_edit.setText(self.data.on["font_family"])
            self.f_size_spin.setText(self.data.on["font_size"])
            self.f_weight_cb.setCurrentText(self.data.on["font_weight"])
            self.f_style_cb.setCurrentText(self.data.on["font_style"])

            self.line_height_edit.setText(self.data.on["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.on["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.on["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.on["text_align"])
            self.text_decoration.setCurrentText(self.data.on["text_decoration"])
            self.text_transform.setCurrentText(self.data.on["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.on["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.on["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.on["background_color"])

            self.border.setText(self.data.on["border"])
            self.border_width.setValue(int(self.data.on["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.on["border_width_type"])

            self.border_style.setCurrentText(self.data.on["border_style"])
            self.border_color.setText(self.data.on["border_color"])

            self.border_right.setText(self.data.on["border_right"])
            self.border_left.setText(self.data.on["border_left"])
            self.border_bottom.setText(self.data.on["border_bottom"])
            self.border_top.setText(self.data.on["border_top"])

            self.border_radius.setText(self.data.on["border_radius"])

            self.padding_top_spb.setValue(int(self.data.on["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.on["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.on["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.on["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.on["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.on["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.on["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.on["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.on["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.on["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.on["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.on["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.on["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.on["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.on["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.on["margin_left_type"])

        elif self.cb.currentText() == "::title":
            self.color.setText(self.data.title["color"])

            self.image.setText(self.data.title["image"])
            self.outline.setText(self.data.title["outline"])

            self.width_spin.setValue(int(self.data.title["width_value"]))
            self.width_cb.setCurrentText(self.data.title["width_type"])
            self.height_spin.setValue(int(self.data.title["height_value"]))
            self.height_cb.setCurrentText(self.data.title["height_type"])

            self.f_family_edit.setText(self.data.title["font_family"])
            self.f_size_spin.setText(self.data.title["font_size"])
            self.f_weight_cb.setCurrentText(self.data.title["font_weight"])
            self.f_style_cb.setCurrentText(self.data.title["font_style"])

            self.line_height_edit.setText(self.data.title["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.title["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.title["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.title["text_align"])
            self.text_decoration.setCurrentText(self.data.title["text_decoration"])
            self.text_transform.setCurrentText(self.data.title["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.title["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.title["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.title["background_color"])

            self.border.setText(self.data.title["border"])
            self.border_width.setValue(int(self.data.title["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.title["border_width_type"])

            self.border_style.setCurrentText(self.data.title["border_style"])
            self.border_color.setText(self.data.title["border_color"])

            self.border_right.setText(self.data.title["border_right"])
            self.border_left.setText(self.data.title["border_left"])
            self.border_bottom.setText(self.data.title["border_bottom"])
            self.border_top.setText(self.data.title["border_top"])

            self.border_radius.setText(self.data.title["border_radius"])

            self.padding_top_spb.setValue(int(self.data.title["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.title["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.title["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.title["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.title["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.title["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.title["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.title["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.title["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.title["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.title["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.title["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.title["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.title["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.title["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.title["margin_left_type"])

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() == "QMenuBar":
            self.color.setText(self.data.bhover["color"])

            self.image.setText(self.data.bhover["image"])
            self.outline.setText(self.data.bhover["outline"])

            self.width_spin.setValue(int(self.data.bhover["width_value"]))
            self.width_cb.setCurrentText(self.data.bhover["width_type"])
            self.height_spin.setValue(int(self.data.bhover["height_value"]))
            self.height_cb.setCurrentText(self.data.bhover["height_type"])

            self.f_family_edit.setText(self.data.bhover["font_family"])
            self.f_size_spin.setText(self.data.bhover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.bhover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.bhover["font_style"])

            self.line_height_edit.setText(self.data.bhover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.bhover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.bhover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.bhover["text_align"])
            self.text_decoration.setCurrentText(self.data.bhover["text_decoration"])
            self.text_transform.setCurrentText(self.data.bhover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.bhover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.bhover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.bhover["background_color"])

            self.border.setText(self.data.bhover["border"])
            self.border_width.setValue(int(self.data.bhover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.bhover["border_width_type"])

            self.border_style.setCurrentText(self.data.bhover["border_style"])
            self.border_color.setText(self.data.bhover["border_color"])

            self.border_right.setText(self.data.bhover["border_right"])
            self.border_left.setText(self.data.bhover["border_left"])
            self.border_bottom.setText(self.data.bhover["border_bottom"])
            self.border_top.setText(self.data.bhover["border_top"])

            self.border_radius.setText(self.data.bhover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.bhover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.bhover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.bhover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.bhover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.bhover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.bhover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.bhover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.bhover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.bhover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.bhover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.bhover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.bhover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.bhover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.bhover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.bhover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.bhover["margin_left_type"])

        elif self.cb.currentText() == ":hover" and self.cb2.currentText() not in ["QMenuBar"]:
            self.color.setText(self.data.hover["color"])

            self.image.setText(self.data.hover["image"])
            self.outline.setText(self.data.hover["outline"])

            self.width_spin.setValue(int(self.data.hover["width_value"]))
            self.width_cb.setCurrentText(self.data.hover["width_type"])
            self.height_spin.setValue(int(self.data.hover["height_value"]))
            self.height_cb.setCurrentText(self.data.hover["height_type"])

            self.f_family_edit.setText(self.data.hover["font_family"])
            self.f_size_spin.setText(self.data.hover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.hover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.hover["font_style"])

            self.line_height_edit.setText(self.data.hover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.hover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.hover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.hover["text_align"])
            self.text_decoration.setCurrentText(self.data.hover["text_decoration"])
            self.text_transform.setCurrentText(self.data.hover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.hover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.hover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.hover["background_color"])

            self.border.setText(self.data.hover["border"])
            self.border_width.setValue(int(self.data.hover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.hover["border_width_type"])

            self.border_style.setCurrentText(self.data.hover["border_style"])
            self.border_color.setText(self.data.hover["border_color"])

            self.border_right.setText(self.data.hover["border_right"])
            self.border_left.setText(self.data.hover["border_left"])
            self.border_bottom.setText(self.data.hover["border_bottom"])
            self.border_top.setText(self.data.hover["border_top"])

            self.border_radius.setText(self.data.hover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.hover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.hover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.hover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.hover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.hover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.hover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.hover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.hover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.hover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.hover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.hover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.hover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.hover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.hover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.hover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.hover["margin_left_type"])

        elif self.cb.currentText() == "::pressed":
            self.color.setText(self.data.pressed["color"])

            self.image.setText(self.data.pressed["image"])
            self.outline.setText(self.data.pressed["outline"])

            self.width_spin.setValue(int(self.data.pressed["width_value"]))
            self.width_cb.setCurrentText(self.data.pressed["width_type"])
            self.height_spin.setValue(int(self.data.pressed["height_value"]))
            self.height_cb.setCurrentText(self.data.pressed["height_type"])

            self.f_family_edit.setText(self.data.pressed["font_family"])
            self.f_size_spin.setText(self.data.pressed["font_size"])
            self.f_weight_cb.setCurrentText(self.data.pressed["font_weight"])
            self.f_style_cb.setCurrentText(self.data.pressed["font_style"])

            self.line_height_edit.setText(self.data.pressed["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.pressed["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.pressed["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.pressed["text_align"])
            self.text_decoration.setCurrentText(self.data.pressed["text_decoration"])
            self.text_transform.setCurrentText(self.data.pressed["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.pressed["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.pressed["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.pressed["background_color"])

            self.border.setText(self.data.pressed["border"])
            self.border_width.setValue(int(self.data.pressed["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.pressed["border_width_type"])

            self.border_style.setCurrentText(self.data.pressed["border_style"])
            self.border_color.setText(self.data.pressed["border_color"])

            self.border_right.setText(self.data.pressed["border_right"])
            self.border_left.setText(self.data.pressed["border_left"])
            self.border_bottom.setText(self.data.pressed["border_bottom"])
            self.border_top.setText(self.data.pressed["border_top"])

            self.border_radius.setText(self.data.pressed["border_radius"])

            self.padding_top_spb.setValue(int(self.data.pressed["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.pressed["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.pressed["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.pressed["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.pressed["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.pressed["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.pressed["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.pressed["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.pressed["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.pressed["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.pressed["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.pressed["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.pressed["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.pressed["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.pressed["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.pressed["margin_left_type"])

        elif self.cb.currentText() == "::checked":
            self.color.setText(self.data.checked["color"])

            self.image.setText(self.data.checked["image"])
            self.outline.setText(self.data.checked["outline"])

            self.width_spin.setValue(int(self.data.checked["width_value"]))
            self.width_cb.setCurrentText(self.data.checked["width_type"])
            self.height_spin.setValue(int(self.data.checked["height_value"]))
            self.height_cb.setCurrentText(self.data.checked["height_type"])

            self.f_family_edit.setText(self.data.checked["font_family"])
            self.f_size_spin.setText(self.data.checked["font_size"])
            self.f_weight_cb.setCurrentText(self.data.checked["font_weight"])
            self.f_style_cb.setCurrentText(self.data.checked["font_style"])

            self.line_height_edit.setText(self.data.checked["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.checked["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.checked["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.checked["text_align"])
            self.text_decoration.setCurrentText(self.data.checked["text_decoration"])
            self.text_transform.setCurrentText(self.data.checked["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.checked["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.checked["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.checked["background_color"])

            self.border.setText(self.data.checked["border"])
            self.border_width.setValue(int(self.data.checked["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.checked["border_width_type"])

            self.border_style.setCurrentText(self.data.checked["border_style"])
            self.border_color.setText(self.data.checked["border_color"])

            self.border_right.setText(self.data.checked["border_right"])
            self.border_left.setText(self.data.checked["border_left"])
            self.border_bottom.setText(self.data.checked["border_bottom"])
            self.border_top.setText(self.data.checked["border_top"])

            self.border_radius.setText(self.data.checked["border_radius"])

            self.padding_top_spb.setValue(int(self.data.checked["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.checked["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.checked["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.checked["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.checked["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.checked["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.checked["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.checked["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.checked["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.checked["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.checked["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.checked["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.checked["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.checked["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.checked["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.checked["margin_left_type"])

        elif self.cb.currentText() == "::unchecked":
            self.color.setText(self.data.unchecked["color"])

            self.image.setText(self.data.unchecked["image"])
            self.outline.setText(self.data.unchecked["outline"])

            self.width_spin.setValue(int(self.data.unchecked["width_value"]))
            self.width_cb.setCurrentText(self.data.unchecked["width_type"])
            self.height_spin.setValue(int(self.data.unchecked["height_value"]))
            self.height_cb.setCurrentText(self.data.unchecked["height_type"])

            self.f_family_edit.setText(self.data.unchecked["font_family"])
            self.f_size_spin.setText(self.data.unchecked["font_size"])
            self.f_weight_cb.setCurrentText(self.data.unchecked["font_weight"])
            self.f_style_cb.setCurrentText(self.data.unchecked["font_style"])

            self.line_height_edit.setText(self.data.unchecked["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.unchecked["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.unchecked["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.unchecked["text_align"])
            self.text_decoration.setCurrentText(self.data.unchecked["text_decoration"])
            self.text_transform.setCurrentText(self.data.unchecked["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.unchecked["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.unchecked["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.unchecked["background_color"])

            self.border.setText(self.data.unchecked["border"])
            self.border_width.setValue(int(self.data.unchecked["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.unchecked["border_width_type"])

            self.border_style.setCurrentText(self.data.unchecked["border_style"])
            self.border_color.setText(self.data.unchecked["border_color"])

            self.border_right.setText(self.data.unchecked["border_right"])
            self.border_left.setText(self.data.unchecked["border_left"])
            self.border_bottom.setText(self.data.unchecked["border_bottom"])
            self.border_top.setText(self.data.unchecked["border_top"])

            self.border_radius.setText(self.data.unchecked["border_radius"])

            self.padding_top_spb.setValue(int(self.data.unchecked["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.unchecked["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.unchecked["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.unchecked["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.unchecked["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.unchecked["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.unchecked["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.unchecked["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.unchecked["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.unchecked["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.unchecked["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.unchecked["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.unchecked["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.unchecked["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.unchecked["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.unchecked["margin_left_type"])

        elif self.cb.currentText() == "::indicator":
            self.color.setText(self.data.indicator["color"])

            self.image.setText(self.data.indicator["image"])
            self.outline.setText(self.data.indicator["outline"])

            self.width_spin.setValue(int(self.data.indicator["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator["width_type"])
            self.height_spin.setValue(int(self.data.indicator["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator["height_type"])

            self.f_family_edit.setText(self.data.indicator["font_family"])
            self.f_size_spin.setText(self.data.indicator["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator["font_style"])

            self.line_height_edit.setText(self.data.indicator["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator["background_color"])

            self.border.setText(self.data.indicator["border"])
            self.border_width.setValue(int(self.data.indicator["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator["border_style"])
            self.border_color.setText(self.data.indicator["border_color"])

            self.border_right.setText(self.data.indicator["border_right"])
            self.border_left.setText(self.data.indicator["border_left"])
            self.border_bottom.setText(self.data.indicator["border_bottom"])
            self.border_top.setText(self.data.indicator["border_top"])

            self.border_radius.setText(self.data.indicator["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator["margin_left_type"])

        elif self.cb.currentText() == "::indicator:checked":
            self.color.setText(self.data.indicator_checked["color"])

            self.image.setText(self.data.indicator_checked["image"])
            self.outline.setText(self.data.indicator_checked["outline"])

            self.width_spin.setValue(int(self.data.indicator_checked["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator_checked["width_type"])
            self.height_spin.setValue(int(self.data.indicator_checked["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator_checked["height_type"])

            self.f_family_edit.setText(self.data.indicator_checked["font_family"])
            self.f_size_spin.setText(self.data.indicator_checked["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator_checked["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator_checked["font_style"])

            self.line_height_edit.setText(self.data.indicator_checked["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator_checked["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator_checked["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator_checked["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator_checked["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator_checked["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator_checked["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator_checked["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator_checked["background_color"])

            self.border.setText(self.data.indicator_checked["border"])
            self.border_width.setValue(int(self.data.indicator_checked["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator_checked["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator_checked["border_style"])
            self.border_color.setText(self.data.indicator_checked["border_color"])

            self.border_right.setText(self.data.indicator_checked["border_right"])
            self.border_left.setText(self.data.indicator_checked["border_left"])
            self.border_bottom.setText(self.data.indicator_checked["border_bottom"])
            self.border_top.setText(self.data.indicator_checked["border_top"])

            self.border_radius.setText(self.data.indicator_checked["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator_checked["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator_checked["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator_checked["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator_checked["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator_checked["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator_checked["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator_checked["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator_checked["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator_checked["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator_checked["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator_checked["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator_checked["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator_checked["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator_checked["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator_checked["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator_checked["margin_left_type"])

        elif self.cb.currentText() == "::indicator:checked:hover":
            self.color.setText(self.data.indicator_checked_hover["color"])

            self.image.setText(self.data.indicator_checked_hover["image"])
            self.outline.setText(self.data.indicator_checked_hover["outline"])

            self.width_spin.setValue(int(self.data.indicator_checked_hover["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator_checked_hover["width_type"])
            self.height_spin.setValue(int(self.data.indicator_checked_hover["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator_checked_hover["height_type"])

            self.f_family_edit.setText(self.data.indicator_checked_hover["font_family"])
            self.f_size_spin.setText(self.data.indicator_checked_hover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator_checked_hover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator_checked_hover["font_style"])

            self.line_height_edit.setText(self.data.indicator_checked_hover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator_checked_hover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator_checked_hover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator_checked_hover["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator_checked_hover["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator_checked_hover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator_checked_hover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator_checked_hover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator_checked_hover["background_color"])

            self.border.setText(self.data.indicator_checked_hover["border"])
            self.border_width.setValue(int(self.data.indicator_checked_hover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator_checked_hover["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator_checked_hover["border_style"])
            self.border_color.setText(self.data.indicator_checked_hover["border_color"])

            self.border_right.setText(self.data.indicator_checked_hover["border_right"])
            self.border_left.setText(self.data.indicator_checked_hover["border_left"])
            self.border_bottom.setText(self.data.indicator_checked_hover["border_bottom"])
            self.border_top.setText(self.data.indicator_checked_hover["border_top"])

            self.border_radius.setText(self.data.indicator_checked_hover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator_checked_hover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator_checked_hover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator_checked_hover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator_checked_hover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator_checked_hover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator_checked_hover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator_checked_hover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator_checked_hover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator_checked_hover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator_checked_hover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator_checked_hover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator_checked_hover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator_checked_hover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator_checked_hover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator_checked_hover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator_checked_hover["margin_left_type"])

        elif self.cb.currentText() == "::indicator:checked:pressed":
            self.color.setText(self.data.indicator_checked_pressed["color"])

            self.image.setText(self.data.indicator_checked_pressed["image"])
            self.outline.setText(self.data.indicator_checked_pressed["outline"])

            self.width_spin.setValue(int(self.data.indicator_checked_pressed["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator_checked_pressed["width_type"])
            self.height_spin.setValue(int(self.data.indicator_checked_pressed["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator_checked_pressed["height_type"])

            self.f_family_edit.setText(self.data.indicator_checked_pressed["font_family"])
            self.f_size_spin.setText(self.data.indicator_checked_pressed["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator_checked_pressed["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator_checked_pressed["font_style"])

            self.line_height_edit.setText(self.data.indicator_checked_pressed["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator_checked_pressed["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator_checked_pressed["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator_checked_pressed["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator_checked_pressed["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator_checked_pressed["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator_checked_pressed["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator_checked_pressed["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator_checked_pressed["background_color"])

            self.border.setText(self.data.indicator_checked_pressed["border"])
            self.border_width.setValue(int(self.data.indicator_checked_pressed["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator_checked_pressed["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator_checked_pressed["border_style"])
            self.border_color.setText(self.data.indicator_checked_pressed["border_color"])

            self.border_right.setText(self.data.indicator_checked_pressed["border_right"])
            self.border_left.setText(self.data.indicator_checked_pressed["border_left"])
            self.border_bottom.setText(self.data.indicator_checked_pressed["border_bottom"])
            self.border_top.setText(self.data.indicator_checked_pressed["border_top"])

            self.border_radius.setText(self.data.indicator_checked_pressed["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator_checked_pressed["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator_checked_pressed["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator_checked_pressed["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator_checked_pressed["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator_checked_pressed["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator_checked_pressed["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator_checked_pressed["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator_checked_pressed["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator_checked_pressed["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator_checked_pressed["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator_checked_pressed["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator_checked_pressed["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator_checked_pressed["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator_checked_pressed["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator_checked_pressed["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator_checked_pressed["margin_left_type"])

        elif self.cb.currentText() == "::indicator:unchecked":
            self.color.setText(self.data.indicator_unchecked["color"])

            self.image.setText(self.data.indicator_unchecked["image"])
            self.outline.setText(self.data.indicator_unchecked["outline"])

            self.width_spin.setValue(int(self.data.indicator_unchecked["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator_unchecked["width_type"])
            self.height_spin.setValue(int(self.data.indicator_unchecked["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator_unchecked["height_type"])

            self.f_family_edit.setText(self.data.indicator_unchecked["font_family"])
            self.f_size_spin.setText(self.data.indicator_unchecked["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator_unchecked["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator_unchecked["font_style"])

            self.line_height_edit.setText(self.data.indicator_unchecked["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator_unchecked["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator_unchecked["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator_unchecked["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator_unchecked["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator_unchecked["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator_unchecked["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator_unchecked["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator_unchecked["background_color"])

            self.border.setText(self.data.indicator_unchecked["border"])
            self.border_width.setValue(int(self.data.indicator_unchecked["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator_unchecked["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator_unchecked["border_style"])
            self.border_color.setText(self.data.indicator_unchecked["border_color"])

            self.border_right.setText(self.data.indicator_unchecked["border_right"])
            self.border_left.setText(self.data.indicator_unchecked["border_left"])
            self.border_bottom.setText(self.data.indicator_unchecked["border_bottom"])
            self.border_top.setText(self.data.indicator_unchecked["border_top"])

            self.border_radius.setText(self.data.indicator_unchecked["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator_unchecked["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator_unchecked["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator_unchecked["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator_unchecked["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator_unchecked["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator_unchecked["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator_unchecked["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator_unchecked["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator_unchecked["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator_unchecked["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator_unchecked["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator_unchecked["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator_unchecked["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator_unchecked["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator_unchecked["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator_unchecked["margin_left_type"])

        elif self.cb.currentText() == "::indicator:unchecked:hover":
            self.color.setText(self.data.indicator_unchecked_hover["color"])

            self.image.setText(self.data.indicator_unchecked_hover["image"])
            self.outline.setText(self.data.indicator_unchecked_hover["outline"])

            self.width_spin.setValue(int(self.data.indicator_unchecked_hover["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator_unchecked_hover["width_type"])
            self.height_spin.setValue(int(self.data.indicator_unchecked_hover["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator_unchecked_hover["height_type"])

            self.f_family_edit.setText(self.data.indicator_unchecked_hover["font_family"])
            self.f_size_spin.setText(self.data.indicator_unchecked_hover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator_unchecked_hover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator_unchecked_hover["font_style"])

            self.line_height_edit.setText(self.data.indicator_unchecked_hover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator_unchecked_hover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator_unchecked_hover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator_unchecked_hover["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator_unchecked_hover["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator_unchecked_hover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator_unchecked_hover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator_unchecked_hover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator_unchecked_hover["background_color"])

            self.border.setText(self.data.indicator_unchecked_hover["border"])
            self.border_width.setValue(int(self.data.indicator_unchecked_hover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator_unchecked_hover["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator_unchecked_hover["border_style"])
            self.border_color.setText(self.data.indicator_unchecked_hover["border_color"])

            self.border_right.setText(self.data.indicator_unchecked_hover["border_right"])
            self.border_left.setText(self.data.indicator_unchecked_hover["border_left"])
            self.border_bottom.setText(self.data.indicator_unchecked_hover["border_bottom"])
            self.border_top.setText(self.data.indicator_unchecked_hover["border_top"])

            self.border_radius.setText(self.data.indicator_unchecked_hover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator_unchecked_hover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator_unchecked_hover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator_unchecked_hover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator_unchecked_hover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator_unchecked_hover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator_unchecked_hover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator_unchecked_hover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator_unchecked_hover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator_unchecked_hover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator_unchecked_hover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator_unchecked_hover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator_unchecked_hover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator_unchecked_hover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator_unchecked_hover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator_unchecked_hover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator_unchecked_hover["margin_left_type"])

        elif self.cb.currentText() == "::indicator:unchecked:pressed":
            self.color.setText(self.data.indicator_unchecked_pressed["color"])

            self.image.setText(self.data.indicator_unchecked_pressed["image"])
            self.outline.setText(self.data.indicator_unchecked_pressed["outline"])

            self.width_spin.setValue(int(self.data.indicator_unchecked_pressed["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator_unchecked_pressed["width_type"])
            self.height_spin.setValue(int(self.data.indicator_unchecked_pressed["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator_unchecked_pressed["height_type"])

            self.f_family_edit.setText(self.data.indicator_unchecked_pressed["font_family"])
            self.f_size_spin.setText(self.data.indicator_unchecked_pressed["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator_unchecked_pressed["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator_unchecked_pressed["font_style"])

            self.line_height_edit.setText(self.data.indicator_unchecked_pressed["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator_unchecked_pressed["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator_unchecked_pressed["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator_unchecked_pressed["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator_unchecked_pressed["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator_unchecked_pressed["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator_unchecked_pressed["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator_unchecked_pressed["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator_unchecked_pressed["background_color"])

            self.border.setText(self.data.indicator_unchecked_pressed["border"])
            self.border_width.setValue(int(self.data.indicator_unchecked_pressed["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator_unchecked_pressed["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator_unchecked_pressed["border_style"])
            self.border_color.setText(self.data.indicator_unchecked_pressed["border_color"])

            self.border_right.setText(self.data.indicator_unchecked_pressed["border_right"])
            self.border_left.setText(self.data.indicator_unchecked_pressed["border_left"])
            self.border_bottom.setText(self.data.indicator_unchecked_pressed["border_bottom"])
            self.border_top.setText(self.data.indicator_unchecked_pressed["border_top"])

            self.border_radius.setText(self.data.indicator_unchecked_pressed["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator_unchecked_pressed["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator_unchecked_pressed["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator_unchecked_pressed["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator_unchecked_pressed["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator_unchecked_pressed["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator_unchecked_pressed["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator_unchecked_pressed["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator_unchecked_pressed["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator_unchecked_pressed["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator_unchecked_pressed["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator_unchecked_pressed["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator_unchecked_pressed["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator_unchecked_pressed["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator_unchecked_pressed["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator_unchecked_pressed["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator_unchecked_pressed["margin_left_type"])

        elif self.cb.currentText() == "::checked:hover":
            self.color.setText(self.data.checked_hover["color"])

            self.image.setText(self.data.checked_hover["image"])
            self.outline.setText(self.data.checked_hover["outline"])

            self.width_spin.setValue(int(self.data.checked_hover["width_value"]))
            self.width_cb.setCurrentText(self.data.checked_hover["width_type"])
            self.height_spin.setValue(int(self.data.checked_hover["height_value"]))
            self.height_cb.setCurrentText(self.data.checked_hover["height_type"])

            self.f_family_edit.setText(self.data.checked_hover["font_family"])
            self.f_size_spin.setText(self.data.checked_hover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.checked_hover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.checked_hover["font_style"])

            self.line_height_edit.setText(self.data.checked_hover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.checked_hover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.checked_hover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.checked_hover["text_align"])
            self.text_decoration.setCurrentText(self.data.checked_hover["text_decoration"])
            self.text_transform.setCurrentText(self.data.checked_hover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.checked_hover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.checked_hover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.checked_hover["background_color"])

            self.border.setText(self.data.checked_hover["border"])
            self.border_width.setValue(int(self.data.checked_hover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.checked_hover["border_width_type"])

            self.border_style.setCurrentText(self.data.checked_hover["border_style"])
            self.border_color.setText(self.data.checked_hover["border_color"])

            self.border_right.setText(self.data.checked_hover["border_right"])
            self.border_left.setText(self.data.checked_hover["border_left"])
            self.border_bottom.setText(self.data.checked_hover["border_bottom"])
            self.border_top.setText(self.data.checked_hover["border_top"])

            self.border_radius.setText(self.data.checked_hover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.checked_hover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.checked_hover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.checked_hover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.checked_hover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.checked_hover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.checked_hover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.checked_hover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.checked_hover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.checked_hover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.checked_hover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.checked_hover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.checked_hover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.checked_hover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.checked_hover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.checked_hover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.checked_hover["margin_left_type"])

        elif self.cb.currentText() == "::unchecked:hover":
            self.color.setText(self.data.unchecked_hover["color"])

            self.image.setText(self.data.unchecked_hover["image"])
            self.outline.setText(self.data.unchecked_hover["outline"])

            self.width_spin.setValue(int(self.data.unchecked_hover["width_value"]))
            self.width_cb.setCurrentText(self.data.unchecked_hover["width_type"])
            self.height_spin.setValue(int(self.data.unchecked_hover["height_value"]))
            self.height_cb.setCurrentText(self.data.unchecked_hover["height_type"])

            self.f_family_edit.setText(self.data.unchecked_hover["font_family"])
            self.f_size_spin.setText(self.data.unchecked_hover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.unchecked_hover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.unchecked_hover["font_style"])

            self.line_height_edit.setText(self.data.unchecked_hover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.unchecked_hover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.unchecked_hover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.unchecked_hover["text_align"])
            self.text_decoration.setCurrentText(self.data.unchecked_hover["text_decoration"])
            self.text_transform.setCurrentText(self.data.unchecked_hover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.unchecked_hover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.unchecked_hover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.unchecked_hover["background_color"])

            self.border.setText(self.data.unchecked_hover["border"])
            self.border_width.setValue(int(self.data.unchecked_hover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.unchecked_hover["border_width_type"])

            self.border_style.setCurrentText(self.data.unchecked_hover["border_style"])
            self.border_color.setText(self.data.unchecked_hover["border_color"])

            self.border_right.setText(self.data.unchecked_hover["border_right"])
            self.border_left.setText(self.data.unchecked_hover["border_left"])
            self.border_bottom.setText(self.data.unchecked_hover["border_bottom"])
            self.border_top.setText(self.data.unchecked_hover["border_top"])

            self.border_radius.setText(self.data.unchecked_hover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.unchecked_hover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.unchecked_hover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.unchecked_hover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.unchecked_hover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.unchecked_hover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.unchecked_hover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.unchecked_hover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.unchecked_hover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.unchecked_hover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.unchecked_hover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.unchecked_hover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.unchecked_hover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.unchecked_hover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.unchecked_hover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.unchecked_hover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.unchecked_hover["margin_left_type"])

        elif self.cb.currentText() == "::indicator:indeterminate:hover":
            self.color.setText(self.data.indicator_indeterminate_hover["color"])

            self.image.setText(self.data.indicator_indeterminate_hover["image"])
            self.outline.setText(self.data.indicator_indeterminate_hover["outline"])

            self.width_spin.setValue(int(self.data.indicator_indeterminate_hover["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator_indeterminate_hover["width_type"])
            self.height_spin.setValue(int(self.data.indicator_indeterminate_hover["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator_indeterminate_hover["height_type"])

            self.f_family_edit.setText(self.data.indicator_indeterminate_hover["font_family"])
            self.f_size_spin.setText(self.data.indicator_indeterminate_hover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator_indeterminate_hover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator_indeterminate_hover["font_style"])

            self.line_height_edit.setText(self.data.indicator_indeterminate_hover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator_indeterminate_hover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator_indeterminate_hover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator_indeterminate_hover["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator_indeterminate_hover["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator_indeterminate_hover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator_indeterminate_hover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator_indeterminate_hover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator_indeterminate_hover["background_color"])

            self.border.setText(self.data.indicator_indeterminate_hover["border"])
            self.border_width.setValue(int(self.data.indicator_indeterminate_hover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator_indeterminate_hover["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator_indeterminate_hover["border_style"])
            self.border_color.setText(self.data.indicator_indeterminate_hover["border_color"])

            self.border_right.setText(self.data.indicator_indeterminate_hover["border_right"])
            self.border_left.setText(self.data.indicator_indeterminate_hover["border_left"])
            self.border_bottom.setText(self.data.indicator_indeterminate_hover["border_bottom"])
            self.border_top.setText(self.data.indicator_indeterminate_hover["border_top"])

            self.border_radius.setText(self.data.indicator_indeterminate_hover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator_indeterminate_hover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator_indeterminate_hover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator_indeterminate_hover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator_indeterminate_hover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator_indeterminate_hover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator_indeterminate_hover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator_indeterminate_hover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator_indeterminate_hover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator_indeterminate_hover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator_indeterminate_hover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator_indeterminate_hover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator_indeterminate_hover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator_indeterminate_hover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator_indeterminate_hover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator_indeterminate_hover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator_indeterminate_hover["margin_left_type"])

        elif self.cb.currentText() == "::indicator:indeterminate:pressed":
            self.color.setText(self.data.indicator_indeterminate_pressed["color"])

            self.image.setText(self.data.indicator_indeterminate_pressed["image"])
            self.outline.setText(self.data.indicator_indeterminate_pressed["outline"])

            self.width_spin.setValue(int(self.data.indicator_indeterminate_pressed["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator_indeterminate_pressed["width_type"])
            self.height_spin.setValue(int(self.data.indicator_indeterminate_pressed["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator_indeterminate_pressed["height_type"])

            self.f_family_edit.setText(self.data.indicator_indeterminate_pressed["font_family"])
            self.f_size_spin.setText(self.data.indicator_indeterminate_pressed["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator_indeterminate_pressed["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator_indeterminate_pressed["font_style"])

            self.line_height_edit.setText(self.data.indicator_indeterminate_pressed["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator_indeterminate_pressed["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator_indeterminate_pressed["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator_indeterminate_pressed["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator_indeterminate_pressed["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator_indeterminate_pressed["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator_indeterminate_pressed["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator_indeterminate_pressed["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator_indeterminate_pressed["background_color"])

            self.border.setText(self.data.indicator_indeterminate_pressed["border"])
            self.border_width.setValue(int(self.data.indicator_indeterminate_pressed["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator_indeterminate_pressed["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator_indeterminate_pressed["border_style"])
            self.border_color.setText(self.data.indicator_indeterminate_pressed["border_color"])

            self.border_right.setText(self.data.indicator_indeterminate_pressed["border_right"])
            self.border_left.setText(self.data.indicator_indeterminate_pressed["border_left"])
            self.border_bottom.setText(self.data.indicator_indeterminate_pressed["border_bottom"])
            self.border_top.setText(self.data.indicator_indeterminate_pressed["border_top"])

            self.border_radius.setText(self.data.indicator_indeterminate_pressed["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator_indeterminate_pressed["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator_indeterminate_pressed["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator_indeterminate_pressed["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator_indeterminate_pressed["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator_indeterminate_pressed["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator_indeterminate_pressed["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator_indeterminate_pressed["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator_indeterminate_pressed["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator_indeterminate_pressed["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator_indeterminate_pressed["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator_indeterminate_pressed["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator_indeterminate_pressed["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator_indeterminate_pressed["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator_indeterminate_pressed["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator_indeterminate_pressed["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator_indeterminate_pressed["margin_left_type"])

        elif self.cb.currentText() == ":editable":
            self.color.setText(self.data.editable["color"])

            self.image.setText(self.data.editable["image"])
            self.outline.setText(self.data.editable["outline"])

            self.width_spin.setValue(int(self.data.editable["width_value"]))
            self.width_cb.setCurrentText(self.data.editable["width_type"])
            self.height_spin.setValue(int(self.data.editable["height_value"]))
            self.height_cb.setCurrentText(self.data.editable["height_type"])

            self.f_family_edit.setText(self.data.editable["font_family"])
            self.f_size_spin.setText(self.data.editable["font_size"])
            self.f_weight_cb.setCurrentText(self.data.editable["font_weight"])
            self.f_style_cb.setCurrentText(self.data.editable["font_style"])

            self.line_height_edit.setText(self.data.editable["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.editable["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.editable["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.editable["text_align"])
            self.text_decoration.setCurrentText(self.data.editable["text_decoration"])
            self.text_transform.setCurrentText(self.data.editable["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.editable["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.editable["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.editable["background_color"])

            self.border.setText(self.data.editable["border"])
            self.border_width.setValue(int(self.data.editable["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.editable["border_width_type"])

            self.border_style.setCurrentText(self.data.editable["border_style"])
            self.border_color.setText(self.data.editable["border_color"])

            self.border_right.setText(self.data.editable["border_right"])
            self.border_left.setText(self.data.editable["border_left"])
            self.border_bottom.setText(self.data.editable["border_bottom"])
            self.border_top.setText(self.data.editable["border_top"])

            self.border_radius.setText(self.data.editable["border_radius"])

            self.padding_top_spb.setValue(int(self.data.editable["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.editable["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.editable["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.editable["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.editable["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.editable["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.editable["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.editable["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.editable["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.editable["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.editable["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.editable["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.editable["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.editable["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.editable["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.editable["margin_left_type"])

        elif self.cb.currentText() == ":!editable":
            self.color.setText(self.data.u_editable["color"])

            self.image.setText(self.data.u_editable["image"])
            self.outline.setText(self.data.u_editable["outline"])

            self.width_spin.setValue(int(self.data.u_editable["width_value"]))
            self.width_cb.setCurrentText(self.data.u_editable["width_type"])
            self.height_spin.setValue(int(self.data.u_editable["height_value"]))
            self.height_cb.setCurrentText(self.data.u_editable["height_type"])

            self.f_family_edit.setText(self.data.u_editable["font_family"])
            self.f_size_spin.setText(self.data.u_editable["font_size"])
            self.f_weight_cb.setCurrentText(self.data.u_editable["font_weight"])
            self.f_style_cb.setCurrentText(self.data.u_editable["font_style"])

            self.line_height_edit.setText(self.data.u_editable["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.u_editable["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.u_editable["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.u_editable["text_align"])
            self.text_decoration.setCurrentText(self.data.u_editable["text_decoration"])
            self.text_transform.setCurrentText(self.data.u_editable["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.u_editable["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.u_editable["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.u_editable["background_color"])

            self.border.setText(self.data.u_editable["border"])
            self.border_width.setValue(int(self.data.u_editable["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.u_editable["border_width_type"])

            self.border_style.setCurrentText(self.data.u_editable["border_style"])
            self.border_color.setText(self.data.u_editable["border_color"])

            self.border_right.setText(self.data.u_editable["border_right"])
            self.border_left.setText(self.data.u_editable["border_left"])
            self.border_bottom.setText(self.data.u_editable["border_bottom"])
            self.border_top.setText(self.data.u_editable["border_top"])

            self.border_radius.setText(self.data.u_editable["border_radius"])

            self.padding_top_spb.setValue(int(self.data.u_editable["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.u_editable["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.u_editable["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.u_editable["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.u_editable["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.u_editable["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.u_editable["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.u_editable["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.u_editable["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.u_editable["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.u_editable["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.u_editable["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.u_editable["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.u_editable["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.u_editable["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.u_editable["margin_left_type"])

        elif self.cb.currentText() == ":!editable:on":
            self.color.setText(self.data.u_editable_on["color"])

            self.image.setText(self.data.u_editable_on["image"])
            self.outline.setText(self.data.u_editable_on["outline"])

            self.width_spin.setValue(int(self.data.u_editable_on["width_value"]))
            self.width_cb.setCurrentText(self.data.u_editable_on["width_type"])
            self.height_spin.setValue(int(self.data.u_editable_on["height_value"]))
            self.height_cb.setCurrentText(self.data.u_editable_on["height_type"])

            self.f_family_edit.setText(self.data.u_editable_on["font_family"])
            self.f_size_spin.setText(self.data.u_editable_on["font_size"])
            self.f_weight_cb.setCurrentText(self.data.u_editable_on["font_weight"])
            self.f_style_cb.setCurrentText(self.data.u_editable_on["font_style"])

            self.line_height_edit.setText(self.data.u_editable_on["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.u_editable_on["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.u_editable_on["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.u_editable_on["text_align"])
            self.text_decoration.setCurrentText(self.data.u_editable_on["text_decoration"])
            self.text_transform.setCurrentText(self.data.u_editable_on["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.u_editable_on["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.u_editable_on["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.u_editable_on["background_color"])

            self.border.setText(self.data.u_editable_on["border"])
            self.border_width.setValue(int(self.data.u_editable_on["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.u_editable_on["border_width_type"])

            self.border_style.setCurrentText(self.data.u_editable_on["border_style"])
            self.border_color.setText(self.data.u_editable_on["border_color"])

            self.border_right.setText(self.data.u_editable_on["border_right"])
            self.border_left.setText(self.data.u_editable_on["border_left"])
            self.border_bottom.setText(self.data.u_editable_on["border_bottom"])
            self.border_top.setText(self.data.u_editable_on["border_top"])

            self.border_radius.setText(self.data.u_editable_on["border_radius"])

            self.padding_top_spb.setValue(int(self.data.u_editable_on["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.u_editable_on["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.u_editable_on["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.u_editable_on["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.u_editable_on["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.u_editable_on["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.u_editable_on["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.u_editable_on["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.u_editable_on["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.u_editable_on["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.u_editable_on["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.u_editable_on["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.u_editable_on["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.u_editable_on["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.u_editable_on["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.u_editable_on["margin_left_type"])

        elif self.cb.currentText() == "::drop-down":
            self.color.setText(self.data.drop_down["color"])

            self.image.setText(self.data.drop_down["image"])
            self.outline.setText(self.data.drop_down["outline"])

            self.width_spin.setValue(int(self.data.drop_down["width_value"]))
            self.width_cb.setCurrentText(self.data.drop_down["width_type"])
            self.height_spin.setValue(int(self.data.drop_down["height_value"]))
            self.height_cb.setCurrentText(self.data.drop_down["height_type"])

            self.f_family_edit.setText(self.data.drop_down["font_family"])
            self.f_size_spin.setText(self.data.drop_down["font_size"])
            self.f_weight_cb.setCurrentText(self.data.drop_down["font_weight"])
            self.f_style_cb.setCurrentText(self.data.drop_down["font_style"])

            self.line_height_edit.setText(self.data.drop_down["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.drop_down["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.drop_down["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.drop_down["text_align"])
            self.text_decoration.setCurrentText(self.data.drop_down["text_decoration"])
            self.text_transform.setCurrentText(self.data.drop_down["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.drop_down["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.drop_down["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.drop_down["background_color"])

            self.border.setText(self.data.drop_down["border"])
            self.border_width.setValue(int(self.data.drop_down["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.drop_down["border_width_type"])

            self.border_style.setCurrentText(self.data.drop_down["border_style"])
            self.border_color.setText(self.data.drop_down["border_color"])

            self.border_right.setText(self.data.drop_down["border_right"])
            self.border_left.setText(self.data.drop_down["border_left"])
            self.border_bottom.setText(self.data.drop_down["border_bottom"])
            self.border_top.setText(self.data.drop_down["border_top"])

            self.border_radius.setText(self.data.drop_down["border_radius"])

            self.padding_top_spb.setValue(int(self.data.drop_down["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.drop_down["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.drop_down["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.drop_down["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.drop_down["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.drop_down["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.drop_down["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.drop_down["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.drop_down["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.drop_down["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.drop_down["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.drop_down["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.drop_down["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.drop_down["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.drop_down["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.drop_down["margin_left_type"])

        elif self.cb.currentText() == "::drop-arrow":
            self.color.setText(self.data.drop_arrow["color"])

            self.image.setText(self.data.drop_arrow["image"])
            self.outline.setText(self.data.drop_arrow["outline"])

            self.width_spin.setValue(int(self.data.drop_arrow["width_value"]))
            self.width_cb.setCurrentText(self.data.drop_arrow["width_type"])
            self.height_spin.setValue(int(self.data.drop_arrow["height_value"]))
            self.height_cb.setCurrentText(self.data.drop_arrow["height_type"])

            self.f_family_edit.setText(self.data.drop_arrow["font_family"])
            self.f_size_spin.setText(self.data.drop_arrow["font_size"])
            self.f_weight_cb.setCurrentText(self.data.drop_arrow["font_weight"])
            self.f_style_cb.setCurrentText(self.data.drop_arrow["font_style"])

            self.line_height_edit.setText(self.data.drop_arrow["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.drop_arrow["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.drop_arrow["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.drop_arrow["text_align"])
            self.text_decoration.setCurrentText(self.data.drop_arrow["text_decoration"])
            self.text_transform.setCurrentText(self.data.drop_arrow["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.drop_arrow["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.drop_arrow["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.drop_arrow["background_color"])

            self.border.setText(self.data.drop_arrow["border"])
            self.border_width.setValue(int(self.data.drop_arrow["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.drop_arrow["border_width_type"])

            self.border_style.setCurrentText(self.data.drop_arrow["border_style"])
            self.border_color.setText(self.data.drop_arrow["border_color"])

            self.border_right.setText(self.data.drop_arrow["border_right"])
            self.border_left.setText(self.data.drop_arrow["border_left"])
            self.border_bottom.setText(self.data.drop_arrow["border_bottom"])
            self.border_top.setText(self.data.drop_arrow["border_top"])

            self.border_radius.setText(self.data.drop_arrow["border_radius"])

            self.padding_top_spb.setValue(int(self.data.drop_arrow["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.drop_arrow["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.drop_arrow["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.drop_arrow["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.drop_arrow["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.drop_arrow["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.drop_arrow["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.drop_arrow["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.drop_arrow["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.drop_arrow["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.drop_arrow["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.drop_arrow["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.drop_arrow["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.drop_arrow["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.drop_arrow["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.drop_arrow["margin_left_type"])

        elif self.cb.currentText() == "::drop-arrow:on":
            self.color.setText(self.data.drop_arrow_on["color"])

            self.image.setText(self.data.drop_arrow_on["image"])
            self.outline.setText(self.data.drop_arrow_on["outline"])

            self.width_spin.setValue(int(self.data.drop_arrow_on["width_value"]))
            self.width_cb.setCurrentText(self.data.drop_arrow_on["width_type"])
            self.height_spin.setValue(int(self.data.drop_arrow_on["height_value"]))
            self.height_cb.setCurrentText(self.data.drop_arrow_on["height_type"])

            self.f_family_edit.setText(self.data.drop_arrow_on["font_family"])
            self.f_size_spin.setText(self.data.drop_arrow_on["font_size"])
            self.f_weight_cb.setCurrentText(self.data.drop_arrow_on["font_weight"])
            self.f_style_cb.setCurrentText(self.data.drop_arrow_on["font_style"])

            self.line_height_edit.setText(self.data.drop_arrow_on["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.drop_arrow_on["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.drop_arrow_on["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.drop_arrow_on["text_align"])
            self.text_decoration.setCurrentText(self.data.drop_arrow_on["text_decoration"])
            self.text_transform.setCurrentText(self.data.drop_arrow_on["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.drop_arrow_on["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.drop_arrow_on["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.drop_arrow_on["background_color"])

            self.border.setText(self.data.drop_arrow_on["border"])
            self.border_width.setValue(int(self.data.drop_arrow_on["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.drop_arrow_on["border_width_type"])

            self.border_style.setCurrentText(self.data.drop_arrow_on["border_style"])
            self.border_color.setText(self.data.drop_arrow_on["border_color"])

            self.border_right.setText(self.data.drop_arrow_on["border_right"])
            self.border_left.setText(self.data.drop_arrow_on["border_left"])
            self.border_bottom.setText(self.data.drop_arrow_on["border_bottom"])
            self.border_top.setText(self.data.drop_arrow_on["border_top"])

            self.border_radius.setText(self.data.drop_arrow_on["border_radius"])

            self.padding_top_spb.setValue(int(self.data.drop_arrow_on["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.drop_arrow_on["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.drop_arrow_on["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.drop_arrow_on["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.drop_arrow_on["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.drop_arrow_on["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.drop_arrow_on["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.drop_arrow_on["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.drop_arrow_on["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.drop_arrow_on["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.drop_arrow_on["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.drop_arrow_on["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.drop_arrow_on["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.drop_arrow_on["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.drop_arrow_on["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.drop_arrow_on["margin_left_type"])

        elif self.cb.currentText() == "::drop-down:editable":
            self.color.setText(self.data.drop_down_editable["color"])

            self.image.setText(self.data.drop_down_editable["image"])
            self.outline.setText(self.data.drop_down_editable["outline"])

            self.width_spin.setValue(int(self.data.drop_down_editable["width_value"]))
            self.width_cb.setCurrentText(self.data.drop_down_editable["width_type"])
            self.height_spin.setValue(int(self.data.drop_down_editable["height_value"]))
            self.height_cb.setCurrentText(self.data.drop_down_editable["height_type"])

            self.f_family_edit.setText(self.data.drop_down_editable["font_family"])
            self.f_size_spin.setText(self.data.drop_down_editable["font_size"])
            self.f_weight_cb.setCurrentText(self.data.drop_down_editable["font_weight"])
            self.f_style_cb.setCurrentText(self.data.drop_down_editable["font_style"])

            self.line_height_edit.setText(self.data.drop_down_editable["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.drop_down_editable["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.drop_down_editable["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.drop_down_editable["text_align"])
            self.text_decoration.setCurrentText(self.data.drop_down_editable["text_decoration"])
            self.text_transform.setCurrentText(self.data.drop_down_editable["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.drop_down_editable["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.drop_down_editable["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.drop_down_editable["background_color"])

            self.border.setText(self.data.drop_down_editable["border"])
            self.border_width.setValue(int(self.data.drop_down_editable["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.drop_down_editable["border_width_type"])

            self.border_style.setCurrentText(self.data.drop_down_editable["border_style"])
            self.border_color.setText(self.data.drop_down_editable["border_color"])

            self.border_right.setText(self.data.drop_down_editable["border_right"])
            self.border_left.setText(self.data.drop_down_editable["border_left"])
            self.border_bottom.setText(self.data.drop_down_editable["border_bottom"])
            self.border_top.setText(self.data.drop_down_editable["border_top"])

            self.border_radius.setText(self.data.drop_down_editable["border_radius"])

            self.padding_top_spb.setValue(int(self.data.drop_down_editable["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.drop_down_editable["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.drop_down_editable["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.drop_down_editable["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.drop_down_editable["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.drop_down_editable["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.drop_down_editable["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.drop_down_editable["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.drop_down_editable["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.drop_down_editable["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.drop_down_editable["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.drop_down_editable["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.drop_down_editable["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.drop_down_editable["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.drop_down_editable["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.drop_down_editable["margin_left_type"])

        elif self.cb.currentText() == "::drop-down:editable:on":
            self.color.setText(self.data.drop_down_editable_on["color"])

            self.image.setText(self.data.drop_down_editable_on["image"])
            self.outline.setText(self.data.drop_down_editable_on["outline"])

            self.width_spin.setValue(int(self.data.drop_down_editable_on["width_value"]))
            self.width_cb.setCurrentText(self.data.drop_down_editable_on["width_type"])
            self.height_spin.setValue(int(self.data.drop_down_editable_on["height_value"]))
            self.height_cb.setCurrentText(self.data.drop_down_editable_on["height_type"])

            self.f_family_edit.setText(self.data.drop_down_editable_on["font_family"])
            self.f_size_spin.setText(self.data.drop_down_editable_on["font_size"])
            self.f_weight_cb.setCurrentText(self.data.drop_down_editable_on["font_weight"])
            self.f_style_cb.setCurrentText(self.data.drop_down_editable_on["font_style"])

            self.line_height_edit.setText(self.data.drop_down_editable_on["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.drop_down_editable_on["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.drop_down_editable_on["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.drop_down_editable_on["text_align"])
            self.text_decoration.setCurrentText(self.data.drop_down_editable_on["text_decoration"])
            self.text_transform.setCurrentText(self.data.drop_down_editable_on["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.drop_down_editable_on["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.drop_down_editable_on["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.drop_down_editable_on["background_color"])

            self.border.setText(self.data.drop_down_editable_on["border"])
            self.border_width.setValue(int(self.data.drop_down_editable_on["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.drop_down_editable_on["border_width_type"])

            self.border_style.setCurrentText(self.data.drop_down_editable_on["border_style"])
            self.border_color.setText(self.data.drop_down_editable_on["border_color"])

            self.border_right.setText(self.data.drop_down_editable_on["border_right"])
            self.border_left.setText(self.data.drop_down_editable_on["border_left"])
            self.border_bottom.setText(self.data.drop_down_editable_on["border_bottom"])
            self.border_top.setText(self.data.drop_down_editable_on["border_top"])

            self.border_radius.setText(self.data.drop_down_editable_on["border_radius"])

            self.padding_top_spb.setValue(int(self.data.drop_down_editable_on["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.drop_down_editable_on["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.drop_down_editable_on["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.drop_down_editable_on["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.drop_down_editable_on["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.drop_down_editable_on["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.drop_down_editable_on["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.drop_down_editable_on["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.drop_down_editable_on["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.drop_down_editable_on["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.drop_down_editable_on["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.drop_down_editable_on["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.drop_down_editable_on["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.drop_down_editable_on["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.drop_down_editable_on["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.drop_down_editable_on["margin_left_type"])

        elif self.cb.currentText() == "::up-button":
            self.color.setText(self.data.up_button["color"])

            self.image.setText(self.data.up_button["image"])
            self.outline.setText(self.data.up_button["outline"])

            self.width_spin.setValue(int(self.data.up_button["width_value"]))
            self.width_cb.setCurrentText(self.data.up_button["width_type"])
            self.height_spin.setValue(int(self.data.up_button["height_value"]))
            self.height_cb.setCurrentText(self.data.up_button["height_type"])

            self.f_family_edit.setText(self.data.up_button["font_family"])
            self.f_size_spin.setText(self.data.up_button["font_size"])
            self.f_weight_cb.setCurrentText(self.data.up_button["font_weight"])
            self.f_style_cb.setCurrentText(self.data.up_button["font_style"])

            self.line_height_edit.setText(self.data.up_button["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.up_button["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.up_button["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.up_button["text_align"])
            self.text_decoration.setCurrentText(self.data.up_button["text_decoration"])
            self.text_transform.setCurrentText(self.data.up_button["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.up_button["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.up_button["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.up_button["background_color"])

            self.border.setText(self.data.up_button["border"])
            self.border_width.setValue(int(self.data.up_button["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.up_button["border_width_type"])

            self.border_style.setCurrentText(self.data.up_button["border_style"])
            self.border_color.setText(self.data.up_button["border_color"])

            self.border_right.setText(self.data.up_button["border_right"])
            self.border_left.setText(self.data.up_button["border_left"])
            self.border_bottom.setText(self.data.up_button["border_bottom"])
            self.border_top.setText(self.data.up_button["border_top"])

            self.border_radius.setText(self.data.up_button["border_radius"])

            self.padding_top_spb.setValue(int(self.data.up_button["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.up_button["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.up_button["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.up_button["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.up_button["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.up_button["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.up_button["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.up_button["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.up_button["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.up_button["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.up_button["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.up_button["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.up_button["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.up_button["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.up_button["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.up_button["margin_left_type"])

        elif self.cb.currentText() == "::up-button:hover":
            self.color.setText(self.data.up_button_hover["color"])

            self.image.setText(self.data.up_button_hover["image"])
            self.outline.setText(self.data.up_button_hover["outline"])

            self.width_spin.setValue(int(self.data.up_button_hover["width_value"]))
            self.width_cb.setCurrentText(self.data.up_button_hover["width_type"])
            self.height_spin.setValue(int(self.data.up_button_hover["height_value"]))
            self.height_cb.setCurrentText(self.data.up_button_hover["height_type"])

            self.f_family_edit.setText(self.data.up_button_hover["font_family"])
            self.f_size_spin.setText(self.data.up_button_hover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.up_button_hover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.up_button_hover["font_style"])

            self.line_height_edit.setText(self.data.up_button_hover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.up_button_hover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.up_button_hover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.up_button_hover["text_align"])
            self.text_decoration.setCurrentText(self.data.up_button_hover["text_decoration"])
            self.text_transform.setCurrentText(self.data.up_button_hover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.up_button_hover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.up_button_hover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.up_button_hover["background_color"])

            self.border.setText(self.data.up_button_hover["border"])
            self.border_width.setValue(int(self.data.up_button_hover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.up_button_hover["border_width_type"])

            self.border_style.setCurrentText(self.data.up_button_hover["border_style"])
            self.border_color.setText(self.data.up_button_hover["border_color"])

            self.border_right.setText(self.data.up_button_hover["border_right"])
            self.border_left.setText(self.data.up_button_hover["border_left"])
            self.border_bottom.setText(self.data.up_button_hover["border_bottom"])
            self.border_top.setText(self.data.up_button_hover["border_top"])

            self.border_radius.setText(self.data.up_button_hover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.up_button_hover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.up_button_hover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.up_button_hover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.up_button_hover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.up_button_hover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.up_button_hover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.up_button_hover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.up_button_hover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.up_button_hover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.up_button_hover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.up_button_hover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.up_button_hover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.up_button_hover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.up_button_hover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.up_button_hover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.up_button_hover["margin_left_type"])

        elif self.cb.currentText() == "::up-button:pressed":
            self.color.setText(self.data.up_button_pressed["color"])

            self.image.setText(self.data.up_button_pressed["image"])
            self.outline.setText(self.data.up_button_pressed["outline"])

            self.width_spin.setValue(int(self.data.up_button_pressed["width_value"]))
            self.width_cb.setCurrentText(self.data.up_button_pressed["width_type"])
            self.height_spin.setValue(int(self.data.up_button_pressed["height_value"]))
            self.height_cb.setCurrentText(self.data.up_button_pressed["height_type"])

            self.f_family_edit.setText(self.data.up_button_pressed["font_family"])
            self.f_size_spin.setText(self.data.up_button_pressed["font_size"])
            self.f_weight_cb.setCurrentText(self.data.up_button_pressed["font_weight"])
            self.f_style_cb.setCurrentText(self.data.up_button_pressed["font_style"])

            self.line_height_edit.setText(self.data.up_button_pressed["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.up_button_pressed["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.up_button_pressed["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.up_button_pressed["text_align"])
            self.text_decoration.setCurrentText(self.data.up_button_pressed["text_decoration"])
            self.text_transform.setCurrentText(self.data.up_button_pressed["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.up_button_pressed["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.up_button_pressed["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.up_button_pressed["background_color"])

            self.border.setText(self.data.up_button_pressed["border"])
            self.border_width.setValue(int(self.data.up_button_pressed["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.up_button_pressed["border_width_type"])

            self.border_style.setCurrentText(self.data.up_button_pressed["border_style"])
            self.border_color.setText(self.data.up_button_pressed["border_color"])

            self.border_right.setText(self.data.up_button_pressed["border_right"])
            self.border_left.setText(self.data.up_button_pressed["border_left"])
            self.border_bottom.setText(self.data.up_button_pressed["border_bottom"])
            self.border_top.setText(self.data.up_button_pressed["border_top"])

            self.border_radius.setText(self.data.up_button_pressed["border_radius"])

            self.padding_top_spb.setValue(int(self.data.up_button_pressed["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.up_button_pressed["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.up_button_pressed["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.up_button_pressed["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.up_button_pressed["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.up_button_pressed["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.up_button_pressed["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.up_button_pressed["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.up_button_pressed["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.up_button_pressed["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.up_button_pressed["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.up_button_pressed["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.up_button_pressed["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.up_button_pressed["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.up_button_pressed["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.up_button_pressed["margin_left_type"])

        elif self.cb.currentText() == "::up-arrow":
            self.color.setText(self.data.up_arrow["color"])

            self.image.setText(self.data.up_arrow["image"])
            self.outline.setText(self.data.up_arrow["outline"])

            self.width_spin.setValue(int(self.data.up_arrow["width_value"]))
            self.width_cb.setCurrentText(self.data.up_arrow["width_type"])
            self.height_spin.setValue(int(self.data.up_arrow["height_value"]))
            self.height_cb.setCurrentText(self.data.up_arrow["height_type"])

            self.f_family_edit.setText(self.data.up_arrow["font_family"])
            self.f_size_spin.setText(self.data.up_arrow["font_size"])
            self.f_weight_cb.setCurrentText(self.data.up_arrow["font_weight"])
            self.f_style_cb.setCurrentText(self.data.up_arrow["font_style"])

            self.line_height_edit.setText(self.data.up_arrow["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.up_arrow["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.up_arrow["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.up_arrow["text_align"])
            self.text_decoration.setCurrentText(self.data.up_arrow["text_decoration"])
            self.text_transform.setCurrentText(self.data.up_arrow["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.up_arrow["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.up_arrow["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.up_arrow["background_color"])

            self.border.setText(self.data.up_arrow["border"])
            self.border_width.setValue(int(self.data.up_arrow["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.up_arrow["border_width_type"])

            self.border_style.setCurrentText(self.data.up_arrow["border_style"])
            self.border_color.setText(self.data.up_arrow["border_color"])

            self.border_right.setText(self.data.up_arrow["border_right"])
            self.border_left.setText(self.data.up_arrow["border_left"])
            self.border_bottom.setText(self.data.up_arrow["border_bottom"])
            self.border_top.setText(self.data.up_arrow["border_top"])

            self.border_radius.setText(self.data.up_arrow["border_radius"])

            self.padding_top_spb.setValue(int(self.data.up_arrow["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.up_arrow["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.up_arrow["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.up_arrow["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.up_arrow["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.up_arrow["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.up_arrow["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.up_arrow["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.up_arrow["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.up_arrow["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.up_arrow["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.up_arrow["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.up_arrow["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.up_arrow["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.up_arrow["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.up_arrow["margin_left_type"])

        elif self.cb.currentText() == "::up-arrow:disabled":
            self.color.setText(self.data.up_arrow_disabled["color"])

            self.image.setText(self.data.up_arrow_disabled["image"])
            self.outline.setText(self.data.up_arrow_disabled["outline"])

            self.width_spin.setValue(int(self.data.up_arrow_disabled["width_value"]))
            self.width_cb.setCurrentText(self.data.up_arrow_disabled["width_type"])
            self.height_spin.setValue(int(self.data.up_arrow_disabled["height_value"]))
            self.height_cb.setCurrentText(self.data.up_arrow_disabled["height_type"])

            self.f_family_edit.setText(self.data.up_arrow_disabled["font_family"])
            self.f_size_spin.setText(self.data.up_arrow_disabled["font_size"])
            self.f_weight_cb.setCurrentText(self.data.up_arrow_disabled["font_weight"])
            self.f_style_cb.setCurrentText(self.data.up_arrow_disabled["font_style"])

            self.line_height_edit.setText(self.data.up_arrow_disabled["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.up_arrow_disabled["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.up_arrow_disabled["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.up_arrow_disabled["text_align"])
            self.text_decoration.setCurrentText(self.data.up_arrow_disabled["text_decoration"])
            self.text_transform.setCurrentText(self.data.up_arrow_disabled["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.up_arrow_disabled["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.up_arrow_disabled["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.up_arrow_disabled["background_color"])

            self.border.setText(self.data.up_arrow_disabled["border"])
            self.border_width.setValue(int(self.data.up_arrow_disabled["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.up_arrow_disabled["border_width_type"])

            self.border_style.setCurrentText(self.data.up_arrow_disabled["border_style"])
            self.border_color.setText(self.data.up_arrow_disabled["border_color"])

            self.border_right.setText(self.data.up_arrow_disabled["border_right"])
            self.border_left.setText(self.data.up_arrow_disabled["border_left"])
            self.border_bottom.setText(self.data.up_arrow_disabled["border_bottom"])
            self.border_top.setText(self.data.up_arrow_disabled["border_top"])

            self.border_radius.setText(self.data.up_arrow_disabled["border_radius"])

            self.padding_top_spb.setValue(int(self.data.up_arrow_disabled["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.up_arrow_disabled["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.up_arrow_disabled["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.up_arrow_disabled["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.up_arrow_disabled["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.up_arrow_disabled["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.up_arrow_disabled["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.up_arrow_disabled["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.up_arrow_disabled["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.up_arrow_disabled["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.up_arrow_disabled["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.up_arrow_disabled["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.up_arrow_disabled["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.up_arrow_disabled["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.up_arrow_disabled["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.up_arrow_disabled["margin_left_type"])

        elif self.cb.currentText() == "::up-arrow:off":
            self.color.setText(self.data.up_arrow_off["color"])

            self.image.setText(self.data.up_arrow_off["image"])
            self.outline.setText(self.data.up_arrow_off["outline"])

            self.width_spin.setValue(int(self.data.up_arrow_off["width_value"]))
            self.width_cb.setCurrentText(self.data.up_arrow_off["width_type"])
            self.height_spin.setValue(int(self.data.up_arrow_off["height_value"]))
            self.height_cb.setCurrentText(self.data.up_arrow_off["height_type"])

            self.f_family_edit.setText(self.data.up_arrow_off["font_family"])
            self.f_size_spin.setText(self.data.up_arrow_off["font_size"])
            self.f_weight_cb.setCurrentText(self.data.up_arrow_off["font_weight"])
            self.f_style_cb.setCurrentText(self.data.up_arrow_off["font_style"])

            self.line_height_edit.setText(self.data.up_arrow_off["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.up_arrow_off["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.up_arrow_off["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.up_arrow_off["text_align"])
            self.text_decoration.setCurrentText(self.data.up_arrow_off["text_decoration"])
            self.text_transform.setCurrentText(self.data.up_arrow_off["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.up_arrow_off["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.up_arrow_off["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.up_arrow_off["background_color"])

            self.border.setText(self.data.up_arrow_off["border"])
            self.border_width.setValue(int(self.data.up_arrow_off["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.up_arrow_off["border_width_type"])

            self.border_style.setCurrentText(self.data.up_arrow_off["border_style"])
            self.border_color.setText(self.data.up_arrow_off["border_color"])

            self.border_right.setText(self.data.up_arrow_off["border_right"])
            self.border_left.setText(self.data.up_arrow_off["border_left"])
            self.border_bottom.setText(self.data.up_arrow_off["border_bottom"])
            self.border_top.setText(self.data.up_arrow_off["border_top"])

            self.border_radius.setText(self.data.up_arrow_off["border_radius"])

            self.padding_top_spb.setValue(int(self.data.up_arrow_off["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.up_arrow_off["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.up_arrow_off["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.up_arrow_off["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.up_arrow_off["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.up_arrow_off["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.up_arrow_off["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.up_arrow_off["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.up_arrow_off["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.up_arrow_off["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.up_arrow_off["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.up_arrow_off["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.up_arrow_off["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.up_arrow_off["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.up_arrow_off["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.up_arrow_off["margin_left_type"])

        elif self.cb.currentText() == "::down-button":
            self.color.setText(self.data.down_button["color"])

            self.image.setText(self.data.down_button["image"])
            self.outline.setText(self.data.down_button["outline"])

            self.width_spin.setValue(int(self.data.down_button["width_value"]))
            self.width_cb.setCurrentText(self.data.down_button["width_type"])
            self.height_spin.setValue(int(self.data.down_button["height_value"]))
            self.height_cb.setCurrentText(self.data.down_button["height_type"])

            self.f_family_edit.setText(self.data.down_button["font_family"])
            self.f_size_spin.setText(self.data.down_button["font_size"])
            self.f_weight_cb.setCurrentText(self.data.down_button["font_weight"])
            self.f_style_cb.setCurrentText(self.data.down_button["font_style"])

            self.line_height_edit.setText(self.data.down_button["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.down_button["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.down_button["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.down_button["text_align"])
            self.text_decoration.setCurrentText(self.data.down_button["text_decoration"])
            self.text_transform.setCurrentText(self.data.down_button["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.down_button["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.down_button["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.down_button["background_color"])

            self.border.setText(self.data.down_button["border"])
            self.border_width.setValue(int(self.data.down_button["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.down_button["border_width_type"])

            self.border_style.setCurrentText(self.data.down_button["border_style"])
            self.border_color.setText(self.data.down_button["border_color"])

            self.border_right.setText(self.data.down_button["border_right"])
            self.border_left.setText(self.data.down_button["border_left"])
            self.border_bottom.setText(self.data.down_button["border_bottom"])
            self.border_top.setText(self.data.down_button["border_top"])

            self.border_radius.setText(self.data.down_button["border_radius"])

            self.padding_top_spb.setValue(int(self.data.down_button["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.down_button["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.down_button["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.down_button["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.down_button["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.down_button["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.down_button["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.down_button["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.down_button["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.down_button["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.down_button["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.down_button["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.down_button["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.down_button["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.down_button["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.down_button["margin_left_type"])

        elif self.cb.currentText() == "::down-button:hover":
            self.color.setText(self.data.down_button_hover["color"])

            self.image.setText(self.data.down_button_hover["image"])
            self.outline.setText(self.data.down_button_hover["outline"])

            self.width_spin.setValue(int(self.data.down_button_hover["width_value"]))
            self.width_cb.setCurrentText(self.data.down_button_hover["width_type"])
            self.height_spin.setValue(int(self.data.down_button_hover["height_value"]))
            self.height_cb.setCurrentText(self.data.down_button_hover["height_type"])

            self.f_family_edit.setText(self.data.down_button_hover["font_family"])
            self.f_size_spin.setText(self.data.down_button_hover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.down_button_hover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.down_button_hover["font_style"])

            self.line_height_edit.setText(self.data.down_button_hover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.down_button_hover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.down_button_hover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.down_button_hover["text_align"])
            self.text_decoration.setCurrentText(self.data.down_button_hover["text_decoration"])
            self.text_transform.setCurrentText(self.data.down_button_hover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.down_button_hover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.down_button_hover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.down_button_hover["background_color"])

            self.border.setText(self.data.down_button_hover["border"])
            self.border_width.setValue(int(self.data.down_button_hover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.down_button_hover["border_width_type"])

            self.border_style.setCurrentText(self.data.down_button_hover["border_style"])
            self.border_color.setText(self.data.down_button_hover["border_color"])

            self.border_right.setText(self.data.down_button_hover["border_right"])
            self.border_left.setText(self.data.down_button_hover["border_left"])
            self.border_bottom.setText(self.data.down_button_hover["border_bottom"])
            self.border_top.setText(self.data.down_button_hover["border_top"])

            self.border_radius.setText(self.data.down_button_hover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.down_button_hover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.down_button_hover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.down_button_hover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.down_button_hover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.down_button_hover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.down_button_hover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.down_button_hover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.down_button_hover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.down_button_hover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.down_button_hover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.down_button_hover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.down_button_hover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.down_button_hover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.down_button_hover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.down_button_hover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.down_button_hover["margin_left_type"])

        elif self.cb.currentText() == "::down-button:pressed":
            self.color.setText(self.data.down_button_pressed["color"])

            self.image.setText(self.data.down_button_pressed["image"])
            self.outline.setText(self.data.down_button_pressed["outline"])

            self.width_spin.setValue(int(self.data.down_button_pressed["width_value"]))
            self.width_cb.setCurrentText(self.data.down_button_pressed["width_type"])
            self.height_spin.setValue(int(self.data.down_button_pressed["height_value"]))
            self.height_cb.setCurrentText(self.data.down_button_pressed["height_type"])

            self.f_family_edit.setText(self.data.down_button_pressed["font_family"])
            self.f_size_spin.setText(self.data.down_button_pressed["font_size"])
            self.f_weight_cb.setCurrentText(self.data.down_button_pressed["font_weight"])
            self.f_style_cb.setCurrentText(self.data.down_button_pressed["font_style"])

            self.line_height_edit.setText(self.data.down_button_pressed["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.down_button_pressed["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.down_button_pressed["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.down_button_pressed["text_align"])
            self.text_decoration.setCurrentText(self.data.down_button_pressed["text_decoration"])
            self.text_transform.setCurrentText(self.data.down_button_pressed["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.down_button_pressed["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.down_button_pressed["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.down_button_pressed["background_color"])

            self.border.setText(self.data.down_button_pressed["border"])
            self.border_width.setValue(int(self.data.down_button_pressed["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.down_button_pressed["border_width_type"])

            self.border_style.setCurrentText(self.data.down_button_pressed["border_style"])
            self.border_color.setText(self.data.down_button_pressed["border_color"])

            self.border_right.setText(self.data.down_button_pressed["border_right"])
            self.border_left.setText(self.data.down_button_pressed["border_left"])
            self.border_bottom.setText(self.data.down_button_pressed["border_bottom"])
            self.border_top.setText(self.data.down_button_pressed["border_top"])

            self.border_radius.setText(self.data.down_button_pressed["border_radius"])

            self.padding_top_spb.setValue(int(self.data.down_button_pressed["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.down_button_pressed["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.down_button_pressed["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.down_button_pressed["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.down_button_pressed["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.down_button_pressed["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.down_button_pressed["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.down_button_pressed["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.down_button_pressed["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.down_button_pressed["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.down_button_pressed["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.down_button_pressed["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.down_button_pressed["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.down_button_pressed["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.down_button_pressed["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.down_button_pressed["margin_left_type"])

        elif self.cb.currentText() == "::down-arrow":
            self.color.setText(self.data.down_arrow["color"])

            self.image.setText(self.data.down_arrow["image"])
            self.outline.setText(self.data.down_arrow["outline"])

            self.width_spin.setValue(int(self.data.down_arrow["width_value"]))
            self.width_cb.setCurrentText(self.data.down_arrow["width_type"])
            self.height_spin.setValue(int(self.data.down_arrow["height_value"]))
            self.height_cb.setCurrentText(self.data.down_arrow["height_type"])

            self.f_family_edit.setText(self.data.down_arrow["font_family"])
            self.f_size_spin.setText(self.data.down_arrow["font_size"])
            self.f_weight_cb.setCurrentText(self.data.down_arrow["font_weight"])
            self.f_style_cb.setCurrentText(self.data.down_arrow["font_style"])

            self.line_height_edit.setText(self.data.down_arrow["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.down_arrow["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.down_arrow["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.down_arrow["text_align"])
            self.text_decoration.setCurrentText(self.data.down_arrow["text_decoration"])
            self.text_transform.setCurrentText(self.data.down_arrow["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.down_arrow["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.down_arrow["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.down_arrow["background_color"])

            self.border.setText(self.data.down_arrow["border"])
            self.border_width.setValue(int(self.data.down_arrow["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.down_arrow["border_width_type"])

            self.border_style.setCurrentText(self.data.down_arrow["border_style"])
            self.border_color.setText(self.data.down_arrow["border_color"])

            self.border_right.setText(self.data.down_arrow["border_right"])
            self.border_left.setText(self.data.down_arrow["border_left"])
            self.border_bottom.setText(self.data.down_arrow["border_bottom"])
            self.border_top.setText(self.data.down_arrow["border_top"])

            self.border_radius.setText(self.data.down_arrow["border_radius"])

            self.padding_top_spb.setValue(int(self.data.down_arrow["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.down_arrow["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.down_arrow["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.down_arrow["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.down_arrow["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.down_arrow["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.down_arrow["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.down_arrow["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.down_arrow["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.down_arrow["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.down_arrow["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.down_arrow["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.down_arrow["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.down_arrow["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.down_arrow["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.down_arrow["margin_left_type"])

        elif self.cb.currentText() == "::down-arrow:disabled":
            self.color.setText(self.data.down_arrow_disabled["color"])

            self.image.setText(self.data.down_arrow_disabled["image"])
            self.outline.setText(self.data.down_arrow_disabled["outline"])

            self.width_spin.setValue(int(self.data.down_arrow_disabled["width_value"]))
            self.width_cb.setCurrentText(self.data.down_arrow_disabled["width_type"])
            self.height_spin.setValue(int(self.data.down_arrow_disabled["height_value"]))
            self.height_cb.setCurrentText(self.data.down_arrow_disabled["height_type"])

            self.f_family_edit.setText(self.data.down_arrow_disabled["font_family"])
            self.f_size_spin.setText(self.data.down_arrow_disabled["font_size"])
            self.f_weight_cb.setCurrentText(self.data.down_arrow_disabled["font_weight"])
            self.f_style_cb.setCurrentText(self.data.down_arrow_disabled["font_style"])

            self.line_height_edit.setText(self.data.down_arrow_disabled["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.down_arrow_disabled["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.down_arrow_disabled["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.down_arrow_disabled["text_align"])
            self.text_decoration.setCurrentText(self.data.down_arrow_disabled["text_decoration"])
            self.text_transform.setCurrentText(self.data.down_arrow_disabled["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.down_arrow_disabled["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.down_arrow_disabled["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.down_arrow_disabled["background_color"])

            self.border.setText(self.data.down_arrow_disabled["border"])
            self.border_width.setValue(int(self.data.down_arrow_disabled["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.down_arrow_disabled["border_width_type"])

            self.border_style.setCurrentText(self.data.down_arrow_disabled["border_style"])
            self.border_color.setText(self.data.down_arrow_disabled["border_color"])

            self.border_right.setText(self.data.down_arrow_disabled["border_right"])
            self.border_left.setText(self.data.down_arrow_disabled["border_left"])
            self.border_bottom.setText(self.data.down_arrow_disabled["border_bottom"])
            self.border_top.setText(self.data.down_arrow_disabled["border_top"])

            self.border_radius.setText(self.data.down_arrow_disabled["border_radius"])

            self.padding_top_spb.setValue(int(self.data.down_arrow_disabled["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.down_arrow_disabled["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.down_arrow_disabled["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.down_arrow_disabled["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.down_arrow_disabled["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.down_arrow_disabled["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.down_arrow_disabled["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.down_arrow_disabled["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.down_arrow_disabled["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.down_arrow_disabled["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.down_arrow_disabled["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.down_arrow_disabled["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.down_arrow_disabled["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.down_arrow_disabled["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.down_arrow_disabled["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.down_arrow_disabled["margin_left_type"])

        elif self.cb.currentText() == "::down-arrow:off":
            self.color.setText(self.data.down_arrow_off["color"])

            self.image.setText(self.data.down_arrow_off["image"])
            self.outline.setText(self.data.down_arrow_off["outline"])

            self.width_spin.setValue(int(self.data.down_arrow_off["width_value"]))
            self.width_cb.setCurrentText(self.data.down_arrow_off["width_type"])
            self.height_spin.setValue(int(self.data.down_arrow_off["height_value"]))
            self.height_cb.setCurrentText(self.data.down_arrow_off["height_type"])

            self.f_family_edit.setText(self.data.down_arrow_off["font_family"])
            self.f_size_spin.setText(self.data.down_arrow_off["font_size"])
            self.f_weight_cb.setCurrentText(self.data.down_arrow_off["font_weight"])
            self.f_style_cb.setCurrentText(self.data.down_arrow_off["font_style"])

            self.line_height_edit.setText(self.data.down_arrow_off["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.down_arrow_off["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.down_arrow_off["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.down_arrow_off["text_align"])
            self.text_decoration.setCurrentText(self.data.down_arrow_off["text_decoration"])
            self.text_transform.setCurrentText(self.data.down_arrow_off["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.down_arrow_off["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.down_arrow_off["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.down_arrow_off["background_color"])

            self.border.setText(self.data.down_arrow_off["border"])
            self.border_width.setValue(int(self.data.down_arrow_off["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.down_arrow_off["border_width_type"])

            self.border_style.setCurrentText(self.data.down_arrow_off["border_style"])
            self.border_color.setText(self.data.down_arrow_off["border_color"])

            self.border_right.setText(self.data.down_arrow_off["border_right"])
            self.border_left.setText(self.data.down_arrow_off["border_left"])
            self.border_bottom.setText(self.data.down_arrow_off["border_bottom"])
            self.border_top.setText(self.data.down_arrow_off["border_top"])

            self.border_radius.setText(self.data.down_arrow_off["border_radius"])

            self.padding_top_spb.setValue(int(self.data.down_arrow_off["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.down_arrow_off["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.down_arrow_off["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.down_arrow_off["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.down_arrow_off["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.down_arrow_off["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.down_arrow_off["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.down_arrow_off["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.down_arrow_off["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.down_arrow_off["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.down_arrow_off["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.down_arrow_off["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.down_arrow_off["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.down_arrow_off["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.down_arrow_off["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.down_arrow_off["margin_left_type"])

        elif self.cb.currentText() == ":vertical":
            self.color.setText(self.data.vertical["color"])

            self.image.setText(self.data.vertical["image"])
            self.outline.setText(self.data.vertical["outline"])

            self.width_spin.setValue(int(self.data.vertical["width_value"]))
            self.width_cb.setCurrentText(self.data.vertical["width_type"])
            self.height_spin.setValue(int(self.data.vertical["height_value"]))
            self.height_cb.setCurrentText(self.data.vertical["height_type"])

            self.f_family_edit.setText(self.data.vertical["font_family"])
            self.f_size_spin.setText(self.data.vertical["font_size"])
            self.f_weight_cb.setCurrentText(self.data.vertical["font_weight"])
            self.f_style_cb.setCurrentText(self.data.vertical["font_style"])

            self.line_height_edit.setText(self.data.vertical["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.vertical["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.vertical["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.vertical["text_align"])
            self.text_decoration.setCurrentText(self.data.vertical["text_decoration"])
            self.text_transform.setCurrentText(self.data.vertical["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.vertical["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.vertical["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.vertical["background_color"])

            self.border.setText(self.data.vertical["border"])
            self.border_width.setValue(int(self.data.vertical["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.vertical["border_width_type"])

            self.border_style.setCurrentText(self.data.vertical["border_style"])
            self.border_color.setText(self.data.vertical["border_color"])

            self.border_right.setText(self.data.vertical["border_right"])
            self.border_left.setText(self.data.vertical["border_left"])
            self.border_bottom.setText(self.data.vertical["border_bottom"])
            self.border_top.setText(self.data.vertical["border_top"])

            self.border_radius.setText(self.data.vertical["border_radius"])

            self.padding_top_spb.setValue(int(self.data.vertical["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.vertical["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.vertical["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.vertical["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.vertical["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.vertical["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.vertical["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.vertical["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.vertical["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.vertical["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.vertical["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.vertical["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.vertical["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.vertical["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.vertical["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.vertical["margin_left_type"])

        elif self.cb.currentText() == "::groove:vertical":
            self.color.setText(self.data.groove_vertical["color"])

            self.image.setText(self.data.groove_vertical["image"])
            self.outline.setText(self.data.groove_vertical["outline"])

            self.width_spin.setValue(int(self.data.groove_vertical["width_value"]))
            self.width_cb.setCurrentText(self.data.groove_vertical["width_type"])
            self.height_spin.setValue(int(self.data.groove_vertical["height_value"]))
            self.height_cb.setCurrentText(self.data.groove_vertical["height_type"])

            self.f_family_edit.setText(self.data.groove_vertical["font_family"])
            self.f_size_spin.setText(self.data.groove_vertical["font_size"])
            self.f_weight_cb.setCurrentText(self.data.groove_vertical["font_weight"])
            self.f_style_cb.setCurrentText(self.data.groove_vertical["font_style"])

            self.line_height_edit.setText(self.data.groove_vertical["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.groove_vertical["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.groove_vertical["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.groove_vertical["text_align"])
            self.text_decoration.setCurrentText(self.data.groove_vertical["text_decoration"])
            self.text_transform.setCurrentText(self.data.groove_vertical["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.groove_vertical["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.groove_vertical["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.groove_vertical["background_color"])

            self.border.setText(self.data.groove_vertical["border"])
            self.border_width.setValue(int(self.data.groove_vertical["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.groove_vertical["border_width_type"])

            self.border_style.setCurrentText(self.data.groove_vertical["border_style"])
            self.border_color.setText(self.data.groove_vertical["border_color"])

            self.border_right.setText(self.data.groove_vertical["border_right"])
            self.border_left.setText(self.data.groove_vertical["border_left"])
            self.border_bottom.setText(self.data.groove_vertical["border_bottom"])
            self.border_top.setText(self.data.groove_vertical["border_top"])

            self.border_radius.setText(self.data.groove_vertical["border_radius"])

            self.padding_top_spb.setValue(int(self.data.groove_vertical["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.groove_vertical["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.groove_vertical["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.groove_vertical["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.groove_vertical["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.groove_vertical["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.groove_vertical["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.groove_vertical["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.groove_vertical["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.groove_vertical["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.groove_vertical["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.groove_vertical["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.groove_vertical["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.groove_vertical["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.groove_vertical["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.groove_vertical["margin_left_type"])

        elif self.cb.currentText() == "::handle:vertical":
            self.color.setText(self.data.handle_vertical["color"])

            self.image.setText(self.data.handle_vertical["image"])
            self.outline.setText(self.data.handle_vertical["outline"])

            self.width_spin.setValue(int(self.data.handle_vertical["width_value"]))
            self.width_cb.setCurrentText(self.data.handle_vertical["width_type"])
            self.height_spin.setValue(int(self.data.handle_vertical["height_value"]))
            self.height_cb.setCurrentText(self.data.handle_vertical["height_type"])

            self.f_family_edit.setText(self.data.handle_vertical["font_family"])
            self.f_size_spin.setText(self.data.handle_vertical["font_size"])
            self.f_weight_cb.setCurrentText(self.data.handle_vertical["font_weight"])
            self.f_style_cb.setCurrentText(self.data.handle_vertical["font_style"])

            self.line_height_edit.setText(self.data.handle_vertical["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.handle_vertical["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.handle_vertical["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.handle_vertical["text_align"])
            self.text_decoration.setCurrentText(self.data.handle_vertical["text_decoration"])
            self.text_transform.setCurrentText(self.data.handle_vertical["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.handle_vertical["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.handle_vertical["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.handle_vertical["background_color"])

            self.border.setText(self.data.handle_vertical["border"])
            self.border_width.setValue(int(self.data.handle_vertical["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.handle_vertical["border_width_type"])

            self.border_style.setCurrentText(self.data.handle_vertical["border_style"])
            self.border_color.setText(self.data.handle_vertical["border_color"])

            self.border_right.setText(self.data.handle_vertical["border_right"])
            self.border_left.setText(self.data.handle_vertical["border_left"])
            self.border_bottom.setText(self.data.handle_vertical["border_bottom"])
            self.border_top.setText(self.data.handle_vertical["border_top"])

            self.border_radius.setText(self.data.handle_vertical["border_radius"])

            self.padding_top_spb.setValue(int(self.data.handle_vertical["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.handle_vertical["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.handle_vertical["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.handle_vertical["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.handle_vertical["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.handle_vertical["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.handle_vertical["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.handle_vertical["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.handle_vertical["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.handle_vertical["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.handle_vertical["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.handle_vertical["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.handle_vertical["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.handle_vertical["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.handle_vertical["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.handle_vertical["margin_left_type"])

        elif self.cb.currentText() == "::handle:vertical:hover":
            self.color.setText(self.data.handle_vertical_hover["color"])

            self.image.setText(self.data.handle_vertical_hover["image"])
            self.outline.setText(self.data.handle_vertical_hover["outline"])

            self.width_spin.setValue(int(self.data.handle_vertical_hover["width_value"]))
            self.width_cb.setCurrentText(self.data.handle_vertical_hover["width_type"])
            self.height_spin.setValue(int(self.data.handle_vertical_hover["height_value"]))
            self.height_cb.setCurrentText(self.data.handle_vertical_hover["height_type"])

            self.f_family_edit.setText(self.data.handle_vertical_hover["font_family"])
            self.f_size_spin.setText(self.data.handle_vertical_hover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.handle_vertical_hover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.handle_vertical_hover["font_style"])

            self.line_height_edit.setText(self.data.handle_vertical_hover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.handle_vertical_hover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.handle_vertical_hover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.handle_vertical_hover["text_align"])
            self.text_decoration.setCurrentText(self.data.handle_vertical_hover["text_decoration"])
            self.text_transform.setCurrentText(self.data.handle_vertical_hover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.handle_vertical_hover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.handle_vertical_hover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.handle_vertical_hover["background_color"])

            self.border.setText(self.data.handle_vertical_hover["border"])
            self.border_width.setValue(int(self.data.handle_vertical_hover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.handle_vertical_hover["border_width_type"])

            self.border_style.setCurrentText(self.data.handle_vertical_hover["border_style"])
            self.border_color.setText(self.data.handle_vertical_hover["border_color"])

            self.border_right.setText(self.data.handle_vertical_hover["border_right"])
            self.border_left.setText(self.data.handle_vertical_hover["border_left"])
            self.border_bottom.setText(self.data.handle_vertical_hover["border_bottom"])
            self.border_top.setText(self.data.handle_vertical_hover["border_top"])

            self.border_radius.setText(self.data.handle_vertical_hover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.handle_vertical_hover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.handle_vertical_hover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.handle_vertical_hover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.handle_vertical_hover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.handle_vertical_hover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.handle_vertical_hover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.handle_vertical_hover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.handle_vertical_hover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.handle_vertical_hover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.handle_vertical_hover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.handle_vertical_hover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.handle_vertical_hover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.handle_vertical_hover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.handle_vertical_hover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.handle_vertical_hover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.handle_vertical_hover["margin_left_type"])

        elif self.cb.currentText() == "::handle:vertical:disabled":
            self.color.setText(self.data.handle_vertical_disabled["color"])

            self.image.setText(self.data.handle_vertical_disabled["image"])
            self.outline.setText(self.data.handle_vertical_disabled["outline"])

            self.width_spin.setValue(int(self.data.handle_vertical_disabled["width_value"]))
            self.width_cb.setCurrentText(self.data.handle_vertical_disabled["width_type"])
            self.height_spin.setValue(int(self.data.handle_vertical_disabled["height_value"]))
            self.height_cb.setCurrentText(self.data.handle_vertical_disabled["height_type"])

            self.f_family_edit.setText(self.data.handle_vertical_disabled["font_family"])
            self.f_size_spin.setText(self.data.handle_vertical_disabled["font_size"])
            self.f_weight_cb.setCurrentText(self.data.handle_vertical_disabled["font_weight"])
            self.f_style_cb.setCurrentText(self.data.handle_vertical_disabled["font_style"])

            self.line_height_edit.setText(self.data.handle_vertical_disabled["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.handle_vertical_disabled["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.handle_vertical_disabled["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.handle_vertical_disabled["text_align"])
            self.text_decoration.setCurrentText(self.data.handle_vertical_disabled["text_decoration"])
            self.text_transform.setCurrentText(self.data.handle_vertical_disabled["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.handle_vertical_disabled["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.handle_vertical_disabled["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.handle_vertical_disabled["background_color"])

            self.border.setText(self.data.handle_vertical_disabled["border"])
            self.border_width.setValue(int(self.data.handle_vertical_disabled["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.handle_vertical_disabled["border_width_type"])

            self.border_style.setCurrentText(self.data.handle_vertical_disabled["border_style"])
            self.border_color.setText(self.data.handle_vertical_disabled["border_color"])

            self.border_right.setText(self.data.handle_vertical_disabled["border_right"])
            self.border_left.setText(self.data.handle_vertical_disabled["border_left"])
            self.border_bottom.setText(self.data.handle_vertical_disabled["border_bottom"])
            self.border_top.setText(self.data.handle_vertical_disabled["border_top"])

            self.border_radius.setText(self.data.handle_vertical_disabled["border_radius"])

            self.padding_top_spb.setValue(int(self.data.handle_vertical_disabled["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.handle_vertical_disabled["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.handle_vertical_disabled["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.handle_vertical_disabled["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.handle_vertical_disabled["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.handle_vertical_disabled["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.handle_vertical_disabled["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.handle_vertical_disabled["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.handle_vertical_disabled["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.handle_vertical_disabled["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.handle_vertical_disabled["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.handle_vertical_disabled["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.handle_vertical_disabled["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.handle_vertical_disabled["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.handle_vertical_disabled["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.handle_vertical_disabled["margin_left_type"])

        elif self.cb.currentText() == "::add-page:vertical":
            self.color.setText(self.data.add_page_vertical["color"])

            self.image.setText(self.data.add_page_vertical["image"])
            self.outline.setText(self.data.add_page_vertical["outline"])

            self.width_spin.setValue(int(self.data.add_page_vertical["width_value"]))
            self.width_cb.setCurrentText(self.data.add_page_vertical["width_type"])
            self.height_spin.setValue(int(self.data.add_page_vertical["height_value"]))
            self.height_cb.setCurrentText(self.data.add_page_vertical["height_type"])

            self.f_family_edit.setText(self.data.add_page_vertical["font_family"])
            self.f_size_spin.setText(self.data.add_page_vertical["font_size"])
            self.f_weight_cb.setCurrentText(self.data.add_page_vertical["font_weight"])
            self.f_style_cb.setCurrentText(self.data.add_page_vertical["font_style"])

            self.line_height_edit.setText(self.data.add_page_vertical["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.add_page_vertical["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.add_page_vertical["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.add_page_vertical["text_align"])
            self.text_decoration.setCurrentText(self.data.add_page_vertical["text_decoration"])
            self.text_transform.setCurrentText(self.data.add_page_vertical["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.add_page_vertical["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.add_page_vertical["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.add_page_vertical["background_color"])

            self.border.setText(self.data.add_page_vertical["border"])
            self.border_width.setValue(int(self.data.add_page_vertical["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.add_page_vertical["border_width_type"])

            self.border_style.setCurrentText(self.data.add_page_vertical["border_style"])
            self.border_color.setText(self.data.add_page_vertical["border_color"])

            self.border_right.setText(self.data.add_page_vertical["border_right"])
            self.border_left.setText(self.data.add_page_vertical["border_left"])
            self.border_bottom.setText(self.data.add_page_vertical["border_bottom"])
            self.border_top.setText(self.data.add_page_vertical["border_top"])

            self.border_radius.setText(self.data.add_page_vertical["border_radius"])

            self.padding_top_spb.setValue(int(self.data.add_page_vertical["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.add_page_vertical["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.add_page_vertical["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.add_page_vertical["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.add_page_vertical["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.add_page_vertical["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.add_page_vertical["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.add_page_vertical["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.add_page_vertical["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.add_page_vertical["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.add_page_vertical["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.add_page_vertical["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.add_page_vertical["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.add_page_vertical["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.add_page_vertical["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.add_page_vertical["margin_left_type"])

        elif self.cb.currentText() == "::add-page:vertical:disabled":
            self.color.setText(self.data.add_page_vertical_disabled["color"])

            self.image.setText(self.data.add_page_vertical_disabled["image"])
            self.outline.setText(self.data.add_page_vertical_disabled["outline"])

            self.width_spin.setValue(int(self.data.add_page_vertical_disabled["width_value"]))
            self.width_cb.setCurrentText(self.data.add_page_vertical_disabled["width_type"])
            self.height_spin.setValue(int(self.data.add_page_vertical_disabled["height_value"]))
            self.height_cb.setCurrentText(self.data.add_page_vertical_disabled["height_type"])

            self.f_family_edit.setText(self.data.add_page_vertical_disabled["font_family"])
            self.f_size_spin.setText(self.data.add_page_vertical_disabled["font_size"])
            self.f_weight_cb.setCurrentText(self.data.add_page_vertical_disabled["font_weight"])
            self.f_style_cb.setCurrentText(self.data.add_page_vertical_disabled["font_style"])

            self.line_height_edit.setText(self.data.add_page_vertical_disabled["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.add_page_vertical_disabled["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.add_page_vertical_disabled["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.add_page_vertical_disabled["text_align"])
            self.text_decoration.setCurrentText(self.data.add_page_vertical_disabled["text_decoration"])
            self.text_transform.setCurrentText(self.data.add_page_vertical_disabled["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.add_page_vertical_disabled["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.add_page_vertical_disabled["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.add_page_vertical_disabled["background_color"])

            self.border.setText(self.data.add_page_vertical_disabled["border"])
            self.border_width.setValue(int(self.data.add_page_vertical_disabled["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.add_page_vertical_disabled["border_width_type"])

            self.border_style.setCurrentText(self.data.add_page_vertical_disabled["border_style"])
            self.border_color.setText(self.data.add_page_vertical_disabled["border_color"])

            self.border_right.setText(self.data.add_page_vertical_disabled["border_right"])
            self.border_left.setText(self.data.add_page_vertical_disabled["border_left"])
            self.border_bottom.setText(self.data.add_page_vertical_disabled["border_bottom"])
            self.border_top.setText(self.data.add_page_vertical_disabled["border_top"])

            self.border_radius.setText(self.data.add_page_vertical_disabled["border_radius"])

            self.padding_top_spb.setValue(int(self.data.add_page_vertical_disabled["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.add_page_vertical_disabled["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.add_page_vertical_disabled["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.add_page_vertical_disabled["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.add_page_vertical_disabled["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.add_page_vertical_disabled["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.add_page_vertical_disabled["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.add_page_vertical_disabled["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.add_page_vertical_disabled["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.add_page_vertical_disabled["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.add_page_vertical_disabled["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.add_page_vertical_disabled["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.add_page_vertical_disabled["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.add_page_vertical_disabled["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.add_page_vertical_disabled["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.add_page_vertical_disabled["margin_left_type"])

        elif self.cb.currentText() == "::sub-page:vertical":
            self.color.setText(self.data.sub_page_vertical["color"])

            self.image.setText(self.data.sub_page_vertical["image"])
            self.outline.setText(self.data.sub_page_vertical["outline"])

            self.width_spin.setValue(int(self.data.sub_page_vertical["width_value"]))
            self.width_cb.setCurrentText(self.data.sub_page_vertical["width_type"])
            self.height_spin.setValue(int(self.data.sub_page_vertical["height_value"]))
            self.height_cb.setCurrentText(self.data.sub_page_vertical["height_type"])

            self.f_family_edit.setText(self.data.sub_page_vertical["font_family"])
            self.f_size_spin.setText(self.data.sub_page_vertical["font_size"])
            self.f_weight_cb.setCurrentText(self.data.sub_page_vertical["font_weight"])
            self.f_style_cb.setCurrentText(self.data.sub_page_vertical["font_style"])

            self.line_height_edit.setText(self.data.sub_page_vertical["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.sub_page_vertical["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.sub_page_vertical["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.sub_page_vertical["text_align"])
            self.text_decoration.setCurrentText(self.data.sub_page_vertical["text_decoration"])
            self.text_transform.setCurrentText(self.data.sub_page_vertical["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.sub_page_vertical["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.sub_page_vertical["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.sub_page_vertical["background_color"])

            self.border.setText(self.data.sub_page_vertical["border"])
            self.border_width.setValue(int(self.data.sub_page_vertical["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.sub_page_vertical["border_width_type"])

            self.border_style.setCurrentText(self.data.sub_page_vertical["border_style"])
            self.border_color.setText(self.data.sub_page_vertical["border_color"])

            self.border_right.setText(self.data.sub_page_vertical["border_right"])
            self.border_left.setText(self.data.sub_page_vertical["border_left"])
            self.border_bottom.setText(self.data.sub_page_vertical["border_bottom"])
            self.border_top.setText(self.data.sub_page_vertical["border_top"])

            self.border_radius.setText(self.data.sub_page_vertical["border_radius"])

            self.padding_top_spb.setValue(int(self.data.sub_page_vertical["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.sub_page_vertical["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.sub_page_vertical["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.sub_page_vertical["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.sub_page_vertical["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.sub_page_vertical["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.sub_page_vertical["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.sub_page_vertical["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.sub_page_vertical["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.sub_page_vertical["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.sub_page_vertical["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.sub_page_vertical["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.sub_page_vertical["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.sub_page_vertical["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.sub_page_vertical["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.sub_page_vertical["margin_left_type"])

        elif self.cb.currentText() == "::sub-page:vertical:disabled":
            self.color.setText(self.data.sub_page_vertical_disabled["color"])

            self.image.setText(self.data.sub_page_vertical_disabled["image"])
            self.outline.setText(self.data.sub_page_vertical_disabled["outline"])

            self.width_spin.setValue(int(self.data.sub_page_vertical_disabled["width_value"]))
            self.width_cb.setCurrentText(self.data.sub_page_vertical_disabled["width_type"])
            self.height_spin.setValue(int(self.data.sub_page_vertical_disabled["height_value"]))
            self.height_cb.setCurrentText(self.data.sub_page_vertical_disabled["height_type"])

            self.f_family_edit.setText(self.data.sub_page_vertical_disabled["font_family"])
            self.f_size_spin.setText(self.data.sub_page_vertical_disabled["font_size"])
            self.f_weight_cb.setCurrentText(self.data.sub_page_vertical_disabled["font_weight"])
            self.f_style_cb.setCurrentText(self.data.sub_page_vertical_disabled["font_style"])

            self.line_height_edit.setText(self.data.sub_page_vertical_disabled["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.sub_page_vertical_disabled["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.sub_page_vertical_disabled["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.sub_page_vertical_disabled["text_align"])
            self.text_decoration.setCurrentText(self.data.sub_page_vertical_disabled["text_decoration"])
            self.text_transform.setCurrentText(self.data.sub_page_vertical_disabled["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.sub_page_vertical_disabled["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.sub_page_vertical_disabled["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.sub_page_vertical_disabled["background_color"])

            self.border.setText(self.data.sub_page_vertical_disabled["border"])
            self.border_width.setValue(int(self.data.sub_page_vertical_disabled["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.sub_page_vertical_disabled["border_width_type"])

            self.border_style.setCurrentText(self.data.sub_page_vertical_disabled["border_style"])
            self.border_color.setText(self.data.sub_page_vertical_disabled["border_color"])

            self.border_right.setText(self.data.sub_page_vertical_disabled["border_right"])
            self.border_left.setText(self.data.sub_page_vertical_disabled["border_left"])
            self.border_bottom.setText(self.data.sub_page_vertical_disabled["border_bottom"])
            self.border_top.setText(self.data.sub_page_vertical_disabled["border_top"])

            self.border_radius.setText(self.data.sub_page_vertical_disabled["border_radius"])

            self.padding_top_spb.setValue(int(self.data.sub_page_vertical_disabled["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.sub_page_vertical_disabled["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.sub_page_vertical_disabled["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.sub_page_vertical_disabled["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.sub_page_vertical_disabled["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.sub_page_vertical_disabled["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.sub_page_vertical_disabled["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.sub_page_vertical_disabled["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.sub_page_vertical_disabled["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.sub_page_vertical_disabled["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.sub_page_vertical_disabled["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.sub_page_vertical_disabled["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.sub_page_vertical_disabled["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.sub_page_vertical_disabled["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.sub_page_vertical_disabled["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.sub_page_vertical_disabled["margin_left_type"])

        elif self.cb.currentText() == ":horizontal":
            self.color.setText(self.data.horizontal["color"])

            self.image.setText(self.data.horizontal["image"])
            self.outline.setText(self.data.horizontal["outline"])

            self.width_spin.setValue(int(self.data.horizontal["width_value"]))
            self.width_cb.setCurrentText(self.data.horizontal["width_type"])
            self.height_spin.setValue(int(self.data.horizontal["height_value"]))
            self.height_cb.setCurrentText(self.data.horizontal["height_type"])

            self.f_family_edit.setText(self.data.horizontal["font_family"])
            self.f_size_spin.setText(self.data.horizontal["font_size"])
            self.f_weight_cb.setCurrentText(self.data.horizontal["font_weight"])
            self.f_style_cb.setCurrentText(self.data.horizontal["font_style"])

            self.line_height_edit.setText(self.data.horizontal["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.horizontal["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.horizontal["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.horizontal["text_align"])
            self.text_decoration.setCurrentText(self.data.horizontal["text_decoration"])
            self.text_transform.setCurrentText(self.data.horizontal["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.horizontal["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.horizontal["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.horizontal["background_color"])

            self.border.setText(self.data.horizontal["border"])
            self.border_width.setValue(int(self.data.horizontal["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.horizontal["border_width_type"])

            self.border_style.setCurrentText(self.data.horizontal["border_style"])
            self.border_color.setText(self.data.horizontal["border_color"])

            self.border_right.setText(self.data.horizontal["border_right"])
            self.border_left.setText(self.data.horizontal["border_left"])
            self.border_bottom.setText(self.data.horizontal["border_bottom"])
            self.border_top.setText(self.data.horizontal["border_top"])

            self.border_radius.setText(self.data.horizontal["border_radius"])

            self.padding_top_spb.setValue(int(self.data.horizontal["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.horizontal["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.horizontal["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.horizontal["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.horizontal["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.horizontal["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.horizontal["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.horizontal["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.horizontal["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.horizontal["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.horizontal["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.horizontal["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.horizontal["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.horizontal["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.horizontal["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.horizontal["margin_left_type"])

        elif self.cb.currentText() == "::groove:horizontal":
            self.color.setText(self.data.groove_horizontal["color"])

            self.image.setText(self.data.groove_horizontal["image"])
            self.outline.setText(self.data.groove_horizontal["outline"])

            self.width_spin.setValue(int(self.data.groove_horizontal["width_value"]))
            self.width_cb.setCurrentText(self.data.groove_horizontal["width_type"])
            self.height_spin.setValue(int(self.data.groove_horizontal["height_value"]))
            self.height_cb.setCurrentText(self.data.groove_horizontal["height_type"])

            self.f_family_edit.setText(self.data.groove_horizontal["font_family"])
            self.f_size_spin.setText(self.data.groove_horizontal["font_size"])
            self.f_weight_cb.setCurrentText(self.data.groove_horizontal["font_weight"])
            self.f_style_cb.setCurrentText(self.data.groove_horizontal["font_style"])

            self.line_height_edit.setText(self.data.groove_horizontal["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.groove_horizontal["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.groove_horizontal["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.groove_horizontal["text_align"])
            self.text_decoration.setCurrentText(self.data.groove_horizontal["text_decoration"])
            self.text_transform.setCurrentText(self.data.groove_horizontal["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.groove_horizontal["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.groove_horizontal["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.groove_horizontal["background_color"])

            self.border.setText(self.data.groove_horizontal["border"])
            self.border_width.setValue(int(self.data.groove_horizontal["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.groove_horizontal["border_width_type"])

            self.border_style.setCurrentText(self.data.groove_horizontal["border_style"])
            self.border_color.setText(self.data.groove_horizontal["border_color"])

            self.border_right.setText(self.data.groove_horizontal["border_right"])
            self.border_left.setText(self.data.groove_horizontal["border_left"])
            self.border_bottom.setText(self.data.groove_horizontal["border_bottom"])
            self.border_top.setText(self.data.groove_horizontal["border_top"])

            self.border_radius.setText(self.data.groove_horizontal["border_radius"])

            self.padding_top_spb.setValue(int(self.data.groove_horizontal["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.groove_horizontal["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.groove_horizontal["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.groove_horizontal["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.groove_horizontal["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.groove_horizontal["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.groove_horizontal["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.groove_horizontal["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.groove_horizontal["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.groove_horizontal["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.groove_horizontal["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.groove_horizontal["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.groove_horizontal["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.groove_horizontal["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.groove_horizontal["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.groove_horizontal["margin_left_type"])

        elif self.cb.currentText() == "::handle:horizontal":
            self.color.setText(self.data.handle_horizontal["color"])

            self.image.setText(self.data.handle_horizontal["image"])
            self.outline.setText(self.data.handle_horizontal["outline"])

            self.width_spin.setValue(int(self.data.handle_horizontal["width_value"]))
            self.width_cb.setCurrentText(self.data.handle_horizontal["width_type"])
            self.height_spin.setValue(int(self.data.handle_horizontal["height_value"]))
            self.height_cb.setCurrentText(self.data.handle_horizontal["height_type"])

            self.f_family_edit.setText(self.data.handle_horizontal["font_family"])
            self.f_size_spin.setText(self.data.handle_horizontal["font_size"])
            self.f_weight_cb.setCurrentText(self.data.handle_horizontal["font_weight"])
            self.f_style_cb.setCurrentText(self.data.handle_horizontal["font_style"])

            self.line_height_edit.setText(self.data.handle_horizontal["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.handle_horizontal["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.handle_horizontal["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.handle_horizontal["text_align"])
            self.text_decoration.setCurrentText(self.data.handle_horizontal["text_decoration"])
            self.text_transform.setCurrentText(self.data.handle_horizontal["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.handle_horizontal["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.handle_horizontal["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.handle_horizontal["background_color"])

            self.border.setText(self.data.handle_horizontal["border"])
            self.border_width.setValue(int(self.data.handle_horizontal["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.handle_horizontal["border_width_type"])

            self.border_style.setCurrentText(self.data.handle_horizontal["border_style"])
            self.border_color.setText(self.data.handle_horizontal["border_color"])

            self.border_right.setText(self.data.handle_horizontal["border_right"])
            self.border_left.setText(self.data.handle_horizontal["border_left"])
            self.border_bottom.setText(self.data.handle_horizontal["border_bottom"])
            self.border_top.setText(self.data.handle_horizontal["border_top"])

            self.border_radius.setText(self.data.handle_horizontal["border_radius"])

            self.padding_top_spb.setValue(int(self.data.handle_horizontal["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.handle_horizontal["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.handle_horizontal["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.handle_horizontal["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.handle_horizontal["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.handle_horizontal["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.handle_horizontal["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.handle_horizontal["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.handle_horizontal["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.handle_horizontal["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.handle_horizontal["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.handle_horizontal["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.handle_horizontal["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.handle_horizontal["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.handle_horizontal["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.handle_horizontal["margin_left_type"])

        elif self.cb.currentText() == "::handle:horizontal:hover":
            self.color.setText(self.data.handle_horizontal_hover["color"])

            self.image.setText(self.data.handle_horizontal_hover["image"])
            self.outline.setText(self.data.handle_horizontal_hover["outline"])

            self.width_spin.setValue(int(self.data.handle_horizontal_hover["width_value"]))
            self.width_cb.setCurrentText(self.data.handle_horizontal_hover["width_type"])
            self.height_spin.setValue(int(self.data.handle_horizontal_hover["height_value"]))
            self.height_cb.setCurrentText(self.data.handle_horizontal_hover["height_type"])

            self.f_family_edit.setText(self.data.handle_horizontal_hover["font_family"])
            self.f_size_spin.setText(self.data.handle_horizontal_hover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.handle_horizontal_hover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.handle_horizontal_hover["font_style"])

            self.line_height_edit.setText(self.data.handle_horizontal_hover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.handle_horizontal_hover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.handle_horizontal_hover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.handle_horizontal_hover["text_align"])
            self.text_decoration.setCurrentText(self.data.handle_horizontal_hover["text_decoration"])
            self.text_transform.setCurrentText(self.data.handle_horizontal_hover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.handle_horizontal_hover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.handle_horizontal_hover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.handle_horizontal_hover["background_color"])

            self.border.setText(self.data.handle_horizontal_hover["border"])
            self.border_width.setValue(int(self.data.handle_horizontal_hover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.handle_horizontal_hover["border_width_type"])

            self.border_style.setCurrentText(self.data.handle_horizontal_hover["border_style"])
            self.border_color.setText(self.data.handle_horizontal_hover["border_color"])

            self.border_right.setText(self.data.handle_horizontal_hover["border_right"])
            self.border_left.setText(self.data.handle_horizontal_hover["border_left"])
            self.border_bottom.setText(self.data.handle_horizontal_hover["border_bottom"])
            self.border_top.setText(self.data.handle_horizontal_hover["border_top"])

            self.border_radius.setText(self.data.handle_horizontal_hover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.handle_horizontal_hover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.handle_horizontal_hover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.handle_horizontal_hover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.handle_horizontal_hover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.handle_horizontal_hover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.handle_horizontal_hover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.handle_horizontal_hover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.handle_horizontal_hover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.handle_horizontal_hover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.handle_horizontal_hover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.handle_horizontal_hover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.handle_horizontal_hover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.handle_horizontal_hover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.handle_horizontal_hover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.handle_horizontal_hover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.handle_horizontal_hover["margin_left_type"])

        elif self.cb.currentText() == "::handle:horizontal:disabled":
            self.color.setText(self.data.handle_horizontal_disabled["color"])

            self.image.setText(self.data.handle_horizontal_disabled["image"])
            self.outline.setText(self.data.handle_horizontal_disabled["outline"])

            self.width_spin.setValue(int(self.data.handle_horizontal_disabled["width_value"]))
            self.width_cb.setCurrentText(self.data.handle_horizontal_disabled["width_type"])
            self.height_spin.setValue(int(self.data.handle_horizontal_disabled["height_value"]))
            self.height_cb.setCurrentText(self.data.handle_horizontal_disabled["height_type"])

            self.f_family_edit.setText(self.data.handle_horizontal_disabled["font_family"])
            self.f_size_spin.setText(self.data.handle_horizontal_disabled["font_size"])
            self.f_weight_cb.setCurrentText(self.data.handle_horizontal_disabled["font_weight"])
            self.f_style_cb.setCurrentText(self.data.handle_horizontal_disabled["font_style"])

            self.line_height_edit.setText(self.data.handle_horizontal_disabled["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.handle_horizontal_disabled["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.handle_horizontal_disabled["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.handle_horizontal_disabled["text_align"])
            self.text_decoration.setCurrentText(self.data.handle_horizontal_disabled["text_decoration"])
            self.text_transform.setCurrentText(self.data.handle_horizontal_disabled["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.handle_horizontal_disabled["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.handle_horizontal_disabled["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.handle_horizontal_disabled["background_color"])

            self.border.setText(self.data.handle_horizontal_disabled["border"])
            self.border_width.setValue(int(self.data.handle_horizontal_disabled["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.handle_horizontal_disabled["border_width_type"])

            self.border_style.setCurrentText(self.data.handle_horizontal_disabled["border_style"])
            self.border_color.setText(self.data.handle_horizontal_disabled["border_color"])

            self.border_right.setText(self.data.handle_horizontal_disabled["border_right"])
            self.border_left.setText(self.data.handle_horizontal_disabled["border_left"])
            self.border_bottom.setText(self.data.handle_horizontal_disabled["border_bottom"])
            self.border_top.setText(self.data.handle_horizontal_disabled["border_top"])

            self.border_radius.setText(self.data.handle_horizontal_disabled["border_radius"])

            self.padding_top_spb.setValue(int(self.data.handle_horizontal_disabled["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.handle_horizontal_disabled["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.handle_horizontal_disabled["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.handle_horizontal_disabled["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.handle_horizontal_disabled["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.handle_horizontal_disabled["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.handle_horizontal_disabled["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.handle_horizontal_disabled["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.handle_horizontal_disabled["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.handle_horizontal_disabled["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.handle_horizontal_disabled["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.handle_horizontal_disabled["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.handle_horizontal_disabled["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.handle_horizontal_disabled["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.handle_horizontal_disabled["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.handle_horizontal_disabled["margin_left_type"])

        elif self.cb.currentText() == "::add-page:horizontal":
            self.color.setText(self.data.add_page_horizontal["color"])

            self.image.setText(self.data.add_page_horizontal["image"])
            self.outline.setText(self.data.add_page_horizontal["outline"])


            self.width_spin.setValue(int(self.data.add_page_horizontal["width_value"]))
            self.width_cb.setCurrentText(self.data.add_page_horizontal["width_type"])
            self.height_spin.setValue(int(self.data.add_page_horizontal["height_value"]))
            self.height_cb.setCurrentText(self.data.add_page_horizontal["height_type"])

            self.f_family_edit.setText(self.data.add_page_horizontal["font_family"])
            self.f_size_spin.setText(self.data.add_page_horizontal["font_size"])
            self.f_weight_cb.setCurrentText(self.data.add_page_horizontal["font_weight"])
            self.f_style_cb.setCurrentText(self.data.add_page_horizontal["font_style"])

            self.line_height_edit.setText(self.data.add_page_horizontal["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.add_page_horizontal["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.add_page_horizontal["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.add_page_horizontal["text_align"])
            self.text_decoration.setCurrentText(self.data.add_page_horizontal["text_decoration"])
            self.text_transform.setCurrentText(self.data.add_page_horizontal["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.add_page_horizontal["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.add_page_horizontal["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.add_page_horizontal["background_color"])

            self.border.setText(self.data.add_page_horizontal["border"])
            self.border_width.setValue(int(self.data.add_page_horizontal["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.add_page_horizontal["border_width_type"])

            self.border_style.setCurrentText(self.data.add_page_horizontal["border_style"])
            self.border_color.setText(self.data.add_page_horizontal["border_color"])

            self.border_right.setText(self.data.add_page_horizontal["border_right"])
            self.border_left.setText(self.data.add_page_horizontal["border_left"])
            self.border_bottom.setText(self.data.add_page_horizontal["border_bottom"])
            self.border_top.setText(self.data.add_page_horizontal["border_top"])

            self.border_radius.setText(self.data.add_page_horizontal["border_radius"])

            self.padding_top_spb.setValue(int(self.data.add_page_horizontal["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.add_page_horizontal["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.add_page_horizontal["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.add_page_horizontal["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.add_page_horizontal["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.add_page_horizontal["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.add_page_horizontal["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.add_page_horizontal["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.add_page_horizontal["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.add_page_horizontal["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.add_page_horizontal["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.add_page_horizontal["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.add_page_horizontal["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.add_page_horizontal["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.add_page_horizontal["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.add_page_horizontal["margin_left_type"])

        elif self.cb.currentText() == "::add-page:horizontal:disabled":
            self.color.setText(self.data.add_page_horizontal_disabled["color"])

            self.image.setText(self.data.add_page_horizontal_disabled["image"])
            self.outline.setText(self.data.add_page_horizontal_disabled["outline"])

            self.width_spin.setValue(int(self.data.add_page_horizontal_disabled["width_value"]))
            self.width_cb.setCurrentText(self.data.add_page_horizontal_disabled["width_type"])
            self.height_spin.setValue(int(self.data.add_page_horizontal_disabled["height_value"]))
            self.height_cb.setCurrentText(self.data.add_page_horizontal_disabled["height_type"])

            self.f_family_edit.setText(self.data.add_page_horizontal_disabled["font_family"])
            self.f_size_spin.setText(self.data.add_page_horizontal_disabled["font_size"])
            self.f_weight_cb.setCurrentText(self.data.add_page_horizontal_disabled["font_weight"])
            self.f_style_cb.setCurrentText(self.data.add_page_horizontal_disabled["font_style"])

            self.line_height_edit.setText(self.data.add_page_horizontal_disabled["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.add_page_horizontal_disabled["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.add_page_horizontal_disabled["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.add_page_horizontal_disabled["text_align"])
            self.text_decoration.setCurrentText(self.data.add_page_horizontal_disabled["text_decoration"])
            self.text_transform.setCurrentText(self.data.add_page_horizontal_disabled["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.add_page_horizontal_disabled["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.add_page_horizontal_disabled["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.add_page_horizontal_disabled["background_color"])

            self.border.setText(self.data.add_page_horizontal_disabled["border"])
            self.border_width.setValue(int(self.data.add_page_horizontal_disabled["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.add_page_horizontal_disabled["border_width_type"])

            self.border_style.setCurrentText(self.data.add_page_horizontal_disabled["border_style"])
            self.border_color.setText(self.data.add_page_horizontal_disabled["border_color"])

            self.border_right.setText(self.data.add_page_horizontal_disabled["border_right"])
            self.border_left.setText(self.data.add_page_horizontal_disabled["border_left"])
            self.border_bottom.setText(self.data.add_page_horizontal_disabled["border_bottom"])
            self.border_top.setText(self.data.add_page_horizontal_disabled["border_top"])

            self.border_radius.setText(self.data.add_page_horizontal_disabled["border_radius"])

            self.padding_top_spb.setValue(int(self.data.add_page_horizontal_disabled["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.add_page_horizontal_disabled["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.add_page_horizontal_disabled["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.add_page_horizontal_disabled["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.add_page_horizontal_disabled["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.add_page_horizontal_disabled["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.add_page_horizontal_disabled["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.add_page_horizontal_disabled["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.add_page_horizontal_disabled["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.add_page_horizontal_disabled["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.add_page_horizontal_disabled["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.add_page_horizontal_disabled["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.add_page_horizontal_disabled["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.add_page_horizontal_disabled["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.add_page_horizontal_disabled["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.add_page_horizontal_disabled["margin_left_type"])

        elif self.cb.currentText() == "::sub-page:horizontal":
            self.color.setText(self.data.sub_page_horizontal["color"])

            self.image.setText(self.data.sub_page_horizontal["image"])
            self.outline.setText(self.data.sub_page_horizontal["outline"])

            self.width_spin.setValue(int(self.data.sub_page_horizontal["width_value"]))
            self.width_cb.setCurrentText(self.data.sub_page_horizontal["width_type"])
            self.height_spin.setValue(int(self.data.sub_page_horizontal["height_value"]))
            self.height_cb.setCurrentText(self.data.sub_page_horizontal["height_type"])

            self.f_family_edit.setText(self.data.sub_page_horizontal["font_family"])
            self.f_size_spin.setText(self.data.sub_page_horizontal["font_size"])
            self.f_weight_cb.setCurrentText(self.data.sub_page_horizontal["font_weight"])
            self.f_style_cb.setCurrentText(self.data.sub_page_horizontal["font_style"])

            self.line_height_edit.setText(self.data.sub_page_horizontal["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.sub_page_horizontal["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.sub_page_horizontal["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.sub_page_horizontal["text_align"])
            self.text_decoration.setCurrentText(self.data.sub_page_horizontal["text_decoration"])
            self.text_transform.setCurrentText(self.data.sub_page_horizontal["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.sub_page_horizontal["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.sub_page_horizontal["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.sub_page_horizontal["background_color"])

            self.border.setText(self.data.sub_page_horizontal["border"])
            self.border_width.setValue(int(self.data.sub_page_horizontal["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.sub_page_horizontal["border_width_type"])

            self.border_style.setCurrentText(self.data.sub_page_horizontal["border_style"])
            self.border_color.setText(self.data.sub_page_horizontal["border_color"])

            self.border_right.setText(self.data.sub_page_horizontal["border_right"])
            self.border_left.setText(self.data.sub_page_horizontal["border_left"])
            self.border_bottom.setText(self.data.sub_page_horizontal["border_bottom"])
            self.border_top.setText(self.data.sub_page_horizontal["border_top"])

            self.border_radius.setText(self.data.sub_page_horizontal["border_radius"])

            self.padding_top_spb.setValue(int(self.data.sub_page_horizontal["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.sub_page_horizontal["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.sub_page_horizontal["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.sub_page_horizontal["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.sub_page_horizontal["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.sub_page_horizontal["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.sub_page_horizontal["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.sub_page_horizontal["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.sub_page_horizontal["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.sub_page_horizontal["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.sub_page_horizontal["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.sub_page_horizontal["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.sub_page_horizontal["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.sub_page_horizontal["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.sub_page_horizontal["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.sub_page_horizontal["margin_left_type"])

        elif self.cb.currentText() == "::sub-page:horizontal:disabled":
            self.color.setText(self.data.sub_page_horizontal_disabled["color"])

            self.image.setText(self.data.sub_page_horizontal_disabled["image"])
            self.outline.setText(self.data.sub_page_horizontal_disabled["outline"])

            self.width_spin.setValue(int(self.data.sub_page_horizontal_disabled["width_value"]))
            self.width_cb.setCurrentText(self.data.sub_page_horizontal_disabled["width_type"])
            self.height_spin.setValue(int(self.data.sub_page_horizontal_disabled["height_value"]))
            self.height_cb.setCurrentText(self.data.sub_page_horizontal_disabled["height_type"])

            self.f_family_edit.setText(self.data.sub_page_horizontal_disabled["font_family"])
            self.f_size_spin.setText(self.data.sub_page_horizontal_disabled["font_size"])
            self.f_weight_cb.setCurrentText(self.data.sub_page_horizontal_disabled["font_weight"])
            self.f_style_cb.setCurrentText(self.data.sub_page_horizontal_disabled["font_style"])

            self.line_height_edit.setText(self.data.sub_page_horizontal_disabled["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.sub_page_horizontal_disabled["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.sub_page_horizontal_disabled["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.sub_page_horizontal_disabled["text_align"])
            self.text_decoration.setCurrentText(self.data.sub_page_horizontal_disabled["text_decoration"])
            self.text_transform.setCurrentText(self.data.sub_page_horizontal_disabled["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.sub_page_horizontal_disabled["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.sub_page_horizontal_disabled["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.sub_page_horizontal_disabled["background_color"])

            self.border.setText(self.data.sub_page_horizontal_disabled["border"])
            self.border_width.setValue(int(self.data.sub_page_horizontal_disabled["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.sub_page_horizontal_disabled["border_width_type"])

            self.border_style.setCurrentText(self.data.sub_page_horizontal_disabled["border_style"])
            self.border_color.setText(self.data.sub_page_horizontal_disabled["border_color"])

            self.border_right.setText(self.data.sub_page_horizontal_disabled["border_right"])
            self.border_left.setText(self.data.sub_page_horizontal_disabled["border_left"])
            self.border_bottom.setText(self.data.sub_page_horizontal_disabled["border_bottom"])
            self.border_top.setText(self.data.sub_page_horizontal_disabled["border_top"])

            self.border_radius.setText(self.data.sub_page_horizontal_disabled["border_radius"])

            self.padding_top_spb.setValue(int(self.data.sub_page_horizontal_disabled["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.sub_page_horizontal_disabled["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.sub_page_horizontal_disabled["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.sub_page_horizontal_disabled["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.sub_page_horizontal_disabled["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.sub_page_horizontal_disabled["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.sub_page_horizontal_disabled["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.sub_page_horizontal_disabled["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.sub_page_horizontal_disabled["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.sub_page_horizontal_disabled["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.sub_page_horizontal_disabled["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.sub_page_horizontal_disabled["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.sub_page_horizontal_disabled["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.sub_page_horizontal_disabled["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.sub_page_horizontal_disabled["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.sub_page_horizontal_disabled["margin_left_type"])

        elif self.cb.currentText() == "::item" and self.cb2.currentText() == "QMenuBar":
            self.color.setText(self.data.bitem["color"])

            self.image.setText(self.data.bitem["image"])
            self.outline.setText(self.data.bitem["outline"])

            self.width_spin.setValue(int(self.data.bitem["width_value"]))
            self.width_cb.setCurrentText(self.data.bitem["width_type"])
            self.height_spin.setValue(int(self.data.bitem["height_value"]))
            self.height_cb.setCurrentText(self.data.bitem["height_type"])

            self.f_family_edit.setText(self.data.bitem["font_family"])
            self.f_size_spin.setText(self.data.bitem["font_size"])
            self.f_weight_cb.setCurrentText(self.data.bitem["font_weight"])
            self.f_style_cb.setCurrentText(self.data.bitem["font_style"])

            self.line_height_edit.setText(self.data.bitem["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.bitem["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.bitem["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.bitem["text_align"])
            self.text_decoration.setCurrentText(self.data.bitem["text_decoration"])
            self.text_transform.setCurrentText(self.data.bitem["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.bitem["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.bitem["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.bitem["background_color"])

            self.border.setText(self.data.bitem["border"])
            self.border_width.setValue(int(self.data.bitem["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.bitem["border_width_type"])

            self.border_style.setCurrentText(self.data.bitem["border_style"])
            self.border_color.setText(self.data.bitem["border_color"])

            self.border_right.setText(self.data.bitem["border_right"])
            self.border_left.setText(self.data.bitem["border_left"])
            self.border_bottom.setText(self.data.bitem["border_bottom"])
            self.border_top.setText(self.data.bitem["border_top"])

            self.border_radius.setText(self.data.bitem["border_radius"])

            self.padding_top_spb.setValue(int(self.data.bitem["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.bitem["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.bitem["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.bitem["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.bitem["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.bitem["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.bitem["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.bitem["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.bitem["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.bitem["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.bitem["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.bitem["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.bitem["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.bitem["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.bitem["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.bitem["margin_left_type"])

        elif self.cb.currentText() == "::item" and self.cb2.currentText() not in ["QMenuBar"]:
            self.color.setText(self.data.item["color"])

            self.image.setText(self.data.item["image"])
            self.outline.setText(self.data.item["outline"])

            self.width_spin.setValue(int(self.data.item["width_value"]))
            self.width_cb.setCurrentText(self.data.item["width_type"])
            self.height_spin.setValue(int(self.data.item["height_value"]))
            self.height_cb.setCurrentText(self.data.item["height_type"])

            self.f_family_edit.setText(self.data.item["font_family"])
            self.f_size_spin.setText(self.data.item["font_size"])
            self.f_weight_cb.setCurrentText(self.data.item["font_weight"])
            self.f_style_cb.setCurrentText(self.data.item["font_style"])

            self.line_height_edit.setText(self.data.item["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.item["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.item["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.item["text_align"])
            self.text_decoration.setCurrentText(self.data.item["text_decoration"])
            self.text_transform.setCurrentText(self.data.item["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.item["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.item["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.item["background_color"])

            self.border.setText(self.data.item["border"])
            self.border_width.setValue(int(self.data.item["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.item["border_width_type"])

            self.border_style.setCurrentText(self.data.item["border_style"])
            self.border_color.setText(self.data.item["border_color"])

            self.border_right.setText(self.data.item["border_right"])
            self.border_left.setText(self.data.item["border_left"])
            self.border_bottom.setText(self.data.item["border_bottom"])
            self.border_top.setText(self.data.item["border_top"])

            self.border_radius.setText(self.data.item["border_radius"])

            self.padding_top_spb.setValue(int(self.data.item["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.item["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.item["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.item["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.item["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.item["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.item["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.item["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.item["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.item["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.item["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.item["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.item["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.item["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.item["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.item["margin_left_type"])

        elif self.cb.currentText() == "::item:hover":
            self.color.setText(self.data.item_hover["color"])

            self.image.setText(self.data.item_hover["image"])
            self.outline.setText(self.data.item_hover["outline"])

            self.width_spin.setValue(int(self.data.item_hover["width_value"]))
            self.width_cb.setCurrentText(self.data.item_hover["width_type"])
            self.height_spin.setValue(int(self.data.item_hover["height_value"]))
            self.height_cb.setCurrentText(self.data.item_hover["height_type"])

            self.f_family_edit.setText(self.data.item_hover["font_family"])
            self.f_size_spin.setText(self.data.item_hover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.item_hover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.item_hover["font_style"])

            self.line_height_edit.setText(self.data.item_hover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.item_hover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.item_hover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.item_hover["text_align"])
            self.text_decoration.setCurrentText(self.data.item_hover["text_decoration"])
            self.text_transform.setCurrentText(self.data.item_hover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.item_hover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.item_hover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.item_hover["background_color"])

            self.border.setText(self.data.item_hover["border"])
            self.border_width.setValue(int(self.data.item_hover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.item_hover["border_width_type"])

            self.border_style.setCurrentText(self.data.item_hover["border_style"])
            self.border_color.setText(self.data.item_hover["border_color"])

            self.border_right.setText(self.data.item_hover["border_right"])
            self.border_left.setText(self.data.item_hover["border_left"])
            self.border_bottom.setText(self.data.item_hover["border_bottom"])
            self.border_top.setText(self.data.item_hover["border_top"])

            self.border_radius.setText(self.data.item_hover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.item_hover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.item_hover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.item_hover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.item_hover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.item_hover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.item_hover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.item_hover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.item_hover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.item_hover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.item_hover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.item_hover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.item_hover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.item_hover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.item_hover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.item_hover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.item_hover["margin_left_type"])

        elif self.cb.currentText() == "::item:alternate":
            self.color.setText(self.data.item_alternate["color"])

            self.image.setText(self.data.item_alternate["image"])
            self.outline.setText(self.data.item_alternate["outline"])

            self.width_spin.setValue(int(self.data.item_alternate["width_value"]))
            self.width_cb.setCurrentText(self.data.item_alternate["width_type"])
            self.height_spin.setValue(int(self.data.item_alternate["height_value"]))
            self.height_cb.setCurrentText(self.data.item_alternate["height_type"])

            self.f_family_edit.setText(self.data.item_alternate["font_family"])
            self.f_size_spin.setText(self.data.item_alternate["font_size"])
            self.f_weight_cb.setCurrentText(self.data.item_alternate["font_weight"])
            self.f_style_cb.setCurrentText(self.data.item_alternate["font_style"])

            self.line_height_edit.setText(self.data.item_alternate["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.item_alternate["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.item_alternate["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.item_alternate["text_align"])
            self.text_decoration.setCurrentText(self.data.item_alternate["text_decoration"])
            self.text_transform.setCurrentText(self.data.item_alternate["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.item_alternate["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.item_alternate["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.item_alternate["background_color"])

            self.border.setText(self.data.item_alternate["border"])
            self.border_width.setValue(int(self.data.item_alternate["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.item_alternate["border_width_type"])

            self.border_style.setCurrentText(self.data.item_alternate["border_style"])
            self.border_color.setText(self.data.item_alternate["border_color"])

            self.border_right.setText(self.data.item_alternate["border_right"])
            self.border_left.setText(self.data.item_alternate["border_left"])
            self.border_bottom.setText(self.data.item_alternate["border_bottom"])
            self.border_top.setText(self.data.item_alternate["border_top"])

            self.border_radius.setText(self.data.item_alternate["border_radius"])

            self.padding_top_spb.setValue(int(self.data.item_alternate["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.item_alternate["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.item_alternate["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.item_alternate["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.item_alternate["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.item_alternate["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.item_alternate["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.item_alternate["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.item_alternate["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.item_alternate["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.item_alternate["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.item_alternate["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.item_alternate["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.item_alternate["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.item_alternate["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.item_alternate["margin_left_type"])

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() == "QMenuBar":
            self.color.setText(self.data.bitem_selected["color"])

            self.image.setText(self.data.bitem_selected["image"])
            self.outline.setText(self.data.bitem_selected["outline"])

            self.width_spin.setValue(int(self.data.bitem_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.bitem_selected["width_type"])
            self.height_spin.setValue(int(self.data.bitem_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.bitem_selected["height_type"])

            self.f_family_edit.setText(self.data.bitem_selected["font_family"])
            self.f_size_spin.setText(self.data.bitem_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.bitem_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.bitem_selected["font_style"])

            self.line_height_edit.setText(self.data.bitem_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.bitem_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.bitem_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.bitem_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.bitem_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.bitem_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.bitem_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.bitem_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.bitem_selected["background_color"])

            self.border.setText(self.data.bitem_selected["border"])
            self.border_width.setValue(int(self.data.bitem_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.bitem_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.bitem_selected["border_style"])
            self.border_color.setText(self.data.bitem_selected["border_color"])

            self.border_right.setText(self.data.bitem_selected["border_right"])
            self.border_left.setText(self.data.bitem_selected["border_left"])
            self.border_bottom.setText(self.data.bitem_selected["border_bottom"])
            self.border_top.setText(self.data.bitem_selected["border_top"])

            self.border_radius.setText(self.data.bitem_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.bitem_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.bitem_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.bitem_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.bitem_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.bitem_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.bitem_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.bitem_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.bitem_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.bitem_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.bitem_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.bitem_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.bitem_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.bitem_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.bitem_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.bitem_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.bitem_selected["margin_left_type"])

        elif self.cb.currentText() == "::item:selected" and self.cb2.currentText() not in ["QMenuBar"]:
            self.color.setText(self.data.item_selected["color"])

            self.image.setText(self.data.item_selected["image"])
            self.outline.setText(self.data.item_selected["outline"])

            self.width_spin.setValue(int(self.data.item_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.item_selected["width_type"])
            self.height_spin.setValue(int(self.data.item_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.item_selected["height_type"])

            self.f_family_edit.setText(self.data.item_selected["font_family"])
            self.f_size_spin.setText(self.data.item_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.item_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.item_selected["font_style"])

            self.line_height_edit.setText(self.data.item_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.item_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.item_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.item_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.item_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.item_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.item_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.item_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.item_selected["background_color"])

            self.border.setText(self.data.item_selected["border"])
            self.border_width.setValue(int(self.data.item_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.item_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.item_selected["border_style"])
            self.border_color.setText(self.data.item_selected["border_color"])

            self.border_right.setText(self.data.item_selected["border_right"])
            self.border_left.setText(self.data.item_selected["border_left"])
            self.border_bottom.setText(self.data.item_selected["border_bottom"])
            self.border_top.setText(self.data.item_selected["border_top"])

            self.border_radius.setText(self.data.item_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.item_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.item_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.item_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.item_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.item_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.item_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.item_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.item_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.item_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.item_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.item_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.item_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.item_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.item_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.item_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.item_selected["margin_left_type"])

        elif self.cb.currentText() == "::item:pressed":
            self.color.setText(self.data.item_pressed["color"])

            self.image.setText(self.data.item_pressed["image"])
            self.outline.setText(self.data.item_pressed["outline"])

            self.width_spin.setValue(int(self.data.item_pressed["width_value"]))
            self.width_cb.setCurrentText(self.data.item_pressed["width_type"])
            self.height_spin.setValue(int(self.data.item_pressed["height_value"]))
            self.height_cb.setCurrentText(self.data.item_pressed["height_type"])

            self.f_family_edit.setText(self.data.item_pressed["font_family"])
            self.f_size_spin.setText(self.data.item_pressed["font_size"])
            self.f_weight_cb.setCurrentText(self.data.item_pressed["font_weight"])
            self.f_style_cb.setCurrentText(self.data.item_pressed["font_style"])

            self.line_height_edit.setText(self.data.item_pressed["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.item_pressed["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.item_pressed["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.item_pressed["text_align"])
            self.text_decoration.setCurrentText(self.data.item_pressed["text_decoration"])
            self.text_transform.setCurrentText(self.data.item_pressed["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.item_pressed["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.item_pressed["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.item_pressed["background_color"])

            self.border.setText(self.data.item_pressed["border"])
            self.border_width.setValue(int(self.data.item_pressed["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.item_pressed["border_width_type"])

            self.border_style.setCurrentText(self.data.item_pressed["border_style"])
            self.border_color.setText(self.data.item_pressed["border_color"])

            self.border_right.setText(self.data.item_pressed["border_right"])
            self.border_left.setText(self.data.item_pressed["border_left"])
            self.border_bottom.setText(self.data.item_pressed["border_bottom"])
            self.border_top.setText(self.data.item_pressed["border_top"])

            self.border_radius.setText(self.data.item_pressed["border_radius"])

            self.padding_top_spb.setValue(int(self.data.item_pressed["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.item_pressed["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.item_pressed["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.item_pressed["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.item_pressed["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.item_pressed["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.item_pressed["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.item_pressed["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.item_pressed["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.item_pressed["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.item_pressed["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.item_pressed["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.item_pressed["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.item_pressed["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.item_pressed["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.item_pressed["margin_left_type"])

        elif self.cb.currentText() == "::item:selected:active":
            self.color.setText(self.data.item_selected_active["color"])

            self.image.setText(self.data.item_selected_active["image"])
            self.outline.setText(self.data.item_selected_active["outline"])

            self.width_spin.setValue(int(self.data.item_selected_active["width_value"]))
            self.width_cb.setCurrentText(self.data.item_selected_active["width_type"])
            self.height_spin.setValue(int(self.data.item_selected_active["height_value"]))
            self.height_cb.setCurrentText(self.data.item_selected_active["height_type"])

            self.f_family_edit.setText(self.data.item_selected_active["font_family"])
            self.f_size_spin.setText(self.data.item_selected_active["font_size"])
            self.f_weight_cb.setCurrentText(self.data.item_selected_active["font_weight"])
            self.f_style_cb.setCurrentText(self.data.item_selected_active["font_style"])

            self.line_height_edit.setText(self.data.item_selected_active["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.item_selected_active["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.item_selected_active["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.item_selected_active["text_align"])
            self.text_decoration.setCurrentText(self.data.item_selected_active["text_decoration"])
            self.text_transform.setCurrentText(self.data.item_selected_active["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.item_selected_active["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.item_selected_active["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.item_selected_active["background_color"])

            self.border.setText(self.data.item_selected_active["border"])
            self.border_width.setValue(int(self.data.item_selected_active["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.item_selected_active["border_width_type"])

            self.border_style.setCurrentText(self.data.item_selected_active["border_style"])
            self.border_color.setText(self.data.item_selected_active["border_color"])

            self.border_right.setText(self.data.item_selected_active["border_right"])
            self.border_left.setText(self.data.item_selected_active["border_left"])
            self.border_bottom.setText(self.data.item_selected_active["border_bottom"])
            self.border_top.setText(self.data.item_selected_active["border_top"])

            self.border_radius.setText(self.data.item_selected_active["border_radius"])

            self.padding_top_spb.setValue(int(self.data.item_selected_active["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.item_selected_active["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.item_selected_active["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.item_selected_active["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.item_selected_active["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.item_selected_active["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.item_selected_active["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.item_selected_active["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.item_selected_active["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.item_selected_active["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.item_selected_active["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.item_selected_active["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.item_selected_active["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.item_selected_active["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.item_selected_active["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.item_selected_active["margin_left_type"])

        elif self.cb.currentText() == "::item:selected:!active":
            self.color.setText(self.data.item_selected_u_active["color"])

            self.image.setText(self.data.item_selected_u_active["image"])
            self.outline.setText(self.data.item_selected_u_active["outline"])

            self.width_spin.setValue(int(self.data.item_selected_u_active["width_value"]))
            self.width_cb.setCurrentText(self.data.item_selected_u_active["width_type"])
            self.height_spin.setValue(int(self.data.item_selected_u_active["height_value"]))
            self.height_cb.setCurrentText(self.data.item_selected_u_active["height_type"])

            self.f_family_edit.setText(self.data.item_selected_u_active["font_family"])
            self.f_size_spin.setText(self.data.item_selected_u_active["font_size"])
            self.f_weight_cb.setCurrentText(self.data.item_selected_u_active["font_weight"])
            self.f_style_cb.setCurrentText(self.data.item_selected_u_active["font_style"])

            self.line_height_edit.setText(self.data.item_selected_u_active["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.item_selected_u_active["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.item_selected_u_active["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.item_selected_u_active["text_align"])
            self.text_decoration.setCurrentText(self.data.item_selected_u_active["text_decoration"])
            self.text_transform.setCurrentText(self.data.item_selected_u_active["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.item_selected_u_active["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.item_selected_u_active["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.item_selected_u_active["background_color"])

            self.border.setText(self.data.item_selected_u_active["border"])
            self.border_width.setValue(int(self.data.item_selected_u_active["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.item_selected_u_active["border_width_type"])

            self.border_style.setCurrentText(self.data.item_selected_u_active["border_style"])
            self.border_color.setText(self.data.item_selected_u_active["border_color"])

            self.border_right.setText(self.data.item_selected_u_active["border_right"])
            self.border_left.setText(self.data.item_selected_u_active["border_left"])
            self.border_bottom.setText(self.data.item_selected_u_active["border_bottom"])
            self.border_top.setText(self.data.item_selected_u_active["border_top"])

            self.border_radius.setText(self.data.item_selected_u_active["border_radius"])

            self.padding_top_spb.setValue(int(self.data.item_selected_u_active["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.item_selected_u_active["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.item_selected_u_active["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.item_selected_u_active["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.item_selected_u_active["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.item_selected_u_active["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.item_selected_u_active["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.item_selected_u_active["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.item_selected_u_active["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.item_selected_u_active["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.item_selected_u_active["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.item_selected_u_active["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.item_selected_u_active["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.item_selected_u_active["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.item_selected_u_active["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.item_selected_u_active["margin_left_type"])

        elif self.cb.currentText() == "::chunk":
            self.color.setText(self.data.chunk["color"])

            self.image.setText(self.data.chunk["image"])
            self.outline.setText(self.data.chunk["outline"])

            self.width_spin.setValue(int(self.data.chunk["width_value"]))
            self.width_cb.setCurrentText(self.data.chunk["width_type"])
            self.height_spin.setValue(int(self.data.chunk["height_value"]))
            self.height_cb.setCurrentText(self.data.chunk["height_type"])

            self.f_family_edit.setText(self.data.chunk["font_family"])
            self.f_size_spin.setText(self.data.chunk["font_size"])
            self.f_weight_cb.setCurrentText(self.data.chunk["font_weight"])
            self.f_style_cb.setCurrentText(self.data.chunk["font_style"])

            self.line_height_edit.setText(self.data.chunk["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.chunk["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.chunk["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.chunk["text_align"])
            self.text_decoration.setCurrentText(self.data.chunk["text_decoration"])
            self.text_transform.setCurrentText(self.data.chunk["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.chunk["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.chunk["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.chunk["background_color"])

            self.border.setText(self.data.chunk["border"])
            self.border_width.setValue(int(self.data.chunk["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.chunk["border_width_type"])

            self.border_style.setCurrentText(self.data.chunk["border_style"])
            self.border_color.setText(self.data.chunk["border_color"])

            self.border_right.setText(self.data.chunk["border_right"])
            self.border_left.setText(self.data.chunk["border_left"])
            self.border_bottom.setText(self.data.chunk["border_bottom"])
            self.border_top.setText(self.data.chunk["border_top"])

            self.border_radius.setText(self.data.chunk["border_radius"])

            self.padding_top_spb.setValue(int(self.data.chunk["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.chunk["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.chunk["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.chunk["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.chunk["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.chunk["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.chunk["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.chunk["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.chunk["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.chunk["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.chunk["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.chunk["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.chunk["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.chunk["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.chunk["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.chunk["margin_left_type"])

        elif self.cb.currentText() == "::chunk:hover":
            self.color.setText(self.data.chunk_hover["color"])

            self.image.setText(self.data.chunk_hover["image"])
            self.outline.setText(self.data.chunk_hover["outline"])

            self.width_spin.setValue(int(self.data.chunk_hover["width_value"]))
            self.width_cb.setCurrentText(self.data.chunk_hover["width_type"])
            self.height_spin.setValue(int(self.data.chunk_hover["height_value"]))
            self.height_cb.setCurrentText(self.data.chunk_hover["height_type"])

            self.f_family_edit.setText(self.data.chunk_hover["font_family"])
            self.f_size_spin.setText(self.data.chunk_hover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.chunk_hover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.chunk_hover["font_style"])

            self.line_height_edit.setText(self.data.chunk_hover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.chunk_hover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.chunk_hover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.chunk_hover["text_align"])
            self.text_decoration.setCurrentText(self.data.chunk_hover["text_decoration"])
            self.text_transform.setCurrentText(self.data.chunk_hover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.chunk_hover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.chunk_hover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.chunk_hover["background_color"])

            self.border.setText(self.data.chunk_hover["border"])
            self.border_width.setValue(int(self.data.chunk_hover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.chunk_hover["border_width_type"])

            self.border_style.setCurrentText(self.data.chunk_hover["border_style"])
            self.border_color.setText(self.data.chunk_hover["border_color"])

            self.border_right.setText(self.data.chunk_hover["border_right"])
            self.border_left.setText(self.data.chunk_hover["border_left"])
            self.border_bottom.setText(self.data.chunk_hover["border_bottom"])
            self.border_top.setText(self.data.chunk_hover["border_top"])

            self.border_radius.setText(self.data.chunk_hover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.chunk_hover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.chunk_hover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.chunk_hover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.chunk_hover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.chunk_hover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.chunk_hover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.chunk_hover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.chunk_hover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.chunk_hover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.chunk_hover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.chunk_hover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.chunk_hover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.chunk_hover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.chunk_hover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.chunk_hover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.chunk_hover["margin_left_type"])

        elif self.cb.currentText() == "::pane":
            self.color.setText(self.data.pane["color"])

            self.image.setText(self.data.pane["image"])
            self.outline.setText(self.data.pane["outline"])

            self.width_spin.setValue(int(self.data.pane["width_value"]))
            self.width_cb.setCurrentText(self.data.pane["width_type"])
            self.height_spin.setValue(int(self.data.pane["height_value"]))
            self.height_cb.setCurrentText(self.data.pane["height_type"])

            self.f_family_edit.setText(self.data.pane["font_family"])
            self.f_size_spin.setText(self.data.pane["font_size"])
            self.f_weight_cb.setCurrentText(self.data.pane["font_weight"])
            self.f_style_cb.setCurrentText(self.data.pane["font_style"])

            self.line_height_edit.setText(self.data.pane["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.pane["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.pane["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.pane["text_align"])
            self.text_decoration.setCurrentText(self.data.pane["text_decoration"])
            self.text_transform.setCurrentText(self.data.pane["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.pane["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.pane["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.pane["background_color"])

            self.border.setText(self.data.pane["border"])
            self.border_width.setValue(int(self.data.pane["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.pane["border_width_type"])

            self.border_style.setCurrentText(self.data.pane["border_style"])
            self.border_color.setText(self.data.pane["border_color"])

            self.border_right.setText(self.data.pane["border_right"])
            self.border_left.setText(self.data.pane["border_left"])
            self.border_bottom.setText(self.data.pane["border_bottom"])
            self.border_top.setText(self.data.pane["border_top"])

            self.border_radius.setText(self.data.pane["border_radius"])

            self.padding_top_spb.setValue(int(self.data.pane["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.pane["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.pane["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.pane["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.pane["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.pane["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.pane["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.pane["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.pane["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.pane["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.pane["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.pane["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.pane["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.pane["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.pane["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.pane["margin_left_type"])

        elif self.cb.currentText() == "::tab-bar":
            self.color.setText(self.data.tab_bar["color"])

            self.image.setText(self.data.tab_bar["image"])
            self.outline.setText(self.data.tab_bar["outline"])

            self.width_spin.setValue(int(self.data.tab_bar["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_bar["width_type"])
            self.height_spin.setValue(int(self.data.tab_bar["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_bar["height_type"])

            self.f_family_edit.setText(self.data.tab_bar["font_family"])
            self.f_size_spin.setText(self.data.tab_bar["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_bar["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_bar["font_style"])

            self.line_height_edit.setText(self.data.tab_bar["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_bar["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_bar["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_bar["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_bar["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_bar["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_bar["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_bar["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_bar["background_color"])

            self.border.setText(self.data.tab_bar["border"])
            self.border_width.setValue(int(self.data.tab_bar["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_bar["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_bar["border_style"])
            self.border_color.setText(self.data.tab_bar["border_color"])

            self.border_right.setText(self.data.tab_bar["border_right"])
            self.border_left.setText(self.data.tab_bar["border_left"])
            self.border_bottom.setText(self.data.tab_bar["border_bottom"])
            self.border_top.setText(self.data.tab_bar["border_top"])

            self.border_radius.setText(self.data.tab_bar["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_bar["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_bar["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_bar["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_bar["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_bar["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_bar["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_bar["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_bar["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_bar["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_bar["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_bar["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_bar["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_bar["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_bar["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_bar["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_bar["margin_left_type"])

        elif self.cb.currentText() == "::tab-bar:top":
            self.color.setText(self.data.tab_bar_top["color"])

            self.image.setText(self.data.tab_bar_top["image"])
            self.outline.setText(self.data.tab_bar_top["outline"])

            self.width_spin.setValue(int(self.data.tab_bar_top["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_bar_top["width_type"])
            self.height_spin.setValue(int(self.data.tab_bar_top["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_bar_top["height_type"])

            self.f_family_edit.setText(self.data.tab_bar_top["font_family"])
            self.f_size_spin.setText(self.data.tab_bar_top["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_bar_top["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_bar_top["font_style"])

            self.line_height_edit.setText(self.data.tab_bar_top["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_bar_top["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_bar_top["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_bar_top["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_bar_top["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_bar_top["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_bar_top["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_bar_top["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_bar_top["background_color"])

            self.border.setText(self.data.tab_bar_top["border"])
            self.border_width.setValue(int(self.data.tab_bar_top["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_bar_top["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_bar_top["border_style"])
            self.border_color.setText(self.data.tab_bar_top["border_color"])

            self.border_right.setText(self.data.tab_bar_top["border_right"])
            self.border_left.setText(self.data.tab_bar_top["border_left"])
            self.border_bottom.setText(self.data.tab_bar_top["border_bottom"])
            self.border_top.setText(self.data.tab_bar_top["border_top"])

            self.border_radius.setText(self.data.tab_bar_top["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_bar_top["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_bar_top["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_bar_top["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_bar_top["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_bar_top["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_bar_top["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_bar_top["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_bar_top["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_bar_top["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_bar_top["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_bar_top["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_bar_top["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_bar_top["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_bar_top["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_bar_top["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_bar_top["margin_left_type"])

        elif self.cb.currentText() == "::tab-bar:right":
            self.color.setText(self.data.tab_bar_right["color"])

            self.image.setText(self.data.tab_bar_right["image"])
            self.outline.setText(self.data.tab_bar_right["outline"])

            self.width_spin.setValue(int(self.data.tab_bar_right["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_bar_right["width_type"])
            self.height_spin.setValue(int(self.data.tab_bar_right["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_bar_right["height_type"])

            self.f_family_edit.setText(self.data.tab_bar_right["font_family"])
            self.f_size_spin.setText(self.data.tab_bar_right["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_bar_right["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_bar_right["font_style"])

            self.line_height_edit.setText(self.data.tab_bar_right["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_bar_right["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_bar_right["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_bar_right["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_bar_right["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_bar_right["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_bar_right["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_bar_right["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_bar_right["background_color"])

            self.border.setText(self.data.tab_bar_right["border"])
            self.border_width.setValue(int(self.data.tab_bar_right["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_bar_right["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_bar_right["border_style"])
            self.border_color.setText(self.data.tab_bar_right["border_color"])

            self.border_right.setText(self.data.tab_bar_right["border_right"])
            self.border_left.setText(self.data.tab_bar_right["border_left"])
            self.border_bottom.setText(self.data.tab_bar_right["border_bottom"])
            self.border_top.setText(self.data.tab_bar_right["border_top"])

            self.border_radius.setText(self.data.tab_bar_right["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_bar_right["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_bar_right["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_bar_right["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_bar_right["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_bar_right["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_bar_right["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_bar_right["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_bar_right["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_bar_right["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_bar_right["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_bar_right["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_bar_right["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_bar_right["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_bar_right["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_bar_right["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_bar_right["margin_left_type"])

        elif self.cb.currentText() == "::tab-bar:bottom":
            self.color.setText(self.data.tab_bar_bottom["color"])

            self.image.setText(self.data.tab_bar_bottom["image"])
            self.outline.setText(self.data.tab_bar_bottom["outline"])

            self.width_spin.setValue(int(self.data.tab_bar_bottom["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_bar_bottom["width_type"])
            self.height_spin.setValue(int(self.data.tab_bar_bottom["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_bar_bottom["height_type"])

            self.f_family_edit.setText(self.data.tab_bar_bottom["font_family"])
            self.f_size_spin.setText(self.data.tab_bar_bottom["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_bar_bottom["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_bar_bottom["font_style"])

            self.line_height_edit.setText(self.data.tab_bar_bottom["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_bar_bottom["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_bar_bottom["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_bar_bottom["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_bar_bottom["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_bar_bottom["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_bar_bottom["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_bar_bottom["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_bar_bottom["background_color"])

            self.border.setText(self.data.tab_bar_bottom["border"])
            self.border_width.setValue(int(self.data.tab_bar_bottom["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_bar_bottom["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_bar_bottom["border_style"])
            self.border_color.setText(self.data.tab_bar_bottom["border_color"])

            self.border_right.setText(self.data.tab_bar_bottom["border_right"])
            self.border_left.setText(self.data.tab_bar_bottom["border_left"])
            self.border_bottom.setText(self.data.tab_bar_bottom["border_bottom"])
            self.border_top.setText(self.data.tab_bar_bottom["border_top"])

            self.border_radius.setText(self.data.tab_bar_bottom["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_bar_bottom["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_bar_bottom["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_bar_bottom["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_bar_bottom["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_bar_bottom["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_bar_bottom["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_bar_bottom["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_bar_bottom["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_bar_bottom["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_bar_bottom["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_bar_bottom["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_bar_bottom["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_bar_bottom["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_bar_bottom["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_bar_bottom["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_bar_bottom["margin_left_type"])

        elif self.cb.currentText() == "::tab-bar:left":
            self.color.setText(self.data.tab_bar_left["color"])

            self.image.setText(self.data.tab_bar_left["image"])
            self.outline.setText(self.data.tab_bar_left["outline"])

            self.width_spin.setValue(int(self.data.tab_bar_left["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_bar_left["width_type"])
            self.height_spin.setValue(int(self.data.tab_bar_left["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_bar_left["height_type"])

            self.f_family_edit.setText(self.data.tab_bar_left["font_family"])
            self.f_size_spin.setText(self.data.tab_bar_left["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_bar_left["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_bar_left["font_style"])

            self.line_height_edit.setText(self.data.tab_bar_left["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_bar_left["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_bar_left["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_bar_left["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_bar_left["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_bar_left["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_bar_left["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_bar_left["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_bar_left["background_color"])

            self.border.setText(self.data.tab_bar_left["border"])
            self.border_width.setValue(int(self.data.tab_bar_left["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_bar_left["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_bar_left["border_style"])
            self.border_color.setText(self.data.tab_bar_left["border_color"])

            self.border_right.setText(self.data.tab_bar_left["border_right"])
            self.border_left.setText(self.data.tab_bar_left["border_left"])
            self.border_bottom.setText(self.data.tab_bar_left["border_bottom"])
            self.border_top.setText(self.data.tab_bar_left["border_top"])

            self.border_radius.setText(self.data.tab_bar_left["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_bar_left["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_bar_left["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_bar_left["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_bar_left["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_bar_left["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_bar_left["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_bar_left["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_bar_left["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_bar_left["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_bar_left["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_bar_left["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_bar_left["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_bar_left["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_bar_left["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_bar_left["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_bar_left["margin_left_type"])

        elif self.cb.currentText() == "::tab":
            self.color.setText(self.data.tab["color"])

            self.image.setText(self.data.tab["image"])
            self.outline.setText(self.data.tab["outline"])

            self.width_spin.setValue(int(self.data.tab["width_value"]))
            self.width_cb.setCurrentText(self.data.tab["width_type"])
            self.height_spin.setValue(int(self.data.tab["height_value"]))
            self.height_cb.setCurrentText(self.data.tab["height_type"])

            self.f_family_edit.setText(self.data.tab["font_family"])
            self.f_size_spin.setText(self.data.tab["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab["font_style"])

            self.line_height_edit.setText(self.data.tab["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab["text_align"])
            self.text_decoration.setCurrentText(self.data.tab["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab["background_color"])

            self.border.setText(self.data.tab["border"])
            self.border_width.setValue(int(self.data.tab["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab["border_width_type"])

            self.border_style.setCurrentText(self.data.tab["border_style"])
            self.border_color.setText(self.data.tab["border_color"])

            self.border_right.setText(self.data.tab["border_right"])
            self.border_left.setText(self.data.tab["border_left"])
            self.border_bottom.setText(self.data.tab["border_bottom"])
            self.border_top.setText(self.data.tab["border_top"])

            self.border_radius.setText(self.data.tab["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab["margin_left_type"])

        elif self.cb.currentText() == "::tear":
            self.color.setText(self.data.tear["color"])

            self.image.setText(self.data.tear["image"])
            self.outline.setText(self.data.tear["outline"])

            self.width_spin.setValue(int(self.data.tear["width_value"]))
            self.width_cb.setCurrentText(self.data.tear["width_type"])
            self.height_spin.setValue(int(self.data.tear["height_value"]))
            self.height_cb.setCurrentText(self.data.tear["height_type"])

            self.f_family_edit.setText(self.data.tear["font_family"])
            self.f_size_spin.setText(self.data.tear["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tear["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tear["font_style"])

            self.line_height_edit.setText(self.data.tear["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tear["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tear["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tear["text_align"])
            self.text_decoration.setCurrentText(self.data.tear["text_decoration"])
            self.text_transform.setCurrentText(self.data.tear["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tear["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tear["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tear["background_color"])

            self.border.setText(self.data.tear["border"])
            self.border_width.setValue(int(self.data.tear["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tear["border_width_type"])

            self.border_style.setCurrentText(self.data.tear["border_style"])
            self.border_color.setText(self.data.tear["border_color"])

            self.border_right.setText(self.data.tear["border_right"])
            self.border_left.setText(self.data.tear["border_left"])
            self.border_bottom.setText(self.data.tear["border_bottom"])
            self.border_top.setText(self.data.tear["border_top"])

            self.border_radius.setText(self.data.tear["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tear["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tear["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tear["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tear["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tear["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tear["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tear["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tear["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tear["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tear["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tear["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tear["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tear["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tear["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tear["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tear["margin_left_type"])

        elif self.cb.currentText() == "::scroller":
            self.color.setText(self.data.scroller["color"])

            self.image.setText(self.data.scroller["image"])
            self.outline.setText(self.data.scroller["outline"])

            self.width_spin.setValue(int(self.data.scroller["width_value"]))
            self.width_cb.setCurrentText(self.data.scroller["width_type"])
            self.height_spin.setValue(int(self.data.scroller["height_value"]))
            self.height_cb.setCurrentText(self.data.scroller["height_type"])

            self.f_family_edit.setText(self.data.scroller["font_family"])
            self.f_size_spin.setText(self.data.scroller["font_size"])
            self.f_weight_cb.setCurrentText(self.data.scroller["font_weight"])
            self.f_style_cb.setCurrentText(self.data.scroller["font_style"])

            self.line_height_edit.setText(self.data.scroller["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.scroller["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.scroller["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.scroller["text_align"])
            self.text_decoration.setCurrentText(self.data.scroller["text_decoration"])
            self.text_transform.setCurrentText(self.data.scroller["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.scroller["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.scroller["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.scroller["background_color"])

            self.border.setText(self.data.scroller["border"])
            self.border_width.setValue(int(self.data.scroller["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.scroller["border_width_type"])

            self.border_style.setCurrentText(self.data.scroller["border_style"])
            self.border_color.setText(self.data.scroller["border_color"])

            self.border_right.setText(self.data.scroller["border_right"])
            self.border_left.setText(self.data.scroller["border_left"])
            self.border_bottom.setText(self.data.scroller["border_bottom"])
            self.border_top.setText(self.data.scroller["border_top"])

            self.border_radius.setText(self.data.scroller["border_radius"])

            self.padding_top_spb.setValue(int(self.data.scroller["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.scroller["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.scroller["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.scroller["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.scroller["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.scroller["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.scroller["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.scroller["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.scroller["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.scroller["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.scroller["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.scroller["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.scroller["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.scroller["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.scroller["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.scroller["margin_left_type"])

        elif self.cb.currentText() == "::tab:hover":
            self.color.setText(self.data.tab_hover["color"])

            self.image.setText(self.data.tab_hover["image"])
            self.outline.setText(self.data.tab_hover["outline"])

            self.width_spin.setValue(int(self.data.tab_hover["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_hover["width_type"])
            self.height_spin.setValue(int(self.data.tab_hover["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_hover["height_type"])

            self.f_family_edit.setText(self.data.tab_hover["font_family"])
            self.f_size_spin.setText(self.data.tab_hover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_hover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_hover["font_style"])

            self.line_height_edit.setText(self.data.tab_hover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_hover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_hover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_hover["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_hover["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_hover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_hover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_hover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_hover["background_color"])

            self.border.setText(self.data.tab_hover["border"])
            self.border_width.setValue(int(self.data.tab_hover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_hover["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_hover["border_style"])
            self.border_color.setText(self.data.tab_hover["border_color"])

            self.border_right.setText(self.data.tab_hover["border_right"])
            self.border_left.setText(self.data.tab_hover["border_left"])
            self.border_bottom.setText(self.data.tab_hover["border_bottom"])
            self.border_top.setText(self.data.tab_hover["border_top"])

            self.border_radius.setText(self.data.tab_hover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_hover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_hover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_hover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_hover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_hover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_hover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_hover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_hover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_hover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_hover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_hover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_hover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_hover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_hover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_hover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_hover["margin_left_type"])

        elif self.cb.currentText() == "::tab:selected":
            self.color.setText(self.data.tab_selected["color"])

            self.image.setText(self.data.tab_selected["image"])
            self.outline.setText(self.data.tab_selected["outline"])

            self.width_spin.setValue(int(self.data.tab_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_selected["width_type"])
            self.height_spin.setValue(int(self.data.tab_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_selected["height_type"])

            self.f_family_edit.setText(self.data.tab_selected["font_family"])
            self.f_size_spin.setText(self.data.tab_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_selected["font_style"])

            self.line_height_edit.setText(self.data.tab_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_selected["background_color"])

            self.border.setText(self.data.tab_selected["border"])
            self.border_width.setValue(int(self.data.tab_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_selected["border_style"])
            self.border_color.setText(self.data.tab_selected["border_color"])

            self.border_right.setText(self.data.tab_selected["border_right"])
            self.border_left.setText(self.data.tab_selected["border_left"])
            self.border_bottom.setText(self.data.tab_selected["border_bottom"])
            self.border_top.setText(self.data.tab_selected["border_top"])

            self.border_radius.setText(self.data.tab_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_selected["margin_left_type"])

        elif self.cb.currentText() == "::tab:!selected":
            self.color.setText(self.data.tab_u_selected["color"])

            self.image.setText(self.data.tab_u_selected["image"])
            self.outline.setText(self.data.tab_u_selected["outline"])

            self.width_spin.setValue(int(self.data.tab_u_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_u_selected["width_type"])
            self.height_spin.setValue(int(self.data.tab_u_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_u_selected["height_type"])

            self.f_family_edit.setText(self.data.tab_u_selected["font_family"])
            self.f_size_spin.setText(self.data.tab_u_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_u_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_u_selected["font_style"])

            self.line_height_edit.setText(self.data.tab_u_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_u_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_u_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_u_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_u_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_u_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_u_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_u_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_u_selected["background_color"])

            self.border.setText(self.data.tab_u_selected["border"])
            self.border_width.setValue(int(self.data.tab_u_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_u_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_u_selected["border_style"])
            self.border_color.setText(self.data.tab_u_selected["border_color"])

            self.border_right.setText(self.data.tab_u_selected["border_right"])
            self.border_left.setText(self.data.tab_u_selected["border_left"])
            self.border_bottom.setText(self.data.tab_u_selected["border_bottom"])
            self.border_top.setText(self.data.tab_u_selected["border_top"])

            self.border_radius.setText(self.data.tab_u_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_u_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_u_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_u_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_u_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_u_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_u_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_u_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_u_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_u_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_u_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_u_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_u_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_u_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_u_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_u_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_u_selected["margin_left_type"])

        elif self.cb.currentText() == "::tab:!selected:hover":
            self.color.setText(self.data.tab_u_selected_hover["color"])

            self.image.setText(self.data.tab_u_selected_hover["image"])
            self.outline.setText(self.data.tab_u_selected_hover["outline"])

            self.width_spin.setValue(int(self.data.tab_u_selected_hover["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_u_selected_hover["width_type"])
            self.height_spin.setValue(int(self.data.tab_u_selected_hover["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_u_selected_hover["height_type"])

            self.f_family_edit.setText(self.data.tab_u_selected_hover["font_family"])
            self.f_size_spin.setText(self.data.tab_u_selected_hover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_u_selected_hover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_u_selected_hover["font_style"])

            self.line_height_edit.setText(self.data.tab_u_selected_hover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_u_selected_hover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_u_selected_hover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_u_selected_hover["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_u_selected_hover["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_u_selected_hover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_u_selected_hover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_u_selected_hover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_u_selected_hover["background_color"])

            self.border.setText(self.data.tab_u_selected_hover["border"])
            self.border_width.setValue(int(self.data.tab_u_selected_hover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_u_selected_hover["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_u_selected_hover["border_style"])
            self.border_color.setText(self.data.tab_u_selected_hover["border_color"])

            self.border_right.setText(self.data.tab_u_selected_hover["border_right"])
            self.border_left.setText(self.data.tab_u_selected_hover["border_left"])
            self.border_bottom.setText(self.data.tab_u_selected_hover["border_bottom"])
            self.border_top.setText(self.data.tab_u_selected_hover["border_top"])

            self.border_radius.setText(self.data.tab_u_selected_hover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_u_selected_hover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_u_selected_hover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_u_selected_hover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_u_selected_hover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_u_selected_hover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_u_selected_hover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_u_selected_hover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_u_selected_hover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_u_selected_hover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_u_selected_hover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_u_selected_hover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_u_selected_hover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_u_selected_hover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_u_selected_hover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_u_selected_hover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_u_selected_hover["margin_left_type"])

        elif self.cb.currentText() == "::tab:first:selected":
            self.color.setText(self.data.tab_first_selected["color"])

            self.image.setText(self.data.tab_first_selected["image"])
            self.outline.setText(self.data.tab_first_selected["outline"])

            self.width_spin.setValue(int(self.data.tab_first_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_first_selected["width_type"])
            self.height_spin.setValue(int(self.data.tab_first_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_first_selected["height_type"])

            self.f_family_edit.setText(self.data.tab_first_selected["font_family"])
            self.f_size_spin.setText(self.data.tab_first_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_first_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_first_selected["font_style"])

            self.line_height_edit.setText(self.data.tab_first_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_first_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_first_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_first_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_first_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_first_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_first_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_first_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_first_selected["background_color"])

            self.border.setText(self.data.tab_first_selected["border"])
            self.border_width.setValue(int(self.data.tab_first_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_first_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_first_selected["border_style"])
            self.border_color.setText(self.data.tab_first_selected["border_color"])

            self.border_right.setText(self.data.tab_first_selected["border_right"])
            self.border_left.setText(self.data.tab_first_selected["border_left"])
            self.border_bottom.setText(self.data.tab_first_selected["border_bottom"])
            self.border_top.setText(self.data.tab_first_selected["border_top"])

            self.border_radius.setText(self.data.tab_first_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_first_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_first_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_first_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_first_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_first_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_first_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_first_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_first_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_first_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_first_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_first_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_first_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_first_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_first_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_first_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_first_selected["margin_left_type"])

        elif self.cb.currentText() == "::tab:last:selected":
            self.color.setText(self.data.tab_last_selected["color"])

            self.image.setText(self.data.tab_last_selected["image"])
            self.outline.setText(self.data.tab_last_selected["outline"])

            self.width_spin.setValue(int(self.data.tab_last_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_last_selected["width_type"])
            self.height_spin.setValue(int(self.data.tab_last_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_last_selected["height_type"])

            self.f_family_edit.setText(self.data.tab_last_selected["font_family"])
            self.f_size_spin.setText(self.data.tab_last_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_last_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_last_selected["font_style"])

            self.line_height_edit.setText(self.data.tab_last_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_last_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_last_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_last_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_last_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_last_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_last_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_last_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_last_selected["background_color"])

            self.border.setText(self.data.tab_last_selected["border"])
            self.border_width.setValue(int(self.data.tab_last_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_last_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_last_selected["border_style"])
            self.border_color.setText(self.data.tab_last_selected["border_color"])

            self.border_right.setText(self.data.tab_last_selected["border_right"])
            self.border_left.setText(self.data.tab_last_selected["border_left"])
            self.border_bottom.setText(self.data.tab_last_selected["border_bottom"])
            self.border_top.setText(self.data.tab_last_selected["border_top"])

            self.border_radius.setText(self.data.tab_last_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_last_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_last_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_last_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_last_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_last_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_last_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_last_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_last_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_last_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_last_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_last_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_last_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_last_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_last_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_last_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_last_selected["margin_left_type"])

        elif self.cb.currentText() == "::tab:top":
            self.color.setText(self.data.tab_top["color"])

            self.image.setText(self.data.tab_top["image"])
            self.outline.setText(self.data.tab_top["outline"])

            self.width_spin.setValue(int(self.data.tab_top["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_top["width_type"])
            self.height_spin.setValue(int(self.data.tab_top["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_top["height_type"])

            self.f_family_edit.setText(self.data.tab_top["font_family"])
            self.f_size_spin.setText(self.data.tab_top["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_top["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_top["font_style"])

            self.line_height_edit.setText(self.data.tab_top["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_top["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_top["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_top["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_top["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_top["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_top["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_top["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_top["background_color"])

            self.border.setText(self.data.tab_top["border"])
            self.border_width.setValue(int(self.data.tab_top["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_top["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_top["border_style"])
            self.border_color.setText(self.data.tab_top["border_color"])

            self.border_right.setText(self.data.tab_top["border_right"])
            self.border_left.setText(self.data.tab_top["border_left"])
            self.border_bottom.setText(self.data.tab_top["border_bottom"])
            self.border_top.setText(self.data.tab_top["border_top"])

            self.border_radius.setText(self.data.tab_top["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_top["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_top["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_top["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_top["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_top["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_top["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_top["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_top["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_top["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_top["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_top["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_top["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_top["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_top["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_top["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_top["margin_left_type"])

        elif self.cb.currentText() == "::tab:top:selected":
            self.color.setText(self.data.tab_top_selected["color"])

            self.image.setText(self.data.tab_top_selected["image"])
            self.outline.setText(self.data.tab_top_selected["outline"])

            self.width_spin.setValue(int(self.data.tab_top_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_top_selected["width_type"])
            self.height_spin.setValue(int(self.data.tab_top_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_top_selected["height_type"])

            self.f_family_edit.setText(self.data.tab_top_selected["font_family"])
            self.f_size_spin.setText(self.data.tab_top_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_top_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_top_selected["font_style"])

            self.line_height_edit.setText(self.data.tab_top_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_top_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_top_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_top_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_top_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_top_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_top_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_top_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_top_selected["background_color"])

            self.border.setText(self.data.tab_top_selected["border"])
            self.border_width.setValue(int(self.data.tab_top_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_top_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_top_selected["border_style"])
            self.border_color.setText(self.data.tab_top_selected["border_color"])

            self.border_right.setText(self.data.tab_top_selected["border_right"])
            self.border_left.setText(self.data.tab_top_selected["border_left"])
            self.border_bottom.setText(self.data.tab_top_selected["border_bottom"])
            self.border_top.setText(self.data.tab_top_selected["border_top"])

            self.border_radius.setText(self.data.tab_top_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_top_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_top_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_top_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_top_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_top_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_top_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_top_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_top_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_top_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_top_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_top_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_top_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_top_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_top_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_top_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_top_selected["margin_left_type"])

        elif self.cb.currentText() == "::tab:top:!selected":
            self.color.setText(self.data.tab_top_u_selected["color"])

            self.image.setText(self.data.tab_top_u_selected["image"])
            self.outline.setText(self.data.tab_top_u_selected["outline"])

            self.width_spin.setValue(int(self.data.tab_top_u_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_top_u_selected["width_type"])
            self.height_spin.setValue(int(self.data.tab_top_u_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_top_u_selected["height_type"])

            self.f_family_edit.setText(self.data.tab_top_u_selected["font_family"])
            self.f_size_spin.setText(self.data.tab_top_u_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_top_u_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_top_u_selected["font_style"])

            self.line_height_edit.setText(self.data.tab_top_u_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_top_u_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_top_u_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_top_u_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_top_u_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_top_u_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_top_u_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_top_u_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_top_u_selected["background_color"])

            self.border.setText(self.data.tab_top_u_selected["border"])
            self.border_width.setValue(int(self.data.tab_top_u_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_top_u_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_top_u_selected["border_style"])
            self.border_color.setText(self.data.tab_top_u_selected["border_color"])

            self.border_right.setText(self.data.tab_top_u_selected["border_right"])
            self.border_left.setText(self.data.tab_top_u_selected["border_left"])
            self.border_bottom.setText(self.data.tab_top_u_selected["border_bottom"])
            self.border_top.setText(self.data.tab_top_u_selected["border_top"])

            self.border_radius.setText(self.data.tab_top_u_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_top_u_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_top_u_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_top_u_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_top_u_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_top_u_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_top_u_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_top_u_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_top_u_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_top_u_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_top_u_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_top_u_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_top_u_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_top_u_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_top_u_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_top_u_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_top_u_selected["margin_left_type"])

        elif self.cb.currentText() == "::tab:right":
            self.color.setText(self.data.tab_right["color"])

            self.image.setText(self.data.tab_right["image"])
            self.outline.setText(self.data.tab_right["outline"])

            self.width_spin.setValue(int(self.data.tab_right["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_right["width_type"])
            self.height_spin.setValue(int(self.data.tab_right["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_right["height_type"])

            self.f_family_edit.setText(self.data.tab_right["font_family"])
            self.f_size_spin.setText(self.data.tab_right["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_right["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_right["font_style"])

            self.line_height_edit.setText(self.data.tab_right["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_right["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_right["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_right["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_right["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_right["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_right["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_right["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_right["background_color"])

            self.border.setText(self.data.tab_right["border"])
            self.border_width.setValue(int(self.data.tab_right["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_right["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_right["border_style"])
            self.border_color.setText(self.data.tab_right["border_color"])

            self.border_right.setText(self.data.tab_right["border_right"])
            self.border_left.setText(self.data.tab_right["border_left"])
            self.border_bottom.setText(self.data.tab_right["border_bottom"])
            self.border_top.setText(self.data.tab_right["border_top"])

            self.border_radius.setText(self.data.tab_right["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_right["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_right["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_right["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_right["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_right["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_right["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_right["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_right["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_right["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_right["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_right["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_right["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_right["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_right["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_right["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_right["margin_left_type"])

        elif self.cb.currentText() == "::tab:right:selected":
            self.color.setText(self.data.tab_right_selected["color"])

            self.image.setText(self.data.tab_right_selected["image"])
            self.outline.setText(self.data.tab_right_selected["outline"])

            self.width_spin.setValue(int(self.data.tab_right_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_right_selected["width_type"])
            self.height_spin.setValue(int(self.data.tab_right_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_right_selected["height_type"])

            self.f_family_edit.setText(self.data.tab_right_selected["font_family"])
            self.f_size_spin.setText(self.data.tab_right_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_right_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_right_selected["font_style"])

            self.line_height_edit.setText(self.data.tab_right_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_right_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_right_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_right_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_right_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_right_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_right_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_right_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_right_selected["background_color"])

            self.border.setText(self.data.tab_right_selected["border"])
            self.border_width.setValue(int(self.data.tab_right_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_right_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_right_selected["border_style"])
            self.border_color.setText(self.data.tab_right_selected["border_color"])

            self.border_right.setText(self.data.tab_right_selected["border_right"])
            self.border_left.setText(self.data.tab_right_selected["border_left"])
            self.border_bottom.setText(self.data.tab_right_selected["border_bottom"])
            self.border_top.setText(self.data.tab_right_selected["border_top"])

            self.border_radius.setText(self.data.tab_right_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_right_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_right_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_right_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_right_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_right_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_right_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_right_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_right_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_right_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_right_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_right_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_right_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_right_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_right_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_right_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_right_selected["margin_left_type"])

        elif self.cb.currentText() == "::tab:right:!selected":
            self.color.setText(self.data.tab_right_u_selected["color"])

            self.image.setText(self.data.tab_right_u_selected["image"])
            self.outline.setText(self.data.tab_right_u_selected["outline"])

            self.width_spin.setValue(int(self.data.tab_right_u_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_right_u_selected["width_type"])
            self.height_spin.setValue(int(self.data.tab_right_u_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_right_u_selected["height_type"])

            self.f_family_edit.setText(self.data.tab_right_u_selected["font_family"])
            self.f_size_spin.setText(self.data.tab_right_u_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_right_u_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_right_u_selected["font_style"])

            self.line_height_edit.setText(self.data.tab_right_u_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_right_u_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_right_u_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_right_u_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_right_u_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_right_u_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_right_u_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_right_u_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_right_u_selected["background_color"])

            self.border.setText(self.data.tab_right_u_selected["border"])
            self.border_width.setValue(int(self.data.tab_right_u_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_right_u_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_right_u_selected["border_style"])
            self.border_color.setText(self.data.tab_right_u_selected["border_color"])

            self.border_right.setText(self.data.tab_right_u_selected["border_right"])
            self.border_left.setText(self.data.tab_right_u_selected["border_left"])
            self.border_bottom.setText(self.data.tab_right_u_selected["border_bottom"])
            self.border_top.setText(self.data.tab_right_u_selected["border_top"])

            self.border_radius.setText(self.data.tab_right_u_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_right_u_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_right_u_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_right_u_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_right_u_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_right_u_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_right_u_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_right_u_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_right_u_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_right_u_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_right_u_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_right_u_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_right_u_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_right_u_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_right_u_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_right_u_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_right_u_selected["margin_left_type"])

        elif self.cb.currentText() == "::tab:bottom":
            self.color.setText(self.data.tab_bottom["color"])

            self.image.setText(self.data.tab_bottom["image"])
            self.outline.setText(self.data.tab_bottom["outline"])

            self.width_spin.setValue(int(self.data.tab_bottom["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_bottom["width_type"])
            self.height_spin.setValue(int(self.data.tab_bottom["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_bottom["height_type"])

            self.f_family_edit.setText(self.data.tab_bottom["font_family"])
            self.f_size_spin.setText(self.data.tab_bottom["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_bottom["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_bottom["font_style"])

            self.line_height_edit.setText(self.data.tab_bottom["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_bottom["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_bottom["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_bottom["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_bottom["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_bottom["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_bottom["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_bottom["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_bottom["background_color"])

            self.border.setText(self.data.tab_bottom["border"])
            self.border_width.setValue(int(self.data.tab_bottom["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_bottom["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_bottom["border_style"])
            self.border_color.setText(self.data.tab_bottom["border_color"])

            self.border_right.setText(self.data.tab_bottom["border_right"])
            self.border_left.setText(self.data.tab_bottom["border_left"])
            self.border_bottom.setText(self.data.tab_bottom["border_bottom"])
            self.border_top.setText(self.data.tab_bottom["border_top"])

            self.border_radius.setText(self.data.tab_bottom["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_bottom["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_bottom["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_bottom["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_bottom["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_bottom["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_bottom["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_bottom["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_bottom["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_bottom["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_bottom["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_bottom["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_bottom["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_bottom["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_bottom["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_bottom["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_bottom["margin_left_type"])

        elif self.cb.currentText() == "::tab:bottom:selected":
            self.color.setText(self.data.tab_bottom_selected["color"])

            self.image.setText(self.data.tab_bottom_selected["image"])
            self.outline.setText(self.data.tab_bottom_selected["outline"])

            self.width_spin.setValue(int(self.data.tab_bottom_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_bottom_selected["width_type"])
            self.height_spin.setValue(int(self.data.tab_bottom_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_bottom_selected["height_type"])

            self.f_family_edit.setText(self.data.tab_bottom_selected["font_family"])
            self.f_size_spin.setText(self.data.tab_bottom_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_bottom_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_bottom_selected["font_style"])

            self.line_height_edit.setText(self.data.tab_bottom_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_bottom_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_bottom_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_bottom_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_bottom_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_bottom_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_bottom_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_bottom_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_bottom_selected["background_color"])

            self.border.setText(self.data.tab_bottom_selected["border"])
            self.border_width.setValue(int(self.data.tab_bottom_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_bottom_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_bottom_selected["border_style"])
            self.border_color.setText(self.data.tab_bottom_selected["border_color"])

            self.border_right.setText(self.data.tab_bottom_selected["border_right"])
            self.border_left.setText(self.data.tab_bottom_selected["border_left"])
            self.border_bottom.setText(self.data.tab_bottom_selected["border_bottom"])
            self.border_top.setText(self.data.tab_bottom_selected["border_top"])

            self.border_radius.setText(self.data.tab_bottom_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_bottom_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_bottom_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_bottom_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_bottom_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_bottom_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_bottom_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_bottom_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_bottom_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_bottom_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_bottom_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_bottom_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_bottom_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_bottom_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_bottom_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_bottom_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_bottom_selected["margin_left_type"])

        elif self.cb.currentText() == "::tab:bottom:!selected":
            self.color.setText(self.data.tab_bottom_u_selected["color"])

            self.image.setText(self.data.tab_bottom_u_selected["image"])
            self.outline.setText(self.data.tab_bottom_u_selected["outline"])

            self.width_spin.setValue(int(self.data.tab_bottom_u_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_bottom_u_selected["width_type"])
            self.height_spin.setValue(int(self.data.tab_bottom_u_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_bottom_u_selected["height_type"])

            self.f_family_edit.setText(self.data.tab_bottom_u_selected["font_family"])
            self.f_size_spin.setText(self.data.tab_bottom_u_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_bottom_u_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_bottom_u_selected["font_style"])

            self.line_height_edit.setText(self.data.tab_bottom_u_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_bottom_u_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_bottom_u_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_bottom_u_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_bottom_u_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_bottom_u_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_bottom_u_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_bottom_u_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_bottom_u_selected["background_color"])

            self.border.setText(self.data.tab_bottom_u_selected["border"])
            self.border_width.setValue(int(self.data.tab_bottom_u_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_bottom_u_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_bottom_u_selected["border_style"])
            self.border_color.setText(self.data.tab_bottom_u_selected["border_color"])

            self.border_right.setText(self.data.tab_bottom_u_selected["border_right"])
            self.border_left.setText(self.data.tab_bottom_u_selected["border_left"])
            self.border_bottom.setText(self.data.tab_bottom_u_selected["border_bottom"])
            self.border_top.setText(self.data.tab_bottom_u_selected["border_top"])

            self.border_radius.setText(self.data.tab_bottom_u_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_bottom_u_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_bottom_u_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_bottom_u_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_bottom_u_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_bottom_u_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_bottom_u_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_bottom_u_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_bottom_u_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_bottom_u_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_bottom_u_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_bottom_u_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_bottom_u_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_bottom_u_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_bottom_u_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_bottom_u_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_bottom_u_selected["margin_left_type"])

        elif self.cb.currentText() == "::tab:left":
            self.color.setText(self.data.tab_left["color"])

            self.image.setText(self.data.tab_left["image"])
            self.outline.setText(self.data.tab_left["outline"])

            self.width_spin.setValue(int(self.data.tab_left["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_left["width_type"])
            self.height_spin.setValue(int(self.data.tab_left["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_left["height_type"])

            self.f_family_edit.setText(self.data.tab_left["font_family"])
            self.f_size_spin.setText(self.data.tab_left["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_left["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_left["font_style"])

            self.line_height_edit.setText(self.data.tab_left["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_left["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_left["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_left["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_left["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_left["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_left["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_left["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_left["background_color"])

            self.border.setText(self.data.tab_left["border"])
            self.border_width.setValue(int(self.data.tab_left["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_left["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_left["border_style"])
            self.border_color.setText(self.data.tab_left["border_color"])

            self.border_right.setText(self.data.tab_left["border_right"])
            self.border_left.setText(self.data.tab_left["border_left"])
            self.border_bottom.setText(self.data.tab_left["border_bottom"])
            self.border_top.setText(self.data.tab_left["border_top"])

            self.border_radius.setText(self.data.tab_left["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_left["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_left["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_left["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_left["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_left["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_left["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_left["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_left["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_left["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_left["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_left["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_left["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_left["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_left["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_left["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_left["margin_left_type"])

        elif self.cb.currentText() == "::tab:left:selected":
            self.color.setText(self.data.tab_left_selected["color"])

            self.image.setText(self.data.tab_left_selected["image"])
            self.outline.setText(self.data.tab_left_selected["outline"])

            self.width_spin.setValue(int(self.data.tab_left_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_left_selected["width_type"])
            self.height_spin.setValue(int(self.data.tab_left_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_left_selected["height_type"])

            self.f_family_edit.setText(self.data.tab_left_selected["font_family"])
            self.f_size_spin.setText(self.data.tab_left_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_left_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_left_selected["font_style"])

            self.line_height_edit.setText(self.data.tab_left_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_left_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_left_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_left_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_left_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_left_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_left_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_left_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_left_selected["background_color"])

            self.border.setText(self.data.tab_left_selected["border"])
            self.border_width.setValue(int(self.data.tab_left_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_left_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_left_selected["border_style"])
            self.border_color.setText(self.data.tab_left_selected["border_color"])

            self.border_right.setText(self.data.tab_left_selected["border_right"])
            self.border_left.setText(self.data.tab_left_selected["border_left"])
            self.border_bottom.setText(self.data.tab_left_selected["border_bottom"])
            self.border_top.setText(self.data.tab_left_selected["border_top"])

            self.border_radius.setText(self.data.tab_left_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_left_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_left_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_left_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_left_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_left_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_left_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_left_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_left_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_left_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_left_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_left_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_left_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_left_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_left_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_left_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_left_selected["margin_left_type"])

        elif self.cb.currentText() == "::tab:left:!selected":
            self.color.setText(self.data.tab_left_u_selected["color"])

            self.image.setText(self.data.tab_left_u_selected["image"])
            self.outline.setText(self.data.tab_left_u_selected["outline"])

            self.width_spin.setValue(int(self.data.tab_left_u_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_left_u_selected["width_type"])
            self.height_spin.setValue(int(self.data.tab_left_u_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_left_u_selected["height_type"])

            self.f_family_edit.setText(self.data.tab_left_u_selected["font_family"])
            self.f_size_spin.setText(self.data.tab_left_u_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_left_u_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_left_u_selected["font_style"])

            self.line_height_edit.setText(self.data.tab_left_u_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_left_u_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_left_u_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_left_u_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_left_u_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_left_u_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_left_u_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_left_u_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_left_u_selected["background_color"])

            self.border.setText(self.data.tab_left_u_selected["border"])
            self.border_width.setValue(int(self.data.tab_left_u_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_left_u_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_left_u_selected["border_style"])
            self.border_color.setText(self.data.tab_left_u_selected["border_color"])

            self.border_right.setText(self.data.tab_left_u_selected["border_right"])
            self.border_left.setText(self.data.tab_left_u_selected["border_left"])
            self.border_bottom.setText(self.data.tab_left_u_selected["border_bottom"])
            self.border_top.setText(self.data.tab_left_u_selected["border_top"])

            self.border_radius.setText(self.data.tab_left_u_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_left_u_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_left_u_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_left_u_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_left_u_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_left_u_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_left_u_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_left_u_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_left_u_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_left_u_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_left_u_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_left_u_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_left_u_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_left_u_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_left_u_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_left_u_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_left_u_selected["margin_left_type"])

        elif self.cb.currentText() == "::close-button":
            self.color.setText(self.data.close_button["color"])

            self.image.setText(self.data.close_button["image"])
            self.outline.setText(self.data.close_button["outline"])

            self.width_spin.setValue(int(self.data.close_button["width_value"]))
            self.width_cb.setCurrentText(self.data.close_button["width_type"])
            self.height_spin.setValue(int(self.data.close_button["height_value"]))
            self.height_cb.setCurrentText(self.data.close_button["height_type"])

            self.f_family_edit.setText(self.data.close_button["font_family"])
            self.f_size_spin.setText(self.data.close_button["font_size"])
            self.f_weight_cb.setCurrentText(self.data.close_button["font_weight"])
            self.f_style_cb.setCurrentText(self.data.close_button["font_style"])

            self.line_height_edit.setText(self.data.close_button["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.close_button["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.close_button["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.close_button["text_align"])
            self.text_decoration.setCurrentText(self.data.close_button["text_decoration"])
            self.text_transform.setCurrentText(self.data.close_button["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.close_button["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.close_button["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.close_button["background_color"])

            self.border.setText(self.data.close_button["border"])
            self.border_width.setValue(int(self.data.close_button["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.close_button["border_width_type"])

            self.border_style.setCurrentText(self.data.close_button["border_style"])
            self.border_color.setText(self.data.close_button["border_color"])

            self.border_right.setText(self.data.close_button["border_right"])
            self.border_left.setText(self.data.close_button["border_left"])
            self.border_bottom.setText(self.data.close_button["border_bottom"])
            self.border_top.setText(self.data.close_button["border_top"])

            self.border_radius.setText(self.data.close_button["border_radius"])

            self.padding_top_spb.setValue(int(self.data.close_button["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.close_button["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.close_button["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.close_button["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.close_button["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.close_button["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.close_button["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.close_button["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.close_button["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.close_button["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.close_button["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.close_button["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.close_button["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.close_button["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.close_button["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.close_button["margin_left_type"])

        elif self.cb.currentText() == "::close-button:hover":
            self.color.setText(self.data.close_button_hover["color"])

            self.image.setText(self.data.close_button_hover["image"])
            self.outline.setText(self.data.close_button_hover["outline"])

            self.width_spin.setValue(int(self.data.close_button_hover["width_value"]))
            self.width_cb.setCurrentText(self.data.close_button_hover["width_type"])
            self.height_spin.setValue(int(self.data.close_button_hover["height_value"]))
            self.height_cb.setCurrentText(self.data.close_button_hover["height_type"])

            self.f_family_edit.setText(self.data.close_button_hover["font_family"])
            self.f_size_spin.setText(self.data.close_button_hover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.close_button_hover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.close_button_hover["font_style"])

            self.line_height_edit.setText(self.data.close_button_hover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.close_button_hover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.close_button_hover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.close_button_hover["text_align"])
            self.text_decoration.setCurrentText(self.data.close_button_hover["text_decoration"])
            self.text_transform.setCurrentText(self.data.close_button_hover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.close_button_hover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.close_button_hover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.close_button_hover["background_color"])

            self.border.setText(self.data.close_button_hover["border"])
            self.border_width.setValue(int(self.data.close_button_hover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.close_button_hover["border_width_type"])

            self.border_style.setCurrentText(self.data.close_button_hover["border_style"])
            self.border_color.setText(self.data.close_button_hover["border_color"])

            self.border_right.setText(self.data.close_button_hover["border_right"])
            self.border_left.setText(self.data.close_button_hover["border_left"])
            self.border_bottom.setText(self.data.close_button_hover["border_bottom"])
            self.border_top.setText(self.data.close_button_hover["border_top"])

            self.border_radius.setText(self.data.close_button_hover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.close_button_hover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.close_button_hover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.close_button_hover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.close_button_hover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.close_button_hover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.close_button_hover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.close_button_hover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.close_button_hover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.close_button_hover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.close_button_hover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.close_button_hover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.close_button_hover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.close_button_hover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.close_button_hover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.close_button_hover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.close_button_hover["margin_left_type"])

        elif self.cb.currentText() == "::close-button:pressed":
            self.color.setText(self.data.close_button_pressed["color"])

            self.image.setText(self.data.close_button_pressed["image"])
            self.outline.setText(self.data.close_button_pressed["outline"])

            self.width_spin.setValue(int(self.data.close_button_pressed["width_value"]))
            self.width_cb.setCurrentText(self.data.close_button_pressed["width_type"])
            self.height_spin.setValue(int(self.data.close_button_pressed["height_value"]))
            self.height_cb.setCurrentText(self.data.close_button_pressed["height_type"])

            self.f_family_edit.setText(self.data.close_button_pressed["font_family"])
            self.f_size_spin.setText(self.data.close_button_pressed["font_size"])
            self.f_weight_cb.setCurrentText(self.data.close_button_pressed["font_weight"])
            self.f_style_cb.setCurrentText(self.data.close_button_pressed["font_style"])

            self.line_height_edit.setText(self.data.close_button_pressed["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.close_button_pressed["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.close_button_pressed["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.close_button_pressed["text_align"])
            self.text_decoration.setCurrentText(self.data.close_button_pressed["text_decoration"])
            self.text_transform.setCurrentText(self.data.close_button_pressed["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.close_button_pressed["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.close_button_pressed["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.close_button_pressed["background_color"])

            self.border.setText(self.data.close_button_pressed["border"])
            self.border_width.setValue(int(self.data.close_button_pressed["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.close_button_pressed["border_width_type"])

            self.border_style.setCurrentText(self.data.close_button_pressed["border_style"])
            self.border_color.setText(self.data.close_button_pressed["border_color"])

            self.border_right.setText(self.data.close_button_pressed["border_right"])
            self.border_left.setText(self.data.close_button_pressed["border_left"])
            self.border_bottom.setText(self.data.close_button_pressed["border_bottom"])
            self.border_top.setText(self.data.close_button_pressed["border_top"])

            self.border_radius.setText(self.data.close_button_pressed["border_radius"])

            self.padding_top_spb.setValue(int(self.data.close_button_pressed["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.close_button_pressed["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.close_button_pressed["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.close_button_pressed["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.close_button_pressed["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.close_button_pressed["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.close_button_pressed["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.close_button_pressed["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.close_button_pressed["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.close_button_pressed["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.close_button_pressed["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.close_button_pressed["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.close_button_pressed["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.close_button_pressed["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.close_button_pressed["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.close_button_pressed["margin_left_type"])

        elif self.cb.currentText() == "QToolButton":
            self.color.setText(self.data.qtoolbutton["color"])

            self.image.setText(self.data.qtoolbutton["image"])
            self.outline.setText(self.data.qtoolbutton["outline"])

            self.width_spin.setValue(int(self.data.qtoolbutton["width_value"]))
            self.width_cb.setCurrentText(self.data.qtoolbutton["width_type"])
            self.height_spin.setValue(int(self.data.qtoolbutton["height_value"]))
            self.height_cb.setCurrentText(self.data.qtoolbutton["height_type"])

            self.f_family_edit.setText(self.data.qtoolbutton["font_family"])
            self.f_size_spin.setText(self.data.qtoolbutton["font_size"])
            self.f_weight_cb.setCurrentText(self.data.qtoolbutton["font_weight"])
            self.f_style_cb.setCurrentText(self.data.qtoolbutton["font_style"])

            self.line_height_edit.setText(self.data.qtoolbutton["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.qtoolbutton["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.qtoolbutton["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.qtoolbutton["text_align"])
            self.text_decoration.setCurrentText(self.data.qtoolbutton["text_decoration"])
            self.text_transform.setCurrentText(self.data.qtoolbutton["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.qtoolbutton["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.qtoolbutton["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.qtoolbutton["background_color"])

            self.border.setText(self.data.qtoolbutton["border"])
            self.border_width.setValue(int(self.data.qtoolbutton["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.qtoolbutton["border_width_type"])

            self.border_style.setCurrentText(self.data.qtoolbutton["border_style"])
            self.border_color.setText(self.data.qtoolbutton["border_color"])

            self.border_right.setText(self.data.qtoolbutton["border_right"])
            self.border_left.setText(self.data.qtoolbutton["border_left"])
            self.border_bottom.setText(self.data.qtoolbutton["border_bottom"])
            self.border_top.setText(self.data.qtoolbutton["border_top"])

            self.border_radius.setText(self.data.qtoolbutton["border_radius"])

            self.padding_top_spb.setValue(int(self.data.qtoolbutton["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.qtoolbutton["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.qtoolbutton["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.qtoolbutton["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.qtoolbutton["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.qtoolbutton["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.qtoolbutton["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.qtoolbutton["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.qtoolbutton["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.qtoolbutton["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.qtoolbutton["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.qtoolbutton["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.qtoolbutton["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.qtoolbutton["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.qtoolbutton["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.qtoolbutton["margin_left_type"])

        elif self.cb.currentText() == "QToolButton::right-arrow":
            self.color.setText(self.data.qtoolbutton_right_arrow["color"])

            self.image.setText(self.data.qtoolbutton_right_arrow["image"])
            self.outline.setText(self.data.qtoolbutton_right_arrow["outline"])

            self.width_spin.setValue(int(self.data.qtoolbutton_right_arrow["width_value"]))
            self.width_cb.setCurrentText(self.data.qtoolbutton_right_arrow["width_type"])
            self.height_spin.setValue(int(self.data.qtoolbutton_right_arrow["height_value"]))
            self.height_cb.setCurrentText(self.data.qtoolbutton_right_arrow["height_type"])

            self.f_family_edit.setText(self.data.qtoolbutton_right_arrow["font_family"])
            self.f_size_spin.setText(self.data.qtoolbutton_right_arrow["font_size"])
            self.f_weight_cb.setCurrentText(self.data.qtoolbutton_right_arrow["font_weight"])
            self.f_style_cb.setCurrentText(self.data.qtoolbutton_right_arrow["font_style"])

            self.line_height_edit.setText(self.data.qtoolbutton_right_arrow["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.qtoolbutton_right_arrow["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.qtoolbutton_right_arrow["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.qtoolbutton_right_arrow["text_align"])
            self.text_decoration.setCurrentText(self.data.qtoolbutton_right_arrow["text_decoration"])
            self.text_transform.setCurrentText(self.data.qtoolbutton_right_arrow["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.qtoolbutton_right_arrow["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.qtoolbutton_right_arrow["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.qtoolbutton_right_arrow["background_color"])

            self.border.setText(self.data.qtoolbutton_right_arrow["border"])
            self.border_width.setValue(int(self.data.qtoolbutton_right_arrow["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.qtoolbutton_right_arrow["border_width_type"])

            self.border_style.setCurrentText(self.data.qtoolbutton_right_arrow["border_style"])
            self.border_color.setText(self.data.qtoolbutton_right_arrow["border_color"])

            self.border_right.setText(self.data.qtoolbutton_right_arrow["border_right"])
            self.border_left.setText(self.data.qtoolbutton_right_arrow["border_left"])
            self.border_bottom.setText(self.data.qtoolbutton_right_arrow["border_bottom"])
            self.border_top.setText(self.data.qtoolbutton_right_arrow["border_top"])

            self.border_radius.setText(self.data.qtoolbutton_right_arrow["border_radius"])

            self.padding_top_spb.setValue(int(self.data.qtoolbutton_right_arrow["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.qtoolbutton_right_arrow["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.qtoolbutton_right_arrow["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.qtoolbutton_right_arrow["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.qtoolbutton_right_arrow["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.qtoolbutton_right_arrow["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.qtoolbutton_right_arrow["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.qtoolbutton_right_arrow["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.qtoolbutton_right_arrow["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.qtoolbutton_right_arrow["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.qtoolbutton_right_arrow["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.qtoolbutton_right_arrow["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.qtoolbutton_right_arrow["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.qtoolbutton_right_arrow["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.qtoolbutton_right_arrow["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.qtoolbutton_right_arrow["margin_left_type"])

        elif self.cb.currentText() == "QToolButton::left-arrow":
            self.color.setText(self.data.qtoolbutton_left_arrow["color"])

            self.image.setText(self.data.qtoolbutton_left_arrow["image"])
            self.outline.setText(self.data.qtoolbutton_left_arrow["outline"])

            self.width_spin.setValue(int(self.data.qtoolbutton_left_arrow["width_value"]))
            self.width_cb.setCurrentText(self.data.qtoolbutton_left_arrow["width_type"])
            self.height_spin.setValue(int(self.data.qtoolbutton_left_arrow["height_value"]))
            self.height_cb.setCurrentText(self.data.qtoolbutton_left_arrow["height_type"])

            self.f_family_edit.setText(self.data.qtoolbutton_left_arrow["font_family"])
            self.f_size_spin.setText(self.data.qtoolbutton_left_arrow["font_size"])
            self.f_weight_cb.setCurrentText(self.data.qtoolbutton_left_arrow["font_weight"])
            self.f_style_cb.setCurrentText(self.data.qtoolbutton_left_arrow["font_style"])

            self.line_height_edit.setText(self.data.qtoolbutton_left_arrow["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.qtoolbutton_left_arrow["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.qtoolbutton_left_arrow["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.qtoolbutton_left_arrow["text_align"])
            self.text_decoration.setCurrentText(self.data.qtoolbutton_left_arrow["text_decoration"])
            self.text_transform.setCurrentText(self.data.qtoolbutton_left_arrow["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.qtoolbutton_left_arrow["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.qtoolbutton_left_arrow["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.qtoolbutton_left_arrow["background_color"])

            self.border.setText(self.data.qtoolbutton_left_arrow["border"])
            self.border_width.setValue(int(self.data.qtoolbutton_left_arrow["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.qtoolbutton_left_arrow["border_width_type"])

            self.border_style.setCurrentText(self.data.qtoolbutton_left_arrow["border_style"])
            self.border_color.setText(self.data.qtoolbutton_left_arrow["border_color"])

            self.border_right.setText(self.data.qtoolbutton_left_arrow["border_right"])
            self.border_left.setText(self.data.qtoolbutton_left_arrow["border_left"])
            self.border_bottom.setText(self.data.qtoolbutton_left_arrow["border_bottom"])
            self.border_top.setText(self.data.qtoolbutton_left_arrow["border_top"])

            self.border_radius.setText(self.data.qtoolbutton_left_arrow["border_radius"])

            self.padding_top_spb.setValue(int(self.data.qtoolbutton_left_arrow["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.qtoolbutton_left_arrow["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.qtoolbutton_left_arrow["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.qtoolbutton_left_arrow["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.qtoolbutton_left_arrow["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.qtoolbutton_left_arrow["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.qtoolbutton_left_arrow["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.qtoolbutton_left_arrow["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.qtoolbutton_left_arrow["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.qtoolbutton_left_arrow["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.qtoolbutton_left_arrow["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.qtoolbutton_left_arrow["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.qtoolbutton_left_arrow["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.qtoolbutton_left_arrow["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.qtoolbutton_left_arrow["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.qtoolbutton_left_arrow["margin_left_type"])

        elif self.cb.currentText() == "::float-button":
            self.color.setText(self.data.float_button["color"])

            self.image.setText(self.data.float_button["image"])
            self.outline.setText(self.data.float_button["outline"])

            self.width_spin.setValue(int(self.data.float_button["width_value"]))
            self.width_cb.setCurrentText(self.data.float_button["width_type"])
            self.height_spin.setValue(int(self.data.float_button["height_value"]))
            self.height_cb.setCurrentText(self.data.float_button["height_type"])

            self.f_family_edit.setText(self.data.float_button["font_family"])
            self.f_size_spin.setText(self.data.float_button["font_size"])
            self.f_weight_cb.setCurrentText(self.data.float_button["font_weight"])
            self.f_style_cb.setCurrentText(self.data.float_button["font_style"])

            self.line_height_edit.setText(self.data.float_button["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.float_button["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.float_button["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.float_button["text_align"])
            self.text_decoration.setCurrentText(self.data.float_button["text_decoration"])
            self.text_transform.setCurrentText(self.data.float_button["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.float_button["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.float_button["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.float_button["background_color"])

            self.border.setText(self.data.float_button["border"])
            self.border_width.setValue(int(self.data.float_button["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.float_button["border_width_type"])

            self.border_style.setCurrentText(self.data.float_button["border_style"])
            self.border_color.setText(self.data.float_button["border_color"])

            self.border_right.setText(self.data.float_button["border_right"])
            self.border_left.setText(self.data.float_button["border_left"])
            self.border_bottom.setText(self.data.float_button["border_bottom"])
            self.border_top.setText(self.data.float_button["border_top"])

            self.border_radius.setText(self.data.float_button["border_radius"])

            self.padding_top_spb.setValue(int(self.data.float_button["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.float_button["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.float_button["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.float_button["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.float_button["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.float_button["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.float_button["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.float_button["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.float_button["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.float_button["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.float_button["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.float_button["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.float_button["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.float_button["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.float_button["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.float_button["margin_left_type"])

        elif self.cb.currentText() == "::float-button:hover":
            self.color.setText(self.data.float_button_hover["color"])

            self.image.setText(self.data.float_button_hover["image"])
            self.outline.setText(self.data.float_button_hover["outline"])

            self.width_spin.setValue(int(self.data.float_button_hover["width_value"]))
            self.width_cb.setCurrentText(self.data.float_button_hover["width_type"])
            self.height_spin.setValue(int(self.data.float_button_hover["height_value"]))
            self.height_cb.setCurrentText(self.data.float_button_hover["height_type"])

            self.f_family_edit.setText(self.data.float_button_hover["font_family"])
            self.f_size_spin.setText(self.data.float_button_hover["font_size"])
            self.f_weight_cb.setCurrentText(self.data.float_button_hover["font_weight"])
            self.f_style_cb.setCurrentText(self.data.float_button_hover["font_style"])

            self.line_height_edit.setText(self.data.float_button_hover["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.float_button_hover["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.float_button_hover["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.float_button_hover["text_align"])
            self.text_decoration.setCurrentText(self.data.float_button_hover["text_decoration"])
            self.text_transform.setCurrentText(self.data.float_button_hover["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.float_button_hover["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.float_button_hover["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.float_button_hover["background_color"])

            self.border.setText(self.data.float_button_hover["border"])
            self.border_width.setValue(int(self.data.float_button_hover["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.float_button_hover["border_width_type"])

            self.border_style.setCurrentText(self.data.float_button_hover["border_style"])
            self.border_color.setText(self.data.float_button_hover["border_color"])

            self.border_right.setText(self.data.float_button_hover["border_right"])
            self.border_left.setText(self.data.float_button_hover["border_left"])
            self.border_bottom.setText(self.data.float_button_hover["border_bottom"])
            self.border_top.setText(self.data.float_button_hover["border_top"])

            self.border_radius.setText(self.data.float_button_hover["border_radius"])

            self.padding_top_spb.setValue(int(self.data.float_button_hover["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.float_button_hover["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.float_button_hover["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.float_button_hover["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.float_button_hover["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.float_button_hover["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.float_button_hover["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.float_button_hover["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.float_button_hover["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.float_button_hover["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.float_button_hover["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.float_button_hover["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.float_button_hover["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.float_button_hover["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.float_button_hover["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.float_button_hover["margin_left_type"])

        elif self.cb.currentText() == "::float-button:pressed":
            self.color.setText(self.data.float_button_pressed["color"])

            self.image.setText(self.data.float_button_pressed["image"])
            self.outline.setText(self.data.float_button_pressed["outline"])

            self.width_spin.setValue(int(self.data.float_button_pressed["width_value"]))
            self.width_cb.setCurrentText(self.data.float_button_pressed["width_type"])
            self.height_spin.setValue(int(self.data.float_button_pressed["height_value"]))
            self.height_cb.setCurrentText(self.data.float_button_pressed["height_type"])

            self.f_family_edit.setText(self.data.float_button_pressed["font_family"])
            self.f_size_spin.setText(self.data.float_button_pressed["font_size"])
            self.f_weight_cb.setCurrentText(self.data.float_button_pressed["font_weight"])
            self.f_style_cb.setCurrentText(self.data.float_button_pressed["font_style"])

            self.line_height_edit.setText(self.data.float_button_pressed["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.float_button_pressed["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.float_button_pressed["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.float_button_pressed["text_align"])
            self.text_decoration.setCurrentText(self.data.float_button_pressed["text_decoration"])
            self.text_transform.setCurrentText(self.data.float_button_pressed["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.float_button_pressed["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.float_button_pressed["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.float_button_pressed["background_color"])

            self.border.setText(self.data.float_button_pressed["border"])
            self.border_width.setValue(int(self.data.float_button_pressed["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.float_button_pressed["border_width_type"])

            self.border_style.setCurrentText(self.data.float_button_pressed["border_style"])
            self.border_color.setText(self.data.float_button_pressed["border_color"])

            self.border_right.setText(self.data.float_button_pressed["border_right"])
            self.border_left.setText(self.data.float_button_pressed["border_left"])
            self.border_bottom.setText(self.data.float_button_pressed["border_bottom"])
            self.border_top.setText(self.data.float_button_pressed["border_top"])

            self.border_radius.setText(self.data.float_button_pressed["border_radius"])

            self.padding_top_spb.setValue(int(self.data.float_button_pressed["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.float_button_pressed["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.float_button_pressed["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.float_button_pressed["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.float_button_pressed["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.float_button_pressed["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.float_button_pressed["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.float_button_pressed["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.float_button_pressed["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.float_button_pressed["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.float_button_pressed["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.float_button_pressed["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.float_button_pressed["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.float_button_pressed["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.float_button_pressed["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.float_button_pressed["margin_left_type"])

        elif self.cb.currentText() == "::seperator":
            self.color.setText(self.data.seperator["color"])

            self.image.setText(self.data.seperator["image"])
            self.outline.setText(self.data.seperator["outline"])

            self.width_spin.setValue(int(self.data.seperator["width_value"]))
            self.width_cb.setCurrentText(self.data.seperator["width_type"])
            self.height_spin.setValue(int(self.data.seperator["height_value"]))
            self.height_cb.setCurrentText(self.data.seperator["height_type"])

            self.f_family_edit.setText(self.data.seperator["font_family"])
            self.f_size_spin.setText(self.data.seperator["font_size"])
            self.f_weight_cb.setCurrentText(self.data.seperator["font_weight"])
            self.f_style_cb.setCurrentText(self.data.seperator["font_style"])

            self.line_height_edit.setText(self.data.seperator["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.seperator["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.seperator["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.seperator["text_align"])
            self.text_decoration.setCurrentText(self.data.seperator["text_decoration"])
            self.text_transform.setCurrentText(self.data.seperator["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.seperator["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.seperator["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.seperator["background_color"])

            self.border.setText(self.data.seperator["border"])
            self.border_width.setValue(int(self.data.seperator["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.seperator["border_width_type"])

            self.border_style.setCurrentText(self.data.seperator["border_style"])
            self.border_color.setText(self.data.seperator["border_color"])

            self.border_right.setText(self.data.seperator["border_right"])
            self.border_left.setText(self.data.seperator["border_left"])
            self.border_bottom.setText(self.data.seperator["border_bottom"])
            self.border_top.setText(self.data.seperator["border_top"])

            self.border_radius.setText(self.data.seperator["border_radius"])

            self.padding_top_spb.setValue(int(self.data.seperator["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.seperator["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.seperator["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.seperator["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.seperator["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.seperator["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.seperator["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.seperator["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.seperator["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.seperator["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.seperator["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.seperator["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.seperator["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.seperator["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.seperator["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.seperator["margin_left_type"])

        elif self.cb.currentText() == "::indicator:exclusive:checked":
            self.color.setText(self.data.indicator_exclusive_checked["color"])

            self.image.setText(self.data.indicator_exclusive_checked["image"])
            self.outline.setText(self.data.indicator_exclusive_checked["outline"])

            self.width_spin.setValue(int(self.data.indicator_exclusive_checked["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator_exclusive_checked["width_type"])
            self.height_spin.setValue(int(self.data.indicator_exclusive_checked["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator_exclusive_checked["height_type"])

            self.f_family_edit.setText(self.data.indicator_exclusive_checked["font_family"])
            self.f_size_spin.setText(self.data.indicator_exclusive_checked["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator_exclusive_checked["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator_exclusive_checked["font_style"])

            self.line_height_edit.setText(self.data.indicator_exclusive_checked["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator_exclusive_checked["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator_exclusive_checked["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator_exclusive_checked["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator_exclusive_checked["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator_exclusive_checked["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator_exclusive_checked["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator_exclusive_checked["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator_exclusive_checked["background_color"])

            self.border.setText(self.data.indicator_exclusive_checked["border"])
            self.border_width.setValue(int(self.data.indicator_exclusive_checked["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator_exclusive_checked["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator_exclusive_checked["border_style"])
            self.border_color.setText(self.data.indicator_exclusive_checked["border_color"])

            self.border_right.setText(self.data.indicator_exclusive_checked["border_right"])
            self.border_left.setText(self.data.indicator_exclusive_checked["border_left"])
            self.border_bottom.setText(self.data.indicator_exclusive_checked["border_bottom"])
            self.border_top.setText(self.data.indicator_exclusive_checked["border_top"])

            self.border_radius.setText(self.data.indicator_exclusive_checked["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator_exclusive_checked["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator_exclusive_checked["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator_exclusive_checked["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator_exclusive_checked["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator_exclusive_checked["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator_exclusive_checked["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator_exclusive_checked["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator_exclusive_checked["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator_exclusive_checked["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator_exclusive_checked["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator_exclusive_checked["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator_exclusive_checked["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator_exclusive_checked["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator_exclusive_checked["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator_exclusive_checked["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator_exclusive_checked["margin_left_type"])

        elif self.cb.currentText() == "::indicator:exclusive:checked:selected":
            self.color.setText(self.data.indicator_exclusive_checked_selected["color"])

            self.image.setText(self.data.indicator_exclusive_checked_selected["image"])
            self.outline.setText(self.data.indicator_exclusive_checked_selected["outline"])

            self.width_spin.setValue(int(self.data.indicator_exclusive_checked_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator_exclusive_checked_selected["width_type"])
            self.height_spin.setValue(int(self.data.indicator_exclusive_checked_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator_exclusive_checked_selected["height_type"])

            self.f_family_edit.setText(self.data.indicator_exclusive_checked_selected["font_family"])
            self.f_size_spin.setText(self.data.indicator_exclusive_checked_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator_exclusive_checked_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator_exclusive_checked_selected["font_style"])

            self.line_height_edit.setText(self.data.indicator_exclusive_checked_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator_exclusive_checked_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator_exclusive_checked_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator_exclusive_checked_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator_exclusive_checked_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator_exclusive_checked_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator_exclusive_checked_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator_exclusive_checked_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator_exclusive_checked_selected["background_color"])

            self.border.setText(self.data.indicator_exclusive_checked_selected["border"])
            self.border_width.setValue(int(self.data.indicator_exclusive_checked_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator_exclusive_checked_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator_exclusive_checked_selected["border_style"])
            self.border_color.setText(self.data.indicator_exclusive_checked_selected["border_color"])

            self.border_right.setText(self.data.indicator_exclusive_checked_selected["border_right"])
            self.border_left.setText(self.data.indicator_exclusive_checked_selected["border_left"])
            self.border_bottom.setText(self.data.indicator_exclusive_checked_selected["border_bottom"])
            self.border_top.setText(self.data.indicator_exclusive_checked_selected["border_top"])

            self.border_radius.setText(self.data.indicator_exclusive_checked_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator_exclusive_checked_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator_exclusive_checked_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator_exclusive_checked_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator_exclusive_checked_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator_exclusive_checked_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator_exclusive_checked_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator_exclusive_checked_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator_exclusive_checked_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator_exclusive_checked_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator_exclusive_checked_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator_exclusive_checked_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator_exclusive_checked_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator_exclusive_checked_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator_exclusive_checked_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator_exclusive_checked_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator_exclusive_checked_selected["margin_left_type"])

        elif self.cb.currentText() == "::indicator:exclusive:unchecked":
            self.color.setText(self.data.indicator_exclusive_unchecked["color"])

            self.image.setText(self.data.indicator_exclusive_unchecked["image"])
            self.outline.setText(self.data.indicator_exclusive_unchecked["outline"])

            self.width_spin.setValue(int(self.data.indicator_exclusive_unchecked["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator_exclusive_unchecked["width_type"])
            self.height_spin.setValue(int(self.data.indicator_exclusive_unchecked["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator_exclusive_unchecked["height_type"])

            self.f_family_edit.setText(self.data.indicator_exclusive_unchecked["font_family"])
            self.f_size_spin.setText(self.data.indicator_exclusive_unchecked["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator_exclusive_unchecked["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator_exclusive_unchecked["font_style"])

            self.line_height_edit.setText(self.data.indicator_exclusive_unchecked["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator_exclusive_unchecked["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator_exclusive_unchecked["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator_exclusive_unchecked["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator_exclusive_unchecked["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator_exclusive_unchecked["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator_exclusive_unchecked["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator_exclusive_unchecked["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator_exclusive_unchecked["background_color"])

            self.border.setText(self.data.indicator_exclusive_unchecked["border"])
            self.border_width.setValue(int(self.data.indicator_exclusive_unchecked["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator_exclusive_unchecked["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator_exclusive_unchecked["border_style"])
            self.border_color.setText(self.data.indicator_exclusive_unchecked["border_color"])

            self.border_right.setText(self.data.indicator_exclusive_unchecked["border_right"])
            self.border_left.setText(self.data.indicator_exclusive_unchecked["border_left"])
            self.border_bottom.setText(self.data.indicator_exclusive_unchecked["border_bottom"])
            self.border_top.setText(self.data.indicator_exclusive_unchecked["border_top"])

            self.border_radius.setText(self.data.indicator_exclusive_unchecked["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator_exclusive_unchecked["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator_exclusive_unchecked["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator_exclusive_unchecked["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator_exclusive_unchecked["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator_exclusive_unchecked["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator_exclusive_unchecked["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator_exclusive_unchecked["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator_exclusive_unchecked["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator_exclusive_unchecked["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator_exclusive_unchecked["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator_exclusive_unchecked["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator_exclusive_unchecked["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator_exclusive_unchecked["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator_exclusive_unchecked["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator_exclusive_unchecked["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator_exclusive_unchecked["margin_left_type"])

        elif self.cb.currentText() == "::indicator:exclusive:unchecked:selected":
            self.color.setText(self.data.indicator_exclusive_unchecked_selected["color"])

            self.image.setText(self.data.indicator_exclusive_unchecked_selected["image"])
            self.outline.setText(self.data.indicator_exclusive_unchecked_selected["outline"])


            self.width_spin.setValue(int(self.data.indicator_exclusive_unchecked_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator_exclusive_unchecked_selected["width_type"])
            self.height_spin.setValue(int(self.data.indicator_exclusive_unchecked_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator_exclusive_unchecked_selected["height_type"])

            self.f_family_edit.setText(self.data.indicator_exclusive_unchecked_selected["font_family"])
            self.f_size_spin.setText(self.data.indicator_exclusive_unchecked_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator_exclusive_unchecked_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator_exclusive_unchecked_selected["font_style"])

            self.line_height_edit.setText(self.data.indicator_exclusive_unchecked_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator_exclusive_unchecked_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator_exclusive_unchecked_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator_exclusive_unchecked_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator_exclusive_unchecked_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator_exclusive_unchecked_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator_exclusive_unchecked_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator_exclusive_unchecked_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator_exclusive_unchecked_selected["background_color"])

            self.border.setText(self.data.indicator_exclusive_unchecked_selected["border"])
            self.border_width.setValue(int(self.data.indicator_exclusive_unchecked_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator_exclusive_unchecked_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator_exclusive_unchecked_selected["border_style"])
            self.border_color.setText(self.data.indicator_exclusive_unchecked_selected["border_color"])

            self.border_right.setText(self.data.indicator_exclusive_unchecked_selected["border_right"])
            self.border_left.setText(self.data.indicator_exclusive_unchecked_selected["border_left"])
            self.border_bottom.setText(self.data.indicator_exclusive_unchecked_selected["border_bottom"])
            self.border_top.setText(self.data.indicator_exclusive_unchecked_selected["border_top"])

            self.border_radius.setText(self.data.indicator_exclusive_unchecked_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator_exclusive_unchecked_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator_exclusive_unchecked_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator_exclusive_unchecked_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator_exclusive_unchecked_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator_exclusive_unchecked_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator_exclusive_unchecked_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator_exclusive_unchecked_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator_exclusive_unchecked_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator_exclusive_unchecked_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator_exclusive_unchecked_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator_exclusive_unchecked_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator_exclusive_unchecked_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator_exclusive_unchecked_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator_exclusive_unchecked_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator_exclusive_unchecked_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator_exclusive_unchecked_selected["margin_left_type"])

        elif self.cb.currentText() == "::indicator:non-exclusive:checked":
            self.color.setText(self.data.indicator_non_exclusive_checked["color"])

            self.image.setText(self.data.indicator_non_exclusive_checked["image"])
            self.outline.setText(self.data.indicator_non_exclusive_checked["outline"])

            self.width_spin.setValue(int(self.data.indicator_non_exclusive_checked["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator_non_exclusive_checked["width_type"])
            self.height_spin.setValue(int(self.data.indicator_non_exclusive_checked["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator_non_exclusive_checked["height_type"])

            self.f_family_edit.setText(self.data.indicator_non_exclusive_checked["font_family"])
            self.f_size_spin.setText(self.data.indicator_non_exclusive_checked["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator_non_exclusive_checked["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator_non_exclusive_checked["font_style"])

            self.line_height_edit.setText(self.data.indicator_non_exclusive_checked["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator_non_exclusive_checked["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator_non_exclusive_checked["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator_non_exclusive_checked["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator_non_exclusive_checked["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator_non_exclusive_checked["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator_non_exclusive_checked["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator_non_exclusive_checked["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator_non_exclusive_checked["background_color"])

            self.border.setText(self.data.indicator_non_exclusive_checked["border"])
            self.border_width.setValue(int(self.data.indicator_non_exclusive_checked["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator_non_exclusive_checked["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator_non_exclusive_checked["border_style"])
            self.border_color.setText(self.data.indicator_non_exclusive_checked["border_color"])

            self.border_right.setText(self.data.indicator_non_exclusive_checked["border_right"])
            self.border_left.setText(self.data.indicator_non_exclusive_checked["border_left"])
            self.border_bottom.setText(self.data.indicator_non_exclusive_checked["border_bottom"])
            self.border_top.setText(self.data.indicator_non_exclusive_checked["border_top"])

            self.border_radius.setText(self.data.indicator_non_exclusive_checked["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator_non_exclusive_checked["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator_non_exclusive_checked["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator_non_exclusive_checked["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator_non_exclusive_checked["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator_non_exclusive_checked["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator_non_exclusive_checked["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator_non_exclusive_checked["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator_non_exclusive_checked["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator_non_exclusive_checked["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator_non_exclusive_checked["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator_non_exclusive_checked["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator_non_exclusive_checked["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator_non_exclusive_checked["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator_non_exclusive_checked["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator_non_exclusive_checked["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator_non_exclusive_checked["margin_left_type"])

        elif self.cb.currentText() == "::indicator:non-exclusive:checked:selected":
            self.color.setText(self.data.indicator_non_exclusive_checked_selected["color"])

            self.image.setText(self.data.indicator_non_exclusive_checked_selected["image"])
            self.outline.setText(self.data.indicator_non_exclusive_checked_selected["outline"])

            self.width_spin.setValue(int(self.data.indicator_non_exclusive_checked_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator_non_exclusive_checked_selected["width_type"])
            self.height_spin.setValue(int(self.data.indicator_non_exclusive_checked_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator_non_exclusive_checked_selected["height_type"])

            self.f_family_edit.setText(self.data.indicator_non_exclusive_checked_selected["font_family"])
            self.f_size_spin.setText(self.data.indicator_non_exclusive_checked_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator_non_exclusive_checked_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator_non_exclusive_checked_selected["font_style"])

            self.line_height_edit.setText(self.data.indicator_non_exclusive_checked_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator_non_exclusive_checked_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator_non_exclusive_checked_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator_non_exclusive_checked_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator_non_exclusive_checked_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator_non_exclusive_checked_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator_non_exclusive_checked_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator_non_exclusive_checked_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator_non_exclusive_checked_selected["background_color"])

            self.border.setText(self.data.indicator_non_exclusive_checked_selected["border"])
            self.border_width.setValue(int(self.data.indicator_non_exclusive_checked_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator_non_exclusive_checked_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator_non_exclusive_checked_selected["border_style"])
            self.border_color.setText(self.data.indicator_non_exclusive_checked_selected["border_color"])

            self.border_right.setText(self.data.indicator_non_exclusive_checked_selected["border_right"])
            self.border_left.setText(self.data.indicator_non_exclusive_checked_selected["border_left"])
            self.border_bottom.setText(self.data.indicator_non_exclusive_checked_selected["border_bottom"])
            self.border_top.setText(self.data.indicator_non_exclusive_checked_selected["border_top"])

            self.border_radius.setText(self.data.indicator_non_exclusive_checked_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator_non_exclusive_checked_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator_non_exclusive_checked_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator_non_exclusive_checked_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator_non_exclusive_checked_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator_non_exclusive_checked_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator_non_exclusive_checked_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator_non_exclusive_checked_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator_non_exclusive_checked_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator_non_exclusive_checked_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator_non_exclusive_checked_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator_non_exclusive_checked_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator_non_exclusive_checked_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator_non_exclusive_checked_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator_non_exclusive_checked_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator_non_exclusive_checked_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator_non_exclusive_checked_selected["margin_left_type"])

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked":
            self.color.setText(self.data.indicator_non_exclusive_unchecked["color"])

            self.image.setText(self.data.indicator_non_exclusive_unchecked["image"])
            self.outline.setText(self.data.indicator_non_exclusive_unchecked["outline"])

            self.width_spin.setValue(int(self.data.indicator_non_exclusive_unchecked["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked["width_type"])
            self.height_spin.setValue(int(self.data.indicator_non_exclusive_unchecked["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked["height_type"])

            self.f_family_edit.setText(self.data.indicator_non_exclusive_unchecked["font_family"])
            self.f_size_spin.setText(self.data.indicator_non_exclusive_unchecked["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked["font_style"])

            self.line_height_edit.setText(self.data.indicator_non_exclusive_unchecked["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator_non_exclusive_unchecked["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator_non_exclusive_unchecked["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator_non_exclusive_unchecked["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator_non_exclusive_unchecked["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator_non_exclusive_unchecked["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator_non_exclusive_unchecked["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator_non_exclusive_unchecked["background_color"])

            self.border.setText(self.data.indicator_non_exclusive_unchecked["border"])
            self.border_width.setValue(int(self.data.indicator_non_exclusive_unchecked["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator_non_exclusive_unchecked["border_style"])
            self.border_color.setText(self.data.indicator_non_exclusive_unchecked["border_color"])

            self.border_right.setText(self.data.indicator_non_exclusive_unchecked["border_right"])
            self.border_left.setText(self.data.indicator_non_exclusive_unchecked["border_left"])
            self.border_bottom.setText(self.data.indicator_non_exclusive_unchecked["border_bottom"])
            self.border_top.setText(self.data.indicator_non_exclusive_unchecked["border_top"])

            self.border_radius.setText(self.data.indicator_non_exclusive_unchecked["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator_non_exclusive_unchecked["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator_non_exclusive_unchecked["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator_non_exclusive_unchecked["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator_non_exclusive_unchecked["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator_non_exclusive_unchecked["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator_non_exclusive_unchecked["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator_non_exclusive_unchecked["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator_non_exclusive_unchecked["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked["margin_left_type"])

        elif self.cb.currentText() == "::indicator:non-exclusive:unchecked:selected":
            self.color.setText(self.data.indicator_non_exclusive_unchecked_selected["color"])

            self.image.setText(self.data.indicator_non_exclusive_unchecked_selected["image"])
            self.outline.setText(self.data.indicator_non_exclusive_unchecked_selected["outline"])

            self.width_spin.setValue(int(self.data.indicator_non_exclusive_unchecked_selected["width_value"]))
            self.width_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["width_type"])
            self.height_spin.setValue(int(self.data.indicator_non_exclusive_unchecked_selected["height_value"]))
            self.height_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["height_type"])

            self.f_family_edit.setText(self.data.indicator_non_exclusive_unchecked_selected["font_family"])
            self.f_size_spin.setText(self.data.indicator_non_exclusive_unchecked_selected["font_size"])
            self.f_weight_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["font_weight"])
            self.f_style_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["font_style"])

            self.line_height_edit.setText(self.data.indicator_non_exclusive_unchecked_selected["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.indicator_non_exclusive_unchecked_selected["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["text_align"])
            self.text_decoration.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["text_decoration"])
            self.text_transform.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.indicator_non_exclusive_unchecked_selected["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.indicator_non_exclusive_unchecked_selected["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.indicator_non_exclusive_unchecked_selected["background_color"])

            self.border.setText(self.data.indicator_non_exclusive_unchecked_selected["border"])
            self.border_width.setValue(int(self.data.indicator_non_exclusive_unchecked_selected["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["border_width_type"])

            self.border_style.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["border_style"])
            self.border_color.setText(self.data.indicator_non_exclusive_unchecked_selected["border_color"])

            self.border_right.setText(self.data.indicator_non_exclusive_unchecked_selected["border_right"])
            self.border_left.setText(self.data.indicator_non_exclusive_unchecked_selected["border_left"])
            self.border_bottom.setText(self.data.indicator_non_exclusive_unchecked_selected["border_bottom"])
            self.border_top.setText(self.data.indicator_non_exclusive_unchecked_selected["border_top"])

            self.border_radius.setText(self.data.indicator_non_exclusive_unchecked_selected["border_radius"])

            self.padding_top_spb.setValue(int(self.data.indicator_non_exclusive_unchecked_selected["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.indicator_non_exclusive_unchecked_selected["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.indicator_non_exclusive_unchecked_selected["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.indicator_non_exclusive_unchecked_selected["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.indicator_non_exclusive_unchecked_selected["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.indicator_non_exclusive_unchecked_selected["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.indicator_non_exclusive_unchecked_selected["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.indicator_non_exclusive_unchecked_selected["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.indicator_non_exclusive_unchecked_selected["margin_left_type"])

        elif self.cb.currentText() == "::add-line:vertical":
            self.color.setText(self.data.add_line_vertical["color"])

            self.image.setText(self.data.add_line_vertical["image"])
            self.outline.setText(self.data.add_line_vertical["outline"])

            self.width_spin.setValue(int(self.data.add_line_vertical["width_value"]))
            self.width_cb.setCurrentText(self.data.add_line_vertical["width_type"])
            self.height_spin.setValue(int(self.data.add_line_vertical["height_value"]))
            self.height_cb.setCurrentText(self.data.add_line_vertical["height_type"])

            self.f_family_edit.setText(self.data.add_line_vertical["font_family"])
            self.f_size_spin.setText(self.data.add_line_vertical["font_size"])
            self.f_weight_cb.setCurrentText(self.data.add_line_vertical["font_weight"])
            self.f_style_cb.setCurrentText(self.data.add_line_vertical["font_style"])

            self.line_height_edit.setText(self.data.add_line_vertical["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.add_line_vertical["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.add_line_vertical["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.add_line_vertical["text_align"])
            self.text_decoration.setCurrentText(self.data.add_line_vertical["text_decoration"])
            self.text_transform.setCurrentText(self.data.add_line_vertical["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.add_line_vertical["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.add_line_vertical["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.add_line_vertical["background_color"])

            self.border.setText(self.data.add_line_vertical["border"])
            self.border_width.setValue(int(self.data.add_line_vertical["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.add_line_vertical["border_width_type"])

            self.border_style.setCurrentText(self.data.add_line_vertical["border_style"])
            self.border_color.setText(self.data.add_line_vertical["border_color"])

            self.border_right.setText(self.data.add_line_vertical["border_right"])
            self.border_left.setText(self.data.add_line_vertical["border_left"])
            self.border_bottom.setText(self.data.add_line_vertical["border_bottom"])
            self.border_top.setText(self.data.add_line_vertical["border_top"])

            self.border_radius.setText(self.data.add_line_vertical["border_radius"])

            self.padding_top_spb.setValue(int(self.data.add_line_vertical["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.add_line_vertical["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.add_line_vertical["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.add_line_vertical["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.add_line_vertical["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.add_line_vertical["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.add_line_vertical["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.add_line_vertical["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.add_line_vertical["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.add_line_vertical["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.add_line_vertical["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.add_line_vertical["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.add_line_vertical["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.add_line_vertical["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.add_line_vertical["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.add_line_vertical["margin_left_type"])

        elif self.cb.currentText() == "::sub-line:vertical":
            self.color.setText(self.data.sub_line_vertical["color"])

            self.image.setText(self.data.sub_line_vertical["image"])
            self.outline.setText(self.data.sub_line_vertical["outline"])

            self.width_spin.setValue(int(self.data.sub_line_vertical["width_value"]))
            self.width_cb.setCurrentText(self.data.sub_line_vertical["width_type"])
            self.height_spin.setValue(int(self.data.sub_line_vertical["height_value"]))
            self.height_cb.setCurrentText(self.data.sub_line_vertical["height_type"])

            self.f_family_edit.setText(self.data.sub_line_vertical["font_family"])
            self.f_size_spin.setText(self.data.sub_line_vertical["font_size"])
            self.f_weight_cb.setCurrentText(self.data.sub_line_vertical["font_weight"])
            self.f_style_cb.setCurrentText(self.data.sub_line_vertical["font_style"])

            self.line_height_edit.setText(self.data.sub_line_vertical["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.sub_line_vertical["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.sub_line_vertical["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.sub_line_vertical["text_align"])
            self.text_decoration.setCurrentText(self.data.sub_line_vertical["text_decoration"])
            self.text_transform.setCurrentText(self.data.sub_line_vertical["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.sub_line_vertical["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.sub_line_vertical["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.sub_line_vertical["background_color"])

            self.border.setText(self.data.sub_line_vertical["border"])
            self.border_width.setValue(int(self.data.sub_line_vertical["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.sub_line_vertical["border_width_type"])

            self.border_style.setCurrentText(self.data.sub_line_vertical["border_style"])
            self.border_color.setText(self.data.sub_line_vertical["border_color"])

            self.border_right.setText(self.data.sub_line_vertical["border_right"])
            self.border_left.setText(self.data.sub_line_vertical["border_left"])
            self.border_bottom.setText(self.data.sub_line_vertical["border_bottom"])
            self.border_top.setText(self.data.sub_line_vertical["border_top"])

            self.border_radius.setText(self.data.sub_line_vertical["border_radius"])

            self.padding_top_spb.setValue(int(self.data.sub_line_vertical["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.sub_line_vertical["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.sub_line_vertical["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.sub_line_vertical["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.sub_line_vertical["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.sub_line_vertical["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.sub_line_vertical["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.sub_line_vertical["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.sub_line_vertical["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.sub_line_vertical["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.sub_line_vertical["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.sub_line_vertical["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.sub_line_vertical["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.sub_line_vertical["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.sub_line_vertical["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.sub_line_vertical["margin_left_type"])

        elif self.cb.currentText() == "::up-arrow:vertical":
            self.color.setText(self.data.up_arrow_vertical["color"])

            self.image.setText(self.data.up_arrow_vertical["image"])
            self.outline.setText(self.data.up_arrow_vertical["outline"])

            self.width_spin.setValue(int(self.data.up_arrow_vertical["width_value"]))
            self.width_cb.setCurrentText(self.data.up_arrow_vertical["width_type"])
            self.height_spin.setValue(int(self.data.up_arrow_vertical["height_value"]))
            self.height_cb.setCurrentText(self.data.up_arrow_vertical["height_type"])

            self.f_family_edit.setText(self.data.up_arrow_vertical["font_family"])
            self.f_size_spin.setText(self.data.up_arrow_vertical["font_size"])
            self.f_weight_cb.setCurrentText(self.data.up_arrow_vertical["font_weight"])
            self.f_style_cb.setCurrentText(self.data.up_arrow_vertical["font_style"])

            self.line_height_edit.setText(self.data.up_arrow_vertical["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.up_arrow_vertical["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.up_arrow_vertical["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.up_arrow_vertical["text_align"])
            self.text_decoration.setCurrentText(self.data.up_arrow_vertical["text_decoration"])
            self.text_transform.setCurrentText(self.data.up_arrow_vertical["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.up_arrow_vertical["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.up_arrow_vertical["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.up_arrow_vertical["background_color"])

            self.border.setText(self.data.up_arrow_vertical["border"])
            self.border_width.setValue(int(self.data.up_arrow_vertical["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.up_arrow_vertical["border_width_type"])

            self.border_style.setCurrentText(self.data.up_arrow_vertical["border_style"])
            self.border_color.setText(self.data.up_arrow_vertical["border_color"])

            self.border_right.setText(self.data.up_arrow_vertical["border_right"])
            self.border_left.setText(self.data.up_arrow_vertical["border_left"])
            self.border_bottom.setText(self.data.up_arrow_vertical["border_bottom"])
            self.border_top.setText(self.data.up_arrow_vertical["border_top"])

            self.border_radius.setText(self.data.up_arrow_vertical["border_radius"])

            self.padding_top_spb.setValue(int(self.data.up_arrow_vertical["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.up_arrow_vertical["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.up_arrow_vertical["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.up_arrow_vertical["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.up_arrow_vertical["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.up_arrow_vertical["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.up_arrow_vertical["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.up_arrow_vertical["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.up_arrow_vertical["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.up_arrow_vertical["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.up_arrow_vertical["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.up_arrow_vertical["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.up_arrow_vertical["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.up_arrow_vertical["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.up_arrow_vertical["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.up_arrow_vertical["margin_left_type"])

        elif self.cb.currentText() == "::down-arrow:vertical":
            self.color.setText(self.data.down_arrow_vertical["color"])

            self.image.setText(self.data.down_arrow_vertical["image"])
            self.outline.setText(self.data.down_arrow_vertical["outline"])

            self.width_spin.setValue(int(self.data.down_arrow_vertical["width_value"]))
            self.width_cb.setCurrentText(self.data.down_arrow_vertical["width_type"])
            self.height_spin.setValue(int(self.data.down_arrow_vertical["height_value"]))
            self.height_cb.setCurrentText(self.data.down_arrow_vertical["height_type"])

            self.f_family_edit.setText(self.data.down_arrow_vertical["font_family"])
            self.f_size_spin.setText(self.data.down_arrow_vertical["font_size"])
            self.f_weight_cb.setCurrentText(self.data.down_arrow_vertical["font_weight"])
            self.f_style_cb.setCurrentText(self.data.down_arrow_vertical["font_style"])

            self.line_height_edit.setText(self.data.down_arrow_vertical["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.down_arrow_vertical["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.down_arrow_vertical["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.down_arrow_vertical["text_align"])
            self.text_decoration.setCurrentText(self.data.down_arrow_vertical["text_decoration"])
            self.text_transform.setCurrentText(self.data.down_arrow_vertical["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.down_arrow_vertical["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.down_arrow_vertical["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.down_arrow_vertical["background_color"])

            self.border.setText(self.data.down_arrow_vertical["border"])
            self.border_width.setValue(int(self.data.down_arrow_vertical["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.down_arrow_vertical["border_width_type"])

            self.border_style.setCurrentText(self.data.down_arrow_vertical["border_style"])
            self.border_color.setText(self.data.down_arrow_vertical["border_color"])

            self.border_right.setText(self.data.down_arrow_vertical["border_right"])
            self.border_left.setText(self.data.down_arrow_vertical["border_left"])
            self.border_bottom.setText(self.data.down_arrow_vertical["border_bottom"])
            self.border_top.setText(self.data.down_arrow_vertical["border_top"])

            self.border_radius.setText(self.data.down_arrow_vertical["border_radius"])

            self.padding_top_spb.setValue(int(self.data.down_arrow_vertical["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.down_arrow_vertical["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.down_arrow_vertical["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.down_arrow_vertical["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.down_arrow_vertical["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.down_arrow_vertical["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.down_arrow_vertical["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.down_arrow_vertical["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.down_arrow_vertical["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.down_arrow_vertical["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.down_arrow_vertical["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.down_arrow_vertical["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.down_arrow_vertical["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.down_arrow_vertical["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.down_arrow_vertical["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.down_arrow_vertical["margin_left_type"])

        elif self.cb.currentText() == "::add-line:horizontal":
            self.color.setText(self.data.add_line_horizontal["color"])

            self.image.setText(self.data.add_line_horizontal["image"])
            self.outline.setText(self.data.add_line_horizontal["outline"])

            self.width_spin.setValue(int(self.data.add_line_horizontal["width_value"]))
            self.width_cb.setCurrentText(self.data.add_line_horizontal["width_type"])
            self.height_spin.setValue(int(self.data.add_line_horizontal["height_value"]))
            self.height_cb.setCurrentText(self.data.add_line_horizontal["height_type"])

            self.f_family_edit.setText(self.data.add_line_horizontal["font_family"])
            self.f_size_spin.setText(self.data.add_line_horizontal["font_size"])
            self.f_weight_cb.setCurrentText(self.data.add_line_horizontal["font_weight"])
            self.f_style_cb.setCurrentText(self.data.add_line_horizontal["font_style"])

            self.line_height_edit.setText(self.data.add_line_horizontal["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.add_line_horizontal["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.add_line_horizontal["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.add_line_horizontal["text_align"])
            self.text_decoration.setCurrentText(self.data.add_line_horizontal["text_decoration"])
            self.text_transform.setCurrentText(self.data.add_line_horizontal["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.add_line_horizontal["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.add_line_horizontal["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.add_line_horizontal["background_color"])

            self.border.setText(self.data.add_line_horizontal["border"])
            self.border_width.setValue(int(self.data.add_line_horizontal["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.add_line_horizontal["border_width_type"])

            self.border_style.setCurrentText(self.data.add_line_horizontal["border_style"])
            self.border_color.setText(self.data.add_line_horizontal["border_color"])

            self.border_right.setText(self.data.add_line_horizontal["border_right"])
            self.border_left.setText(self.data.add_line_horizontal["border_left"])
            self.border_bottom.setText(self.data.add_line_horizontal["border_bottom"])
            self.border_top.setText(self.data.add_line_horizontal["border_top"])

            self.border_radius.setText(self.data.add_line_horizontal["border_radius"])

            self.padding_top_spb.setValue(int(self.data.add_line_horizontal["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.add_line_horizontal["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.add_line_horizontal["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.add_line_horizontal["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.add_line_horizontal["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.add_line_horizontal["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.add_line_horizontal["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.add_line_horizontal["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.add_line_horizontal["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.add_line_horizontal["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.add_line_horizontal["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.add_line_horizontal["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.add_line_horizontal["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.add_line_horizontal["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.add_line_horizontal["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.add_line_horizontal["margin_left_type"])

        elif self.cb.currentText() == "::sub-line:horizontal":
            self.color.setText(self.data.sub_line_horizontal["color"])

            self.image.setText(self.data.sub_line_horizontal["image"])
            self.outline.setText(self.data.sub_line_horizontal["outline"])

            self.width_spin.setValue(int(self.data.sub_line_horizontal["width_value"]))
            self.width_cb.setCurrentText(self.data.sub_line_horizontal["width_type"])
            self.height_spin.setValue(int(self.data.sub_line_horizontal["height_value"]))
            self.height_cb.setCurrentText(self.data.sub_line_horizontal["height_type"])

            self.f_family_edit.setText(self.data.sub_line_horizontal["font_family"])
            self.f_size_spin.setText(self.data.sub_line_horizontal["font_size"])
            self.f_weight_cb.setCurrentText(self.data.sub_line_horizontal["font_weight"])
            self.f_style_cb.setCurrentText(self.data.sub_line_horizontal["font_style"])

            self.line_height_edit.setText(self.data.sub_line_horizontal["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.sub_line_horizontal["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.sub_line_horizontal["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.sub_line_horizontal["text_align"])
            self.text_decoration.setCurrentText(self.data.sub_line_horizontal["text_decoration"])
            self.text_transform.setCurrentText(self.data.sub_line_horizontal["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.sub_line_horizontal["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.sub_line_horizontal["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.sub_line_horizontal["background_color"])

            self.border.setText(self.data.sub_line_horizontal["border"])
            self.border_width.setValue(int(self.data.sub_line_horizontal["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.sub_line_horizontal["border_width_type"])

            self.border_style.setCurrentText(self.data.sub_line_horizontal["border_style"])
            self.border_color.setText(self.data.sub_line_horizontal["border_color"])

            self.border_right.setText(self.data.sub_line_horizontal["border_right"])
            self.border_left.setText(self.data.sub_line_horizontal["border_left"])
            self.border_bottom.setText(self.data.sub_line_horizontal["border_bottom"])
            self.border_top.setText(self.data.sub_line_horizontal["border_top"])

            self.border_radius.setText(self.data.sub_line_horizontal["border_radius"])

            self.padding_top_spb.setValue(int(self.data.sub_line_horizontal["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.sub_line_horizontal["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.sub_line_horizontal["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.sub_line_horizontal["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.sub_line_horizontal["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.sub_line_horizontal["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.sub_line_horizontal["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.sub_line_horizontal["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.sub_line_horizontal["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.sub_line_horizontal["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.sub_line_horizontal["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.sub_line_horizontal["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.sub_line_horizontal["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.sub_line_horizontal["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.sub_line_horizontal["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.sub_line_horizontal["margin_left_type"])

        elif self.cb.currentText() == "::left-arrow:horizontal":
            self.color.setText(self.data.left_arrow_horizontal["color"])

            self.image.setText(self.data.left_arrow_horizontal["image"])
            self.outline.setText(self.data.left_arrow_horizontal["outline"])

            self.width_spin.setValue(int(self.data.left_arrow_horizontal["width_value"]))
            self.width_cb.setCurrentText(self.data.left_arrow_horizontal["width_type"])
            self.height_spin.setValue(int(self.data.left_arrow_horizontal["height_value"]))
            self.height_cb.setCurrentText(self.data.left_arrow_horizontal["height_type"])

            self.f_family_edit.setText(self.data.left_arrow_horizontal["font_family"])
            self.f_size_spin.setText(self.data.left_arrow_horizontal["font_size"])
            self.f_weight_cb.setCurrentText(self.data.left_arrow_horizontal["font_weight"])
            self.f_style_cb.setCurrentText(self.data.left_arrow_horizontal["font_style"])

            self.line_height_edit.setText(self.data.left_arrow_horizontal["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.left_arrow_horizontal["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.left_arrow_horizontal["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.left_arrow_horizontal["text_align"])
            self.text_decoration.setCurrentText(self.data.left_arrow_horizontal["text_decoration"])
            self.text_transform.setCurrentText(self.data.left_arrow_horizontal["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.left_arrow_horizontal["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.left_arrow_horizontal["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.left_arrow_horizontal["background_color"])

            self.border.setText(self.data.left_arrow_horizontal["border"])
            self.border_width.setValue(int(self.data.left_arrow_horizontal["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.left_arrow_horizontal["border_width_type"])

            self.border_style.setCurrentText(self.data.left_arrow_horizontal["border_style"])
            self.border_color.setText(self.data.left_arrow_horizontal["border_color"])

            self.border_right.setText(self.data.left_arrow_horizontal["border_right"])
            self.border_left.setText(self.data.left_arrow_horizontal["border_left"])
            self.border_bottom.setText(self.data.left_arrow_horizontal["border_bottom"])
            self.border_top.setText(self.data.left_arrow_horizontal["border_top"])

            self.border_radius.setText(self.data.left_arrow_horizontal["border_radius"])

            self.padding_top_spb.setValue(int(self.data.left_arrow_horizontal["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.left_arrow_horizontal["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.left_arrow_horizontal["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.left_arrow_horizontal["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.left_arrow_horizontal["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.left_arrow_horizontal["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.left_arrow_horizontal["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.left_arrow_horizontal["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.left_arrow_horizontal["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.left_arrow_horizontal["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.left_arrow_horizontal["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.left_arrow_horizontal["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.left_arrow_horizontal["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.left_arrow_horizontal["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.left_arrow_horizontal["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.left_arrow_horizontal["margin_left_type"])

        elif self.cb.currentText() == "::right-arrow:horizontal":
            self.color.setText(self.data.right_arrow_horizontal["color"])

            self.image.setText(self.data.right_arrow_horizontal["image"])
            self.outline.setText(self.data.right_arrow_horizontal["outline"])

            self.width_spin.setValue(int(self.data.right_arrow_horizontal["width_value"]))
            self.width_cb.setCurrentText(self.data.right_arrow_horizontal["width_type"])
            self.height_spin.setValue(int(self.data.right_arrow_horizontal["height_value"]))
            self.height_cb.setCurrentText(self.data.right_arrow_horizontal["height_type"])

            self.f_family_edit.setText(self.data.right_arrow_horizontal["font_family"])
            self.f_size_spin.setText(self.data.right_arrow_horizontal["font_size"])
            self.f_weight_cb.setCurrentText(self.data.right_arrow_horizontal["font_weight"])
            self.f_style_cb.setCurrentText(self.data.right_arrow_horizontal["font_style"])

            self.line_height_edit.setText(self.data.right_arrow_horizontal["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.right_arrow_horizontal["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.right_arrow_horizontal["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.right_arrow_horizontal["text_align"])
            self.text_decoration.setCurrentText(self.data.right_arrow_horizontal["text_decoration"])
            self.text_transform.setCurrentText(self.data.right_arrow_horizontal["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.right_arrow_horizontal["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.right_arrow_horizontal["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.right_arrow_horizontal["background_color"])

            self.border.setText(self.data.right_arrow_horizontal["border"])
            self.border_width.setValue(int(self.data.right_arrow_horizontal["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.right_arrow_horizontal["border_width_type"])

            self.border_style.setCurrentText(self.data.right_arrow_horizontal["border_style"])
            self.border_color.setText(self.data.right_arrow_horizontal["border_color"])

            self.border_right.setText(self.data.right_arrow_horizontal["border_right"])
            self.border_left.setText(self.data.right_arrow_horizontal["border_left"])
            self.border_bottom.setText(self.data.right_arrow_horizontal["border_bottom"])
            self.border_top.setText(self.data.right_arrow_horizontal["border_top"])

            self.border_radius.setText(self.data.right_arrow_horizontal["border_radius"])

            self.padding_top_spb.setValue(int(self.data.right_arrow_horizontal["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.right_arrow_horizontal["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.right_arrow_horizontal["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.right_arrow_horizontal["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.right_arrow_horizontal["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.right_arrow_horizontal["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.right_arrow_horizontal["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.right_arrow_horizontal["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.right_arrow_horizontal["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.right_arrow_horizontal["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.right_arrow_horizontal["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.right_arrow_horizontal["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.right_arrow_horizontal["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.right_arrow_horizontal["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.right_arrow_horizontal["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.right_arrow_horizontal["margin_left_type"])


        elif self.cb.currentText() == "::tab:first":
            self.color.setText(self.data.tab_first["color"])

            self.image.setText(self.data.tab_first["image"])
            self.outline.setText(self.data.tab_first["outline"])

            self.width_spin.setValue(int(self.data.tab_first["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_first["width_type"])
            self.height_spin.setValue(int(self.data.tab_first["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_first["height_type"])

            self.f_family_edit.setText(self.data.tab_first["font_family"])
            self.f_size_spin.setText(self.data.tab_first["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_first["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_first["font_style"])

            self.line_height_edit.setText(self.data.tab_first["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_first["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_first["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_first["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_first["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_first["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_first["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_first["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_first["background_color"])

            self.border.setText(self.data.tab_first["border"])
            self.border_width.setValue(int(self.data.tab_first["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_first["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_first["border_style"])
            self.border_color.setText(self.data.tab_first["border_color"])

            self.border_right.setText(self.data.tab_first["border_right"])
            self.border_left.setText(self.data.tab_first["border_left"])
            self.border_bottom.setText(self.data.tab_first["border_bottom"])
            self.border_top.setText(self.data.tab_first["border_top"])

            self.border_radius.setText(self.data.tab_first["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_first["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_first["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_first["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_first["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_first["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_first["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_first["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_first["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_first["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_first["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_first["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_first["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_first["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_first["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_first["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_first["margin_left_type"])





        elif self.cb.currentText() == "::tab:last":
            self.color.setText(self.data.tab_last["color"])

            self.image.setText(self.data.tab_last["image"])
            self.outline.setText(self.data.tab_last["outline"])

            self.width_spin.setValue(int(self.data.tab_last["width_value"]))
            self.width_cb.setCurrentText(self.data.tab_last["width_type"])
            self.height_spin.setValue(int(self.data.tab_last["height_value"]))
            self.height_cb.setCurrentText(self.data.tab_last["height_type"])

            self.f_family_edit.setText(self.data.tab_last["font_family"])
            self.f_size_spin.setText(self.data.tab_last["font_size"])
            self.f_weight_cb.setCurrentText(self.data.tab_last["font_weight"])
            self.f_style_cb.setCurrentText(self.data.tab_last["font_style"])

            self.line_height_edit.setText(self.data.tab_last["line_height"])
            self.letter_spacing_spb.setValue(int(self.data.tab_last["letter_spacing_value"]))
            self.letter_spacing_cb.setCurrentText(self.data.tab_last["letter_spacing_type"])
            self.text_align.setCurrentText(self.data.tab_last["text_align"])
            self.text_decoration.setCurrentText(self.data.tab_last["text_decoration"])
            self.text_transform.setCurrentText(self.data.tab_last["text_transform"])

            if self.bg_lbl.text() == "background: ":
                self.bg_line.setText(self.data.tab_last["background"])
            elif self.bg_lbl.text() == "background-image: ":
                self.bg_line.setText(self.data.tab_last["background_image"])
            elif self.bg_lbl.text() == "background-color: ":
                self.bg_line.setText(self.data.tab_last["background_color"])

            self.border.setText(self.data.tab_last["border"])
            self.border_width.setValue(int(self.data.tab_last["border_width_value"]))
            self.border_width_cb.setCurrentText(self.data.tab_last["border_width_type"])

            self.border_style.setCurrentText(self.data.tab_last["border_style"])
            self.border_color.setText(self.data.tab_last["border_color"])

            self.border_right.setText(self.data.tab_last["border_right"])
            self.border_left.setText(self.data.tab_last["border_left"])
            self.border_bottom.setText(self.data.tab_last["border_bottom"])
            self.border_top.setText(self.data.tab_last["border_top"])

            self.border_radius.setText(self.data.tab_last["border_radius"])

            self.padding_top_spb.setValue(int(self.data.tab_last["padding_top_value"]))
            self.padding_top_cb.setCurrentText(self.data.tab_last["padding_top_type"])
            self.padding_right_spb.setValue(int(self.data.tab_last["padding_right_value"]))
            self.padding_right_cb.setCurrentText(self.data.tab_last["padding_right_type"])
            self.padding_bottom_spb.setValue(int(self.data.tab_last["padding_bottom_value"]))
            self.padding_bottom_cb.setCurrentText(self.data.tab_last["padding_bottom_type"])
            self.padding_left_spb.setValue(int(self.data.tab_last["padding_left_value"]))
            self.padding_left_cb.setCurrentText(self.data.tab_last["padding_left_type"])

            self.margin_top_spb.setValue(int(self.data.tab_last["margin_top_value"]))
            self.margin_top_cb.setCurrentText(self.data.tab_last["margin_top_type"])
            self.margin_right_spb.setValue(int(self.data.tab_last["margin_right_value"]))
            self.margin_right_cb.setCurrentText(self.data.tab_last["margin_right_type"])
            self.margin_bottom_spb.setValue(int(self.data.tab_last["margin_bottom_value"]))
            self.margin_bottom_cb.setCurrentText(self.data.tab_last["margin_bottom_type"])
            self.margin_left_spb.setValue(int(self.data.tab_last["margin_left_value"]))
            self.margin_left_cb.setCurrentText(self.data.tab_last["margin_left_type"])
